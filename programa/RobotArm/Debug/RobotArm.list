
RobotArm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b688  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800b794  0800b794  0001b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b8  0800c0b8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0b8  0800c0b8  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0b8  0800c0b8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c0c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000159c  200001d4  0800c294  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001770  0800c294  00021770  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001535a  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a4c  00000000  00000000  000355dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00039030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f41  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b244  00000000  00000000  0003b361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a21f  00000000  00000000  000565a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000905f5  00000000  00000000  000707c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057a0  00000000  00000000  00100dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0010655c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b77c 	.word	0x0800b77c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	0800b77c 	.word	0x0800b77c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4f      	ldr	r3, [pc, #316]	; (80002b0 <MX_GPIO_Init+0x154>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4e      	ldr	r2, [pc, #312]	; (80002b0 <MX_GPIO_Init+0x154>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b4c      	ldr	r3, [pc, #304]	; (80002b0 <MX_GPIO_Init+0x154>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b49      	ldr	r3, [pc, #292]	; (80002b0 <MX_GPIO_Init+0x154>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a48      	ldr	r2, [pc, #288]	; (80002b0 <MX_GPIO_Init+0x154>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b46      	ldr	r3, [pc, #280]	; (80002b0 <MX_GPIO_Init+0x154>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a42      	ldr	r2, [pc, #264]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b3d      	ldr	r3, [pc, #244]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a3c      	ldr	r2, [pc, #240]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b3a      	ldr	r3, [pc, #232]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPcb_GPIO_Port, LedPcb_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4837      	ldr	r0, [pc, #220]	; (80002b4 <MX_GPIO_Init+0x158>)
 80001d8:	f002 fb4e 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, StepM_Z_Pin|StepM_Y_Pin|StepM_X_Pin|DirM_Z_Pin
 80001dc:	2200      	movs	r2, #0
 80001de:	213f      	movs	r1, #63	; 0x3f
 80001e0:	4835      	ldr	r0, [pc, #212]	; (80002b8 <MX_GPIO_Init+0x15c>)
 80001e2:	f002 fb49 	bl	8002878 <HAL_GPIO_WritePin>
                          |DirM_Y_Pin|DirM_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Home_led_Pin|Finish_led_Pin|Wait_led_Pin|EnableMotors_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 719c 	mov.w	r1, #312	; 0x138
 80001ec:	4833      	ldr	r0, [pc, #204]	; (80002bc <MX_GPIO_Init+0x160>)
 80001ee:	f002 fb43 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedPcb_Pin;
 80001f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedPcb_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	482a      	ldr	r0, [pc, #168]	; (80002b4 <MX_GPIO_Init+0x158>)
 800020c:	f002 f9b0 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000210:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000216:	2303      	movs	r3, #3
 8000218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	4824      	ldr	r0, [pc, #144]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000222:	f002 f9a5 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = StepM_Z_Pin|StepM_Y_Pin|StepM_X_Pin|DirM_Z_Pin
 8000226:	233f      	movs	r3, #63	; 0x3f
 8000228:	613b      	str	r3, [r7, #16]
                          |DirM_Y_Pin|DirM_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022a:	2301      	movs	r3, #1
 800022c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022e:	2300      	movs	r3, #0
 8000230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000232:	2302      	movs	r3, #2
 8000234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4619      	mov	r1, r3
 800023c:	481e      	ldr	r0, [pc, #120]	; (80002b8 <MX_GPIO_Init+0x15c>)
 800023e:	f002 f997 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000242:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000246:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000248:	2303      	movs	r3, #3
 800024a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024c:	f107 0310 	add.w	r3, r7, #16
 8000250:	4619      	mov	r1, r3
 8000252:	4819      	ldr	r0, [pc, #100]	; (80002b8 <MX_GPIO_Init+0x15c>)
 8000254:	f002 f98c 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000258:	f640 4307 	movw	r3, #3079	; 0xc07
 800025c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800025e:	2303      	movs	r3, #3
 8000260:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	4619      	mov	r1, r3
 8000268:	4814      	ldr	r0, [pc, #80]	; (80002bc <MX_GPIO_Init+0x160>)
 800026a:	f002 f981 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = StopM_Z_Pin|StopM_Y_Pin|StopM_X_Pin|STOP_btn_Pin;
 800026e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <MX_GPIO_Init+0x164>)
 8000276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	480e      	ldr	r0, [pc, #56]	; (80002bc <MX_GPIO_Init+0x160>)
 8000284:	f002 f974 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Home_led_Pin|Finish_led_Pin|Wait_led_Pin|EnableMotors_Pin;
 8000288:	f44f 739c 	mov.w	r3, #312	; 0x138
 800028c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2302      	movs	r3, #2
 8000298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	4619      	mov	r1, r3
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <MX_GPIO_Init+0x160>)
 80002a2:	f002 f965 	bl	8002570 <HAL_GPIO_Init>

}
 80002a6:	bf00      	nop
 80002a8:	3720      	adds	r7, #32
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40011000 	.word	0x40011000
 80002b8:	40010800 	.word	0x40010800
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	10110000 	.word	0x10110000

080002c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_I2C1_Init+0x50>)
 80002ca:	4a13      	ldr	r2, [pc, #76]	; (8000318 <MX_I2C1_Init+0x54>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_I2C1_Init+0x50>)
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_I2C1_Init+0x58>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_I2C1_Init+0x50>)
 80002e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <MX_I2C1_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_I2C1_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_I2C1_Init+0x50>)
 8000302:	f002 faeb 	bl	80028dc <HAL_I2C_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800030c:	f001 fd24 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200001f0 	.word	0x200001f0
 8000318:	40005400 	.word	0x40005400
 800031c:	000186a0 	.word	0x000186a0

08000320 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a15      	ldr	r2, [pc, #84]	; (8000390 <HAL_I2C_MspInit+0x70>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d123      	bne.n	8000388 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <HAL_I2C_MspInit+0x74>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a13      	ldr	r2, [pc, #76]	; (8000394 <HAL_I2C_MspInit+0x74>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <HAL_I2C_MspInit+0x74>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000358:	23c0      	movs	r3, #192	; 0xc0
 800035a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800035c:	2312      	movs	r3, #18
 800035e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000360:	2303      	movs	r3, #3
 8000362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	480b      	ldr	r0, [pc, #44]	; (8000398 <HAL_I2C_MspInit+0x78>)
 800036c:	f002 f900 	bl	8002570 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HAL_I2C_MspInit+0x74>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4a07      	ldr	r2, [pc, #28]	; (8000394 <HAL_I2C_MspInit+0x74>)
 8000376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800037a:	61d3      	str	r3, [r2, #28]
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <HAL_I2C_MspInit+0x74>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40005400 	.word	0x40005400
 8000394:	40021000 	.word	0x40021000
 8000398:	40010c00 	.word	0x40010c00

0800039c <Lcd_Send_Cmd>:
#include "i2c.h"
#include "lcd_i2c.h"

void Lcd_Send_Cmd(char cmd)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af02      	add	r7, sp, #8
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f023 030f 	bic.w	r3, r3, #15
 80003ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xF0);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	f043 030c 	orr.w	r3, r3, #12
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;
 80003be:	7bfb      	ldrb	r3, [r7, #15]
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;
 80003c8:	7bbb      	ldrb	r3, [r7, #14]
 80003ca:	f043 030c 	orr.w	r3, r3, #12
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	f043 0308 	orr.w	r3, r3, #8
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS,(uint8_t*) data_t, 4, 100);
 80003dc:	f107 0208 	add.w	r2, r7, #8
 80003e0:	2364      	movs	r3, #100	; 0x64
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2304      	movs	r3, #4
 80003e6:	214e      	movs	r1, #78	; 0x4e
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <Lcd_Send_Cmd+0x5c>)
 80003ea:	f002 fbbb 	bl	8002b64 <HAL_I2C_Master_Transmit>
}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200001f0 	.word	0x200001f0

080003fc <Lcd_Send_Char>:

void Lcd_Send_Char(char data)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af02      	add	r7, sp, #8
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f023 030f 	bic.w	r3, r3, #15
 800040c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4) & 0xF0);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	011b      	lsls	r3, r3, #4
 8000412:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f043 030d 	orr.w	r3, r3, #13
 800041a:	b2db      	uxtb	r3, r3
 800041c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	f043 0309 	orr.w	r3, r3, #9
 8000424:	b2db      	uxtb	r3, r3
 8000426:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 8000428:	7bbb      	ldrb	r3, [r7, #14]
 800042a:	f043 030d 	orr.w	r3, r3, #13
 800042e:	b2db      	uxtb	r3, r3
 8000430:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 8000432:	7bbb      	ldrb	r3, [r7, #14]
 8000434:	f043 0309 	orr.w	r3, r3, #9
 8000438:	b2db      	uxtb	r3, r3
 800043a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS,(uint8_t*) data_t, 4, 100);
 800043c:	f107 0208 	add.w	r2, r7, #8
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2304      	movs	r3, #4
 8000446:	214e      	movs	r1, #78	; 0x4e
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <Lcd_Send_Char+0x5c>)
 800044a:	f002 fb8b 	bl	8002b64 <HAL_I2C_Master_Transmit>
}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200001f0 	.word	0x200001f0

0800045c <Lcd_Init>:

void Lcd_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	HAL_Delay(60);
 8000460:	203c      	movs	r0, #60	; 0x3c
 8000462:	f001 ff53 	bl	800230c <HAL_Delay>
	Lcd_Send_Cmd(0x02);
 8000466:	2002      	movs	r0, #2
 8000468:	f7ff ff98 	bl	800039c <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x28);
 800046c:	2028      	movs	r0, #40	; 0x28
 800046e:	f7ff ff95 	bl	800039c <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x0C);
 8000472:	200c      	movs	r0, #12
 8000474:	f7ff ff92 	bl	800039c <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x80);
 8000478:	2080      	movs	r0, #128	; 0x80
 800047a:	f7ff ff8f 	bl	800039c <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x01);
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff8c 	bl	800039c <Lcd_Send_Cmd>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <Lcd_Clear>:

void Lcd_Clear(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd(0x01);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff ff85 	bl	800039c <Lcd_Send_Cmd>
	HAL_Delay(2);
 8000492:	2002      	movs	r0, #2
 8000494:	f001 ff3a 	bl	800230c <HAL_Delay>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <Lcd_Set_Cursor>:

void Lcd_Set_Cursor(int row, int col)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
	uint8_t address;
	switch(row)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	d816      	bhi.n	80004dc <Lcd_Set_Cursor+0x40>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <Lcd_Set_Cursor+0x18>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	080004c5 	.word	0x080004c5
 80004b8:	080004cb 	.word	0x080004cb
 80004bc:	080004d1 	.word	0x080004d1
 80004c0:	080004d7 	.word	0x080004d7
	{
		case 1:
			address = 0x00;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
			break;
 80004c8:	e008      	b.n	80004dc <Lcd_Set_Cursor+0x40>
		case 2:
			address = 0x40;
 80004ca:	2340      	movs	r3, #64	; 0x40
 80004cc:	73fb      	strb	r3, [r7, #15]
			break;
 80004ce:	e005      	b.n	80004dc <Lcd_Set_Cursor+0x40>
		case 3:
			address = 0x14;
 80004d0:	2314      	movs	r3, #20
 80004d2:	73fb      	strb	r3, [r7, #15]
			break;
 80004d4:	e002      	b.n	80004dc <Lcd_Set_Cursor+0x40>
		case 4:
			address = 0x54;
 80004d6:	2354      	movs	r3, #84	; 0x54
 80004d8:	73fb      	strb	r3, [r7, #15]
			break;
 80004da:	bf00      	nop
	}
	address += col - 1;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	4413      	add	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3b01      	subs	r3, #1
 80004e8:	73fb      	strb	r3, [r7, #15]
	Lcd_Send_Cmd(0x80 | address);
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff52 	bl	800039c <Lcd_Send_Cmd>

}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <Lcd_Send_String>:

void Lcd_Send_String(char *str)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	while(*str) Lcd_Send_Char(*str++);
 8000508:	e006      	b.n	8000518 <Lcd_Send_String+0x18>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff72 	bl	80003fc <Lcd_Send_Char>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f4      	bne.n	800050a <Lcd_Send_String+0xa>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <Lcd_Blink>:
{
	Lcd_Send_Cmd(0x18);
}

void Lcd_Blink(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd(0x0F);
 800052e:	200f      	movs	r0, #15
 8000530:	f7ff ff34 	bl	800039c <Lcd_Send_Cmd>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b0bc      	sub	sp, #240	; 0xf0
 800053c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f001 fe83 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 fb4f 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f7ff fe09 	bl	800015c <MX_GPIO_Init>
  MX_TIM2_Init();
 800054a:	f001 fcbf 	bl	8001ecc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800054e:	f009 ff21 	bl	800a394 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000552:	f001 fd55 	bl	8002000 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000556:	f001 fd05 	bl	8001f64 <MX_TIM3_Init>
  MX_I2C1_Init();
 800055a:	f7ff feb3 	bl	80002c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Apartado para inicializar el LCD
  Lcd_Init();
 800055e:	f7ff ff7d 	bl	800045c <Lcd_Init>

  ///// Seteo los leds de estado
  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	48b1      	ldr	r0, [pc, #708]	; (800082c <main+0x2f4>)
 8000568:	f002 f986 	bl	8002878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2110      	movs	r1, #16
 8000570:	48ae      	ldr	r0, [pc, #696]	; (800082c <main+0x2f4>)
 8000572:	f002 f981 	bl	8002878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Home_led_GPIO_Port, Home_led_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	48ac      	ldr	r0, [pc, #688]	; (800082c <main+0x2f4>)
 800057c:	f002 f97c 	bl	8002878 <HAL_GPIO_WritePin>

  ///// Configurar el bus Enable
  HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	48a9      	ldr	r0, [pc, #676]	; (800082c <main+0x2f4>)
 8000588:	f002 f976 	bl	8002878 <HAL_GPIO_WritePin>

  // Inicialización de cada motor
  motors[0] = (StepperMotor){
 800058c:	4ba8      	ldr	r3, [pc, #672]	; (8000830 <main+0x2f8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461d      	mov	r5, r3
 8000592:	4ba8      	ldr	r3, [pc, #672]	; (8000834 <main+0x2fc>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	461c      	mov	r4, r3
 8000598:	4ba7      	ldr	r3, [pc, #668]	; (8000838 <main+0x300>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	4ba7      	ldr	r3, [pc, #668]	; (800083c <main+0x304>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4ba6      	ldr	r3, [pc, #664]	; (8000840 <main+0x308>)
 80005a6:	4aa7      	ldr	r2, [pc, #668]	; (8000844 <main+0x30c>)
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	4ba5      	ldr	r3, [pc, #660]	; (8000840 <main+0x308>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	809a      	strh	r2, [r3, #4]
 80005b0:	4ba3      	ldr	r3, [pc, #652]	; (8000840 <main+0x308>)
 80005b2:	4aa4      	ldr	r2, [pc, #656]	; (8000844 <main+0x30c>)
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	4ba2      	ldr	r3, [pc, #648]	; (8000840 <main+0x308>)
 80005b8:	2220      	movs	r2, #32
 80005ba:	819a      	strh	r2, [r3, #12]
 80005bc:	4ba0      	ldr	r3, [pc, #640]	; (8000840 <main+0x308>)
 80005be:	611d      	str	r5, [r3, #16]
 80005c0:	4b9f      	ldr	r3, [pc, #636]	; (8000840 <main+0x308>)
 80005c2:	615c      	str	r4, [r3, #20]
 80005c4:	4b9e      	ldr	r3, [pc, #632]	; (8000840 <main+0x308>)
 80005c6:	6198      	str	r0, [r3, #24]
 80005c8:	4b9d      	ldr	r3, [pc, #628]	; (8000840 <main+0x308>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
 80005ce:	4b9c      	ldr	r3, [pc, #624]	; (8000840 <main+0x308>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
 80005d4:	4b9a      	ldr	r3, [pc, #616]	; (8000840 <main+0x308>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
 80005da:	4b99      	ldr	r3, [pc, #612]	; (8000840 <main+0x308>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
 80005e0:	4b97      	ldr	r3, [pc, #604]	; (8000840 <main+0x308>)
 80005e2:	62d9      	str	r1, [r3, #44]	; 0x2c
	  velMotor_X,
	  microSteppingM_X,
	  0, 0, 0, 0,
	  flagStopM_X
  };
  motors[1] = (StepperMotor){
 80005e4:	4b98      	ldr	r3, [pc, #608]	; (8000848 <main+0x310>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461d      	mov	r5, r3
 80005ea:	4b98      	ldr	r3, [pc, #608]	; (800084c <main+0x314>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	461c      	mov	r4, r3
 80005f0:	4b97      	ldr	r3, [pc, #604]	; (8000850 <main+0x318>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	4b97      	ldr	r3, [pc, #604]	; (8000854 <main+0x31c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	4b90      	ldr	r3, [pc, #576]	; (8000840 <main+0x308>)
 80005fe:	4a91      	ldr	r2, [pc, #580]	; (8000844 <main+0x30c>)
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
 8000602:	4b8f      	ldr	r3, [pc, #572]	; (8000840 <main+0x308>)
 8000604:	2202      	movs	r2, #2
 8000606:	869a      	strh	r2, [r3, #52]	; 0x34
 8000608:	4b8d      	ldr	r3, [pc, #564]	; (8000840 <main+0x308>)
 800060a:	4a8e      	ldr	r2, [pc, #568]	; (8000844 <main+0x30c>)
 800060c:	639a      	str	r2, [r3, #56]	; 0x38
 800060e:	4b8c      	ldr	r3, [pc, #560]	; (8000840 <main+0x308>)
 8000610:	2210      	movs	r2, #16
 8000612:	879a      	strh	r2, [r3, #60]	; 0x3c
 8000614:	4b8a      	ldr	r3, [pc, #552]	; (8000840 <main+0x308>)
 8000616:	641d      	str	r5, [r3, #64]	; 0x40
 8000618:	4b89      	ldr	r3, [pc, #548]	; (8000840 <main+0x308>)
 800061a:	645c      	str	r4, [r3, #68]	; 0x44
 800061c:	4b88      	ldr	r3, [pc, #544]	; (8000840 <main+0x308>)
 800061e:	6498      	str	r0, [r3, #72]	; 0x48
 8000620:	4b87      	ldr	r3, [pc, #540]	; (8000840 <main+0x308>)
 8000622:	2200      	movs	r2, #0
 8000624:	64da      	str	r2, [r3, #76]	; 0x4c
 8000626:	4b86      	ldr	r3, [pc, #536]	; (8000840 <main+0x308>)
 8000628:	2200      	movs	r2, #0
 800062a:	651a      	str	r2, [r3, #80]	; 0x50
 800062c:	4b84      	ldr	r3, [pc, #528]	; (8000840 <main+0x308>)
 800062e:	2200      	movs	r2, #0
 8000630:	655a      	str	r2, [r3, #84]	; 0x54
 8000632:	4b83      	ldr	r3, [pc, #524]	; (8000840 <main+0x308>)
 8000634:	2200      	movs	r2, #0
 8000636:	659a      	str	r2, [r3, #88]	; 0x58
 8000638:	4b81      	ldr	r3, [pc, #516]	; (8000840 <main+0x308>)
 800063a:	65d9      	str	r1, [r3, #92]	; 0x5c
	  velMotor_Y,
	  microSteppingM_Y,
	  0, 0, 0, 0,
	  flagStopM_Y
  };
  motors[2] = (StepperMotor){
 800063c:	4b86      	ldr	r3, [pc, #536]	; (8000858 <main+0x320>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461d      	mov	r5, r3
 8000642:	4b86      	ldr	r3, [pc, #536]	; (800085c <main+0x324>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	461c      	mov	r4, r3
 8000648:	4b85      	ldr	r3, [pc, #532]	; (8000860 <main+0x328>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	4b85      	ldr	r3, [pc, #532]	; (8000864 <main+0x32c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	4b7a      	ldr	r3, [pc, #488]	; (8000840 <main+0x308>)
 8000656:	4a7b      	ldr	r2, [pc, #492]	; (8000844 <main+0x30c>)
 8000658:	661a      	str	r2, [r3, #96]	; 0x60
 800065a:	4b79      	ldr	r3, [pc, #484]	; (8000840 <main+0x308>)
 800065c:	2201      	movs	r2, #1
 800065e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8000662:	4b77      	ldr	r3, [pc, #476]	; (8000840 <main+0x308>)
 8000664:	4a77      	ldr	r2, [pc, #476]	; (8000844 <main+0x30c>)
 8000666:	669a      	str	r2, [r3, #104]	; 0x68
 8000668:	4b75      	ldr	r3, [pc, #468]	; (8000840 <main+0x308>)
 800066a:	2208      	movs	r2, #8
 800066c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8000670:	4b73      	ldr	r3, [pc, #460]	; (8000840 <main+0x308>)
 8000672:	671d      	str	r5, [r3, #112]	; 0x70
 8000674:	4b72      	ldr	r3, [pc, #456]	; (8000840 <main+0x308>)
 8000676:	675c      	str	r4, [r3, #116]	; 0x74
 8000678:	4b71      	ldr	r3, [pc, #452]	; (8000840 <main+0x308>)
 800067a:	6798      	str	r0, [r3, #120]	; 0x78
 800067c:	4b70      	ldr	r3, [pc, #448]	; (8000840 <main+0x308>)
 800067e:	2200      	movs	r2, #0
 8000680:	67da      	str	r2, [r3, #124]	; 0x7c
 8000682:	4b6f      	ldr	r3, [pc, #444]	; (8000840 <main+0x308>)
 8000684:	2200      	movs	r2, #0
 8000686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800068a:	4b6d      	ldr	r3, [pc, #436]	; (8000840 <main+0x308>)
 800068c:	2200      	movs	r2, #0
 800068e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000692:	4b6b      	ldr	r3, [pc, #428]	; (8000840 <main+0x308>)
 8000694:	2200      	movs	r2, #0
 8000696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800069a:	4b69      	ldr	r3, [pc, #420]	; (8000840 <main+0x308>)
 800069c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
	  microSteppingM_Z,
	  0, 0, 0, 0,
	  flagStopM_Z
  };

  HAL_TIM_Base_Start_IT(&htim2);			// Iniciar el temporizador con interrupción
 80006a0:	4871      	ldr	r0, [pc, #452]	; (8000868 <main+0x330>)
 80006a2:	f005 f827 	bl	80056f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80006a6:	210c      	movs	r1, #12
 80006a8:	4870      	ldr	r0, [pc, #448]	; (800086c <main+0x334>)
 80006aa:	f005 f8fb 	bl	80058a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);			// Iniciar el temporizador con interrupción
 80006ae:	486f      	ldr	r0, [pc, #444]	; (800086c <main+0x334>)
 80006b0:	f005 f820 	bl	80056f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80006b4:	486e      	ldr	r0, [pc, #440]	; (8000870 <main+0x338>)
 80006b6:	f005 f81d 	bl	80056f4 <HAL_TIM_Base_Start_IT>


  // Envio datos al puerto USB
  CDC_Transmit_FS((uint8_t *) data, strlen (data));
 80006ba:	4b6e      	ldr	r3, [pc, #440]	; (8000874 <main+0x33c>)
 80006bc:	681c      	ldr	r4, [r3, #0]
 80006be:	4b6d      	ldr	r3, [pc, #436]	; (8000874 <main+0x33c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fd42 	bl	800014c <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	4620      	mov	r0, r4
 80006d0:	f009 ff38 	bl	800a544 <CDC_Transmit_FS>

  // Ejemplo de impresión en el LCD
  Lcd_Clear();
 80006d4:	f7ff fed8 	bl	8000488 <Lcd_Clear>
  Lcd_Set_Cursor(1,1);
 80006d8:	2101      	movs	r1, #1
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff fede 	bl	800049c <Lcd_Set_Cursor>
  Lcd_Send_String("La Gaaarra!");
 80006e0:	4865      	ldr	r0, [pc, #404]	; (8000878 <main+0x340>)
 80006e2:	f7ff ff0d 	bl	8000500 <Lcd_Send_String>
  Lcd_Set_Cursor(2,1);
 80006e6:	2101      	movs	r1, #1
 80006e8:	2002      	movs	r0, #2
 80006ea:	f7ff fed7 	bl	800049c <Lcd_Set_Cursor>
  Lcd_Send_String("By: Mario uwu");
 80006ee:	4863      	ldr	r0, [pc, #396]	; (800087c <main+0x344>)
 80006f0:	f7ff ff06 	bl	8000500 <Lcd_Send_String>
  Lcd_Set_Cursor(2,14);
 80006f4:	210e      	movs	r1, #14
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff fed0 	bl	800049c <Lcd_Set_Cursor>
  Lcd_Blink();
 80006fc:	f7ff ff15 	bl	800052a <Lcd_Blink>
  HAL_Delay(2000);
 8000700:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000704:	f001 fe02 	bl	800230c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flagUsb == 1){
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <main+0x348>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	f040 80fa 	bne.w	8000906 <main+0x3ce>
		  HAL_GPIO_TogglePin(LedPcb_GPIO_Port, LedPcb_Pin);
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	485b      	ldr	r0, [pc, #364]	; (8000884 <main+0x34c>)
 8000718:	f002 f8c6 	bl	80028a8 <HAL_GPIO_TogglePin>
		  //CDC_FS_Substring(1, 1, buffer_rx, buffer_data[0]);
		  //	:- Caso Homming
		  if (buffer_rx[0] == ':'){
 800071c:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <main+0x350>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b3a      	cmp	r3, #58	; 0x3a
 8000722:	f040 80cb 	bne.w	80008bc <main+0x384>
			  switch (buffer_rx[1]){
 8000726:	4b58      	ldr	r3, [pc, #352]	; (8000888 <main+0x350>)
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	3b23      	subs	r3, #35	; 0x23
 800072c:	2b1c      	cmp	r3, #28
 800072e:	f200 80b7 	bhi.w	80008a0 <main+0x368>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <main+0x200>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	080007ed 	.word	0x080007ed
 800073c:	080008a1 	.word	0x080008a1
 8000740:	080008a1 	.word	0x080008a1
 8000744:	080008a1 	.word	0x080008a1
 8000748:	080008a1 	.word	0x080008a1
 800074c:	080008a1 	.word	0x080008a1
 8000750:	080008a1 	.word	0x080008a1
 8000754:	080008a1 	.word	0x080008a1
 8000758:	080007cd 	.word	0x080007cd
 800075c:	080008a1 	.word	0x080008a1
 8000760:	080007ad 	.word	0x080007ad
 8000764:	080008a1 	.word	0x080008a1
 8000768:	080008a1 	.word	0x080008a1
 800076c:	080008a1 	.word	0x080008a1
 8000770:	080008a1 	.word	0x080008a1
 8000774:	080008a1 	.word	0x080008a1
 8000778:	080008a1 	.word	0x080008a1
 800077c:	080008a1 	.word	0x080008a1
 8000780:	080008a1 	.word	0x080008a1
 8000784:	080008a1 	.word	0x080008a1
 8000788:	080008a1 	.word	0x080008a1
 800078c:	080008a1 	.word	0x080008a1
 8000790:	080008a1 	.word	0x080008a1
 8000794:	080008a1 	.word	0x080008a1
 8000798:	080008a1 	.word	0x080008a1
 800079c:	080008a1 	.word	0x080008a1
 80007a0:	080008a1 	.word	0x080008a1
 80007a4:	080008a1 	.word	0x080008a1
 80007a8:	0800080d 	.word	0x0800080d
			  	  case '-':
			  		  // Modo calibración
					  sprintf(buffer_tx, "Se ingresó al modo de Calibración\r\n");
 80007ac:	4937      	ldr	r1, [pc, #220]	; (800088c <main+0x354>)
 80007ae:	4838      	ldr	r0, [pc, #224]	; (8000890 <main+0x358>)
 80007b0:	f00a fb32 	bl	800ae18 <siprintf>
					  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80007b4:	4836      	ldr	r0, [pc, #216]	; (8000890 <main+0x358>)
 80007b6:	f7ff fcc9 	bl	800014c <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	4833      	ldr	r0, [pc, #204]	; (8000890 <main+0x358>)
 80007c2:	f009 febf 	bl	800a544 <CDC_Transmit_FS>
					  if (modoCalibracion() == 0){
 80007c6:	f000 fb9b 	bl	8000f00 <modoCalibracion>
						  // No hubo problemas
					  } else {
						  // Existió problemas al ejecutar modoCalibracion
					  }
			  		  break;
 80007ca:	e098      	b.n	80008fe <main+0x3c6>
			  	  case '+':
			  		  // Modo de aprendizaje
					  sprintf(buffer_tx, "Se ingresó al modo de Aprendizaje\r\n");
 80007cc:	4931      	ldr	r1, [pc, #196]	; (8000894 <main+0x35c>)
 80007ce:	4830      	ldr	r0, [pc, #192]	; (8000890 <main+0x358>)
 80007d0:	f00a fb22 	bl	800ae18 <siprintf>
					  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80007d4:	482e      	ldr	r0, [pc, #184]	; (8000890 <main+0x358>)
 80007d6:	f7ff fcb9 	bl	800014c <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29b      	uxth	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <main+0x358>)
 80007e2:	f009 feaf 	bl	800a544 <CDC_Transmit_FS>
					  if (modoAprendizaje() == 0){
 80007e6:	f000 fe73 	bl	80014d0 <modoAprendizaje>
						  // No hubo problemas
					  } else {
						  // Existió problemas al ejecutar modoAprendizaje
					  }
			  		  break;
 80007ea:	e088      	b.n	80008fe <main+0x3c6>
			  	  case '#':
			  		  // Modo de ejecución manual
					  sprintf(buffer_tx, "Se ingresó al modo de Ejecución\r\n");
 80007ec:	492a      	ldr	r1, [pc, #168]	; (8000898 <main+0x360>)
 80007ee:	4828      	ldr	r0, [pc, #160]	; (8000890 <main+0x358>)
 80007f0:	f00a fb12 	bl	800ae18 <siprintf>
					  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80007f4:	4826      	ldr	r0, [pc, #152]	; (8000890 <main+0x358>)
 80007f6:	f7ff fca9 	bl	800014c <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	4823      	ldr	r0, [pc, #140]	; (8000890 <main+0x358>)
 8000802:	f009 fe9f 	bl	800a544 <CDC_Transmit_FS>
					  if (modoEjecucion() == 0){
 8000806:	f000 ff51 	bl	80016ac <modoEjecucion>
						  // No hubo problemas
					  } else {
						  // Existió problemas al ejecutar modoEjecucion
					  }
			  		  break;
 800080a:	e078      	b.n	80008fe <main+0x3c6>
			  	  case '?':
			  		  // Modo de ejecución manual
					  sprintf(buffer_tx, "Se mostrará la ayuda de las consignas del robot.\r\n");
 800080c:	4923      	ldr	r1, [pc, #140]	; (800089c <main+0x364>)
 800080e:	4820      	ldr	r0, [pc, #128]	; (8000890 <main+0x358>)
 8000810:	f00a fb02 	bl	800ae18 <siprintf>
					  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000814:	481e      	ldr	r0, [pc, #120]	; (8000890 <main+0x358>)
 8000816:	f7ff fc99 	bl	800014c <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29b      	uxth	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	481b      	ldr	r0, [pc, #108]	; (8000890 <main+0x358>)
 8000822:	f009 fe8f 	bl	800a544 <CDC_Transmit_FS>
					  consignas();
 8000826:	f000 fa37 	bl	8000c98 <consignas>
			  		  break;
 800082a:	e068      	b.n	80008fe <main+0x3c6>
 800082c:	40010c00 	.word	0x40010c00
 8000830:	200002dc 	.word	0x200002dc
 8000834:	200002d6 	.word	0x200002d6
 8000838:	20000000 	.word	0x20000000
 800083c:	200002df 	.word	0x200002df
 8000840:	20000244 	.word	0x20000244
 8000844:	40010800 	.word	0x40010800
 8000848:	200002dd 	.word	0x200002dd
 800084c:	200002d8 	.word	0x200002d8
 8000850:	20000001 	.word	0x20000001
 8000854:	200002e0 	.word	0x200002e0
 8000858:	200002de 	.word	0x200002de
 800085c:	200002da 	.word	0x200002da
 8000860:	20000002 	.word	0x20000002
 8000864:	200002e1 	.word	0x200002e1
 8000868:	20000374 	.word	0x20000374
 800086c:	20000404 	.word	0x20000404
 8000870:	200003bc 	.word	0x200003bc
 8000874:	20000004 	.word	0x20000004
 8000878:	0800b7a4 	.word	0x0800b7a4
 800087c:	0800b7b0 	.word	0x0800b7b0
 8000880:	200002f1 	.word	0x200002f1
 8000884:	40011000 	.word	0x40011000
 8000888:	200002f4 	.word	0x200002f4
 800088c:	0800b7c0 	.word	0x0800b7c0
 8000890:	2000031c 	.word	0x2000031c
 8000894:	0800b7e8 	.word	0x0800b7e8
 8000898:	0800b810 	.word	0x0800b810
 800089c:	0800b834 	.word	0x0800b834
			  	  default:
			  		  // Mostrar mensajes de error
			  		  //	trama no reconocida
					  sprintf(buffer_tx, "No existe el modo solicitado\r\n");
 80008a0:	49bd      	ldr	r1, [pc, #756]	; (8000b98 <main+0x660>)
 80008a2:	48be      	ldr	r0, [pc, #760]	; (8000b9c <main+0x664>)
 80008a4:	f00a fab8 	bl	800ae18 <siprintf>
					  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80008a8:	48bc      	ldr	r0, [pc, #752]	; (8000b9c <main+0x664>)
 80008aa:	f7ff fc4f 	bl	800014c <strlen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	48b9      	ldr	r0, [pc, #740]	; (8000b9c <main+0x664>)
 80008b6:	f009 fe45 	bl	800a544 <CDC_Transmit_FS>
			  		  break;
 80008ba:	e020      	b.n	80008fe <main+0x3c6>
			  }
		  } else if (buffer_rx[0] == '?'){
 80008bc:	4bb8      	ldr	r3, [pc, #736]	; (8000ba0 <main+0x668>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b3f      	cmp	r3, #63	; 0x3f
 80008c2:	d10f      	bne.n	80008e4 <main+0x3ac>
	  		  // Modo de ejecución manual
			  sprintf(buffer_tx, "Se mostrará la ayuda de las consignas del robot.\r\n");
 80008c4:	49b7      	ldr	r1, [pc, #732]	; (8000ba4 <main+0x66c>)
 80008c6:	48b5      	ldr	r0, [pc, #724]	; (8000b9c <main+0x664>)
 80008c8:	f00a faa6 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80008cc:	48b3      	ldr	r0, [pc, #716]	; (8000b9c <main+0x664>)
 80008ce:	f7ff fc3d 	bl	800014c <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	48b0      	ldr	r0, [pc, #704]	; (8000b9c <main+0x664>)
 80008da:	f009 fe33 	bl	800a544 <CDC_Transmit_FS>
			  consignas();
 80008de:	f000 f9db 	bl	8000c98 <consignas>
 80008e2:	e00c      	b.n	80008fe <main+0x3c6>
		  } else {
			  // Error en trama, trama no reconocida
			  sprintf(buffer_tx, "Trama ingresada erronea!\r\n");
 80008e4:	49b0      	ldr	r1, [pc, #704]	; (8000ba8 <main+0x670>)
 80008e6:	48ad      	ldr	r0, [pc, #692]	; (8000b9c <main+0x664>)
 80008e8:	f00a fa96 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80008ec:	48ab      	ldr	r0, [pc, #684]	; (8000b9c <main+0x664>)
 80008ee:	f7ff fc2d 	bl	800014c <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	48a8      	ldr	r0, [pc, #672]	; (8000b9c <main+0x664>)
 80008fa:	f009 fe23 	bl	800a544 <CDC_Transmit_FS>
		  }
		  flagUsb = 0;	// bajo la bandera de comunicación por USB
 80008fe:	4bab      	ldr	r3, [pc, #684]	; (8000bac <main+0x674>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e700      	b.n	8000708 <main+0x1d0>

	  }
	  // Sin bandera de usb detectada
	  else {
		  if (countHome == 0){
 8000906:	4baa      	ldr	r3, [pc, #680]	; (8000bb0 <main+0x678>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d135      	bne.n	800097a <main+0x442>
			  Lcd_Set_Cursor(1,1);
 800090e:	2101      	movs	r1, #1
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff fdc3 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Estado Global");
 8000916:	48a7      	ldr	r0, [pc, #668]	; (8000bb4 <main+0x67c>)
 8000918:	f7ff fdf2 	bl	8000500 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 800091c:	2101      	movs	r1, #1
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdbc 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("X???|Y???|Z???|?");
 8000924:	48a4      	ldr	r0, [pc, #656]	; (8000bb8 <main+0x680>)
 8000926:	f7ff fdeb 	bl	8000500 <Lcd_Send_String>
			  sprintf(buffer_tx, "Estado no definido\r\n");
 800092a:	49a4      	ldr	r1, [pc, #656]	; (8000bbc <main+0x684>)
 800092c:	489b      	ldr	r0, [pc, #620]	; (8000b9c <main+0x664>)
 800092e:	f00a fa73 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000932:	489a      	ldr	r0, [pc, #616]	; (8000b9c <main+0x664>)
 8000934:	f7ff fc0a 	bl	800014c <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	b29b      	uxth	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	4897      	ldr	r0, [pc, #604]	; (8000b9c <main+0x664>)
 8000940:	f009 fe00 	bl	800a544 <CDC_Transmit_FS>

			  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	489d      	ldr	r0, [pc, #628]	; (8000bc0 <main+0x688>)
 800094a:	f001 ff95 	bl	8002878 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	489b      	ldr	r0, [pc, #620]	; (8000bc0 <main+0x688>)
 8000954:	f001 ff90 	bl	8002878 <HAL_GPIO_WritePin>
			  HAL_Delay(325);
 8000958:	f240 1045 	movw	r0, #325	; 0x145
 800095c:	f001 fcd6 	bl	800230c <HAL_Delay>
			  HAL_GPIO_TogglePin(Home_led_GPIO_Port, Home_led_Pin);
 8000960:	2108      	movs	r1, #8
 8000962:	4897      	ldr	r0, [pc, #604]	; (8000bc0 <main+0x688>)
 8000964:	f001 ffa0 	bl	80028a8 <HAL_GPIO_TogglePin>
			  HAL_Delay(325);
 8000968:	f240 1045 	movw	r0, #325	; 0x145
 800096c:	f001 fcce 	bl	800230c <HAL_Delay>
			  HAL_GPIO_TogglePin(Home_led_GPIO_Port, Home_led_Pin);
 8000970:	2108      	movs	r1, #8
 8000972:	4893      	ldr	r0, [pc, #588]	; (8000bc0 <main+0x688>)
 8000974:	f001 ff98 	bl	80028a8 <HAL_GPIO_TogglePin>
 8000978:	e0f7      	b.n	8000b6a <main+0x632>
		  }
		  //	Caso de que el Home se haya realizado
		  else {
			  sprintf(buffer_tx, "Estado definido\r\n");
 800097a:	4992      	ldr	r1, [pc, #584]	; (8000bc4 <main+0x68c>)
 800097c:	4887      	ldr	r0, [pc, #540]	; (8000b9c <main+0x664>)
 800097e:	f00a fa4b 	bl	800ae18 <siprintf>
			  //	MOVER MOTORES
			  for (int k = 0; k < NUM_MOTORS; ++k) {
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000988:	e022      	b.n	80009d0 <main+0x498>
				  moveMotors(&motors[k], &motors[k].newPosition, &motors[k].velocity);
 800098a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	4a8c      	ldr	r2, [pc, #560]	; (8000bc8 <main+0x690>)
 8000998:	1898      	adds	r0, r3, r2
 800099a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	3320      	adds	r3, #32
 80009a8:	4a87      	ldr	r2, [pc, #540]	; (8000bc8 <main+0x690>)
 80009aa:	1899      	adds	r1, r3, r2
 80009ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	3310      	adds	r3, #16
 80009ba:	4a83      	ldr	r2, [pc, #524]	; (8000bc8 <main+0x690>)
 80009bc:	4413      	add	r3, r2
 80009be:	3304      	adds	r3, #4
 80009c0:	461a      	mov	r2, r3
 80009c2:	f001 f8a3 	bl	8001b0c <moveMotors>
			  for (int k = 0; k < NUM_MOTORS; ++k) {
 80009c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009ca:	3301      	adds	r3, #1
 80009cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80009d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	ddd8      	ble.n	800098a <main+0x452>
			  }
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80009d8:	4870      	ldr	r0, [pc, #448]	; (8000b9c <main+0x664>)
 80009da:	f7ff fbb7 	bl	800014c <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	486d      	ldr	r0, [pc, #436]	; (8000b9c <main+0x664>)
 80009e6:	f009 fdad 	bl	800a544 <CDC_Transmit_FS>
			  //	Actualizar LCD con datos
			  char posicionMotores[16];
			  char charGarra = '?';
 80009ea:	233f      	movs	r3, #63	; 0x3f
 80009ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
			  if (estadoGarra == 0){
 80009f0:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <main+0x694>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <main+0x4c8>
				  charGarra = 'C';
 80009f8:	2343      	movs	r3, #67	; 0x43
 80009fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 80009fe:	e006      	b.n	8000a0e <main+0x4d6>
			  } else if (estadoGarra == 1){
 8000a00:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <main+0x694>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d102      	bne.n	8000a0e <main+0x4d6>
				  charGarra = 'A';
 8000a08:	2341      	movs	r3, #65	; 0x41
 8000a0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
			  }
			  char* position[3][4];
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000a14:	e01d      	b.n	8000a52 <main+0x51a>
				  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000a1c:	e010      	b.n	8000a40 <main+0x508>
					  position[i][j] = '\0';
 8000a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000a22:	009a      	lsls	r2, r3, #2
 8000a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	33e8      	adds	r3, #232	; 0xe8
 8000a2e:	443b      	add	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	f843 2ce4 	str.w	r2, [r3, #-228]
				  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	ddea      	ble.n	8000a1e <main+0x4e6>
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	dddd      	ble.n	8000a16 <main+0x4de>
				  }
			  }
			  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000a60:	e05d      	b.n	8000b1e <main+0x5e6>
				  if (motors[j].currentPosition < 10){
 8000a62:	4959      	ldr	r1, [pc, #356]	; (8000bc8 <main+0x690>)
 8000a64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	011b      	lsls	r3, r3, #4
 8000a70:	440b      	add	r3, r1
 8000a72:	331c      	adds	r3, #28
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b09      	cmp	r3, #9
 8000a78:	dc15      	bgt.n	8000aa6 <main+0x56e>
					  //Agrego dos 0
					  sprintf(*position[j], "00%u", motors[j].currentPosition);
 8000a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	33e8      	adds	r3, #232	; 0xe8
 8000a82:	443b      	add	r3, r7
 8000a84:	3be4      	subs	r3, #228	; 0xe4
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	494f      	ldr	r1, [pc, #316]	; (8000bc8 <main+0x690>)
 8000a8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	440b      	add	r3, r1
 8000a98:	331c      	adds	r3, #28
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	494c      	ldr	r1, [pc, #304]	; (8000bd0 <main+0x698>)
 8000aa0:	f00a f9ba 	bl	800ae18 <siprintf>
 8000aa4:	e036      	b.n	8000b14 <main+0x5dc>
				  } else if (motors[j].currentPosition < 100){
 8000aa6:	4948      	ldr	r1, [pc, #288]	; (8000bc8 <main+0x690>)
 8000aa8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000aac:	4613      	mov	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4413      	add	r3, r2
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	440b      	add	r3, r1
 8000ab6:	331c      	adds	r3, #28
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b63      	cmp	r3, #99	; 0x63
 8000abc:	dc15      	bgt.n	8000aea <main+0x5b2>
					  //Agrego 1 cero
					  sprintf(*position[j], "0%u", motors[j].currentPosition);
 8000abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	33e8      	adds	r3, #232	; 0xe8
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3be4      	subs	r3, #228	; 0xe4
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	493e      	ldr	r1, [pc, #248]	; (8000bc8 <main+0x690>)
 8000ace:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	440b      	add	r3, r1
 8000adc:	331c      	adds	r3, #28
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	493c      	ldr	r1, [pc, #240]	; (8000bd4 <main+0x69c>)
 8000ae4:	f00a f998 	bl	800ae18 <siprintf>
 8000ae8:	e014      	b.n	8000b14 <main+0x5dc>
				  } else {
					  //No agrego 0
					  sprintf(*position[j], "%u", motors[j].currentPosition);
 8000aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	33e8      	adds	r3, #232	; 0xe8
 8000af2:	443b      	add	r3, r7
 8000af4:	3be4      	subs	r3, #228	; 0xe4
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4933      	ldr	r1, [pc, #204]	; (8000bc8 <main+0x690>)
 8000afa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	440b      	add	r3, r1
 8000b08:	331c      	adds	r3, #28
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4932      	ldr	r1, [pc, #200]	; (8000bd8 <main+0x6a0>)
 8000b10:	f00a f982 	bl	800ae18 <siprintf>
			  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	dd9d      	ble.n	8000a62 <main+0x52a>
				  }
			  }
			  sprintf(posicionMotores, "X%s|Y%s|Z%s|%c", position[0], position[1], position[2], charGarra);
 8000b26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8000b2a:	1d3a      	adds	r2, r7, #4
 8000b2c:	f102 0110 	add.w	r1, r2, #16
 8000b30:	1d3a      	adds	r2, r7, #4
 8000b32:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	3320      	adds	r3, #32
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4926      	ldr	r1, [pc, #152]	; (8000bdc <main+0x6a4>)
 8000b42:	f00a f969 	bl	800ae18 <siprintf>
			  Lcd_Set_Cursor(2, 1);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff fca7 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String(posicionMotores);
 8000b4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fcd4 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(750);
 8000b58:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000b5c:	f001 fbd6 	bl	800230c <HAL_Delay>
			  //	Dejo visualizador de que la tarea ha terminado
			  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2110      	movs	r1, #16
 8000b64:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <main+0x688>)
 8000b66:	f001 fe87 	bl	8002878 <HAL_GPIO_WritePin>
		  }

		  //	Avisar por medio del led del HOME de que ha ocurrido un error en alguno de los ejes
		  if (homeStatus < 0 ){
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <main+0x6a8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f6bf adca 	bge.w	8000708 <main+0x1d0>
			  HAL_Delay(325);
 8000b74:	f240 1045 	movw	r0, #325	; 0x145
 8000b78:	f001 fbc8 	bl	800230c <HAL_Delay>
			  HAL_GPIO_TogglePin(Home_led_GPIO_Port, Home_led_Pin);
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	4810      	ldr	r0, [pc, #64]	; (8000bc0 <main+0x688>)
 8000b80:	f001 fe92 	bl	80028a8 <HAL_GPIO_TogglePin>
			  HAL_Delay(325);
 8000b84:	f240 1045 	movw	r0, #325	; 0x145
 8000b88:	f001 fbc0 	bl	800230c <HAL_Delay>
			  HAL_GPIO_TogglePin(Home_led_GPIO_Port, Home_led_Pin);
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <main+0x688>)
 8000b90:	f001 fe8a 	bl	80028a8 <HAL_GPIO_TogglePin>
	  if(flagUsb == 1){
 8000b94:	e5b8      	b.n	8000708 <main+0x1d0>
 8000b96:	bf00      	nop
 8000b98:	0800b868 	.word	0x0800b868
 8000b9c:	2000031c 	.word	0x2000031c
 8000ba0:	200002f4 	.word	0x200002f4
 8000ba4:	0800b834 	.word	0x0800b834
 8000ba8:	0800b888 	.word	0x0800b888
 8000bac:	200002f1 	.word	0x200002f1
 8000bb0:	200002e8 	.word	0x200002e8
 8000bb4:	0800b8a4 	.word	0x0800b8a4
 8000bb8:	0800b8b4 	.word	0x0800b8b4
 8000bbc:	0800b8c8 	.word	0x0800b8c8
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	0800b8e0 	.word	0x0800b8e0
 8000bc8:	20000244 	.word	0x20000244
 8000bcc:	200002d4 	.word	0x200002d4
 8000bd0:	0800b8f4 	.word	0x0800b8f4
 8000bd4:	0800b8fc 	.word	0x0800b8fc
 8000bd8:	0800b900 	.word	0x0800b900
 8000bdc:	0800b904 	.word	0x0800b904
 8000be0:	200002ec 	.word	0x200002ec

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00a f930 	bl	800ae58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 f858 	bl	8004cf0 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c46:	f001 f887 	bl	8001d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2102      	movs	r1, #2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fac4 	bl	80051f4 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c72:	f001 f871 	bl	8001d58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c76:	2310      	movs	r3, #16
 8000c78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fc31 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c8c:	f001 f864 	bl	8001d58 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3750      	adds	r7, #80	; 0x50
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <consignas>:
/* USER CODE BEGIN 4 */

// esto son 40 # y 40 .
// ###########################################################
// ........................................................
void consignas(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//	FUNCIÓN TIPO MENÚ PARA VISUALIZAR LAS DISTINTAS CONSIGNAS
	sprintf(buffer_tx, "Existen 3 modos de comportamiento para el robot\r\n");
 8000c9c:	4989      	ldr	r1, [pc, #548]	; (8000ec4 <consignas+0x22c>)
 8000c9e:	488a      	ldr	r0, [pc, #552]	; (8000ec8 <consignas+0x230>)
 8000ca0:	f00a f8ba 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000ca4:	4888      	ldr	r0, [pc, #544]	; (8000ec8 <consignas+0x230>)
 8000ca6:	f7ff fa51 	bl	800014c <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4885      	ldr	r0, [pc, #532]	; (8000ec8 <consignas+0x230>)
 8000cb2:	f009 fc47 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "CALIBRACIÓN (-), APRENDIZAJE (+) y EJECUCIÓN (#)\r\n\n");
 8000cb6:	4985      	ldr	r1, [pc, #532]	; (8000ecc <consignas+0x234>)
 8000cb8:	4883      	ldr	r0, [pc, #524]	; (8000ec8 <consignas+0x230>)
 8000cba:	f00a f8ad 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000cbe:	4882      	ldr	r0, [pc, #520]	; (8000ec8 <consignas+0x230>)
 8000cc0:	f7ff fa44 	bl	800014c <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	487f      	ldr	r0, [pc, #508]	; (8000ec8 <consignas+0x230>)
 8000ccc:	f009 fc3a 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "Dentro del modo de calibración existen acciones cómo:\r\n");
 8000cd0:	497f      	ldr	r1, [pc, #508]	; (8000ed0 <consignas+0x238>)
 8000cd2:	487d      	ldr	r0, [pc, #500]	; (8000ec8 <consignas+0x230>)
 8000cd4:	f00a f8a0 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000cd8:	487b      	ldr	r0, [pc, #492]	; (8000ec8 <consignas+0x230>)
 8000cda:	f7ff fa37 	bl	800014c <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4878      	ldr	r0, [pc, #480]	; (8000ec8 <consignas+0x230>)
 8000ce6:	f009 fc2d 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "Realizar el home, setear velocidades globales, setear ");
 8000cea:	497a      	ldr	r1, [pc, #488]	; (8000ed4 <consignas+0x23c>)
 8000cec:	4876      	ldr	r0, [pc, #472]	; (8000ec8 <consignas+0x230>)
 8000cee:	f00a f893 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000cf2:	4875      	ldr	r0, [pc, #468]	; (8000ec8 <consignas+0x230>)
 8000cf4:	f7ff fa2a 	bl	800014c <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4872      	ldr	r0, [pc, #456]	; (8000ec8 <consignas+0x230>)
 8000d00:	f009 fc20 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "velocidades individuales, habilitar motores, deshabiltiar");
 8000d04:	4974      	ldr	r1, [pc, #464]	; (8000ed8 <consignas+0x240>)
 8000d06:	4870      	ldr	r0, [pc, #448]	; (8000ec8 <consignas+0x230>)
 8000d08:	f00a f886 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d0c:	486e      	ldr	r0, [pc, #440]	; (8000ec8 <consignas+0x230>)
 8000d0e:	f7ff fa1d 	bl	800014c <strlen>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	486b      	ldr	r0, [pc, #428]	; (8000ec8 <consignas+0x230>)
 8000d1a:	f009 fc13 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, " los motores y parada de emergencia. A continuación ");
 8000d1e:	496f      	ldr	r1, [pc, #444]	; (8000edc <consignas+0x244>)
 8000d20:	4869      	ldr	r0, [pc, #420]	; (8000ec8 <consignas+0x230>)
 8000d22:	f00a f879 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d26:	4868      	ldr	r0, [pc, #416]	; (8000ec8 <consignas+0x230>)
 8000d28:	f7ff fa10 	bl	800014c <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	4865      	ldr	r0, [pc, #404]	; (8000ec8 <consignas+0x230>)
 8000d34:	f009 fc06 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "se dejan los comandos referentes:\r\n");
 8000d38:	4969      	ldr	r1, [pc, #420]	; (8000ee0 <consignas+0x248>)
 8000d3a:	4863      	ldr	r0, [pc, #396]	; (8000ec8 <consignas+0x230>)
 8000d3c:	f00a f86c 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d40:	4861      	ldr	r0, [pc, #388]	; (8000ec8 <consignas+0x230>)
 8000d42:	f7ff fa03 	bl	800014c <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	485e      	ldr	r0, [pc, #376]	; (8000ec8 <consignas+0x230>)
 8000d4e:	f009 fbf9 	bl	800a544 <CDC_Transmit_FS>
	// Consignas ejemplos de calibración
	sprintf(buffer_tx, "\t:-H (consigna para realizar el home)\r\n");
 8000d52:	4964      	ldr	r1, [pc, #400]	; (8000ee4 <consignas+0x24c>)
 8000d54:	485c      	ldr	r0, [pc, #368]	; (8000ec8 <consignas+0x230>)
 8000d56:	f00a f85f 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d5a:	485b      	ldr	r0, [pc, #364]	; (8000ec8 <consignas+0x230>)
 8000d5c:	f7ff f9f6 	bl	800014c <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4619      	mov	r1, r3
 8000d66:	4858      	ldr	r0, [pc, #352]	; (8000ec8 <consignas+0x230>)
 8000d68:	f009 fbec 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-V045 (consigna para 45%% velocidad general)\r\n");
 8000d6c:	495e      	ldr	r1, [pc, #376]	; (8000ee8 <consignas+0x250>)
 8000d6e:	4856      	ldr	r0, [pc, #344]	; (8000ec8 <consignas+0x230>)
 8000d70:	f00a f852 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d74:	4854      	ldr	r0, [pc, #336]	; (8000ec8 <consignas+0x230>)
 8000d76:	f7ff f9e9 	bl	800014c <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4851      	ldr	r0, [pc, #324]	; (8000ec8 <consignas+0x230>)
 8000d82:	f009 fbdf 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-vX023Y100Z078 (consigna para setear las ");
 8000d86:	4959      	ldr	r1, [pc, #356]	; (8000eec <consignas+0x254>)
 8000d88:	484f      	ldr	r0, [pc, #316]	; (8000ec8 <consignas+0x230>)
 8000d8a:	f00a f845 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d8e:	484e      	ldr	r0, [pc, #312]	; (8000ec8 <consignas+0x230>)
 8000d90:	f7ff f9dc 	bl	800014c <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	484b      	ldr	r0, [pc, #300]	; (8000ec8 <consignas+0x230>)
 8000d9c:	f009 fbd2 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "velociades X 23%%, Y 100%% y Z 78%% )\r\n");
 8000da0:	4953      	ldr	r1, [pc, #332]	; (8000ef0 <consignas+0x258>)
 8000da2:	4849      	ldr	r0, [pc, #292]	; (8000ec8 <consignas+0x230>)
 8000da4:	f00a f838 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000da8:	4847      	ldr	r0, [pc, #284]	; (8000ec8 <consignas+0x230>)
 8000daa:	f7ff f9cf 	bl	800014c <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <consignas+0x230>)
 8000db6:	f009 fbc5 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-E1 (consigna para Habiltiar motores)\r\n");
 8000dba:	494e      	ldr	r1, [pc, #312]	; (8000ef4 <consignas+0x25c>)
 8000dbc:	4842      	ldr	r0, [pc, #264]	; (8000ec8 <consignas+0x230>)
 8000dbe:	f00a f82b 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000dc2:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <consignas+0x230>)
 8000dc4:	f7ff f9c2 	bl	800014c <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4619      	mov	r1, r3
 8000dce:	483e      	ldr	r0, [pc, #248]	; (8000ec8 <consignas+0x230>)
 8000dd0:	f009 fbb8 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-E (consigna para Deshabiltiar motores)\r\n");
 8000dd4:	4948      	ldr	r1, [pc, #288]	; (8000ef8 <consignas+0x260>)
 8000dd6:	483c      	ldr	r0, [pc, #240]	; (8000ec8 <consignas+0x230>)
 8000dd8:	f00a f81e 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000ddc:	483a      	ldr	r0, [pc, #232]	; (8000ec8 <consignas+0x230>)
 8000dde:	f7ff f9b5 	bl	800014c <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	4837      	ldr	r0, [pc, #220]	; (8000ec8 <consignas+0x230>)
 8000dea:	f009 fbab 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-S (consigna para detener todo, aprada de emergencia)\r\n");
 8000dee:	4943      	ldr	r1, [pc, #268]	; (8000efc <consignas+0x264>)
 8000df0:	4835      	ldr	r0, [pc, #212]	; (8000ec8 <consignas+0x230>)
 8000df2:	f00a f811 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000df6:	4834      	ldr	r0, [pc, #208]	; (8000ec8 <consignas+0x230>)
 8000df8:	f7ff f9a8 	bl	800014c <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	4831      	ldr	r0, [pc, #196]	; (8000ec8 <consignas+0x230>)
 8000e04:	f009 fb9e 	bl	800a544 <CDC_Transmit_FS>
	// Consignas ejemplos de calibración
	sprintf(buffer_tx, "\t:-H (consigna para realizar el home)\r\n");
 8000e08:	4936      	ldr	r1, [pc, #216]	; (8000ee4 <consignas+0x24c>)
 8000e0a:	482f      	ldr	r0, [pc, #188]	; (8000ec8 <consignas+0x230>)
 8000e0c:	f00a f804 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <consignas+0x230>)
 8000e12:	f7ff f99b 	bl	800014c <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <consignas+0x230>)
 8000e1e:	f009 fb91 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-V045 (consigna para 45%% velocidad general)\r\n");
 8000e22:	4931      	ldr	r1, [pc, #196]	; (8000ee8 <consignas+0x250>)
 8000e24:	4828      	ldr	r0, [pc, #160]	; (8000ec8 <consignas+0x230>)
 8000e26:	f009 fff7 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e2a:	4827      	ldr	r0, [pc, #156]	; (8000ec8 <consignas+0x230>)
 8000e2c:	f7ff f98e 	bl	800014c <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4619      	mov	r1, r3
 8000e36:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <consignas+0x230>)
 8000e38:	f009 fb84 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-vX023Y100Z078 (consigna para setear las ");
 8000e3c:	492b      	ldr	r1, [pc, #172]	; (8000eec <consignas+0x254>)
 8000e3e:	4822      	ldr	r0, [pc, #136]	; (8000ec8 <consignas+0x230>)
 8000e40:	f009 ffea 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <consignas+0x230>)
 8000e46:	f7ff f981 	bl	800014c <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <consignas+0x230>)
 8000e52:	f009 fb77 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "velociades X 23%%, Y 100%% y Z 78%% )\r\n");
 8000e56:	4926      	ldr	r1, [pc, #152]	; (8000ef0 <consignas+0x258>)
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <consignas+0x230>)
 8000e5a:	f009 ffdd 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e5e:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <consignas+0x230>)
 8000e60:	f7ff f974 	bl	800014c <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <consignas+0x230>)
 8000e6c:	f009 fb6a 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-E1 (consigna para Habiltiar motores)\r\n");
 8000e70:	4920      	ldr	r1, [pc, #128]	; (8000ef4 <consignas+0x25c>)
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <consignas+0x230>)
 8000e74:	f009 ffd0 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <consignas+0x230>)
 8000e7a:	f7ff f967 	bl	800014c <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <consignas+0x230>)
 8000e86:	f009 fb5d 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-E (consigna para Deshabiltiar motores)\r\n");
 8000e8a:	491b      	ldr	r1, [pc, #108]	; (8000ef8 <consignas+0x260>)
 8000e8c:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <consignas+0x230>)
 8000e8e:	f009 ffc3 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <consignas+0x230>)
 8000e94:	f7ff f95a 	bl	800014c <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <consignas+0x230>)
 8000ea0:	f009 fb50 	bl	800a544 <CDC_Transmit_FS>
	sprintf(buffer_tx, "\t:-S (consigna para detener todo, aprada de emergencia)\r\n");
 8000ea4:	4915      	ldr	r1, [pc, #84]	; (8000efc <consignas+0x264>)
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <consignas+0x230>)
 8000ea8:	f009 ffb6 	bl	800ae18 <siprintf>
	CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <consignas+0x230>)
 8000eae:	f7ff f94d 	bl	800014c <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <consignas+0x230>)
 8000eba:	f009 fb43 	bl	800a544 <CDC_Transmit_FS>

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800b914 	.word	0x0800b914
 8000ec8:	2000031c 	.word	0x2000031c
 8000ecc:	0800b948 	.word	0x0800b948
 8000ed0:	0800b980 	.word	0x0800b980
 8000ed4:	0800b9bc 	.word	0x0800b9bc
 8000ed8:	0800b9f4 	.word	0x0800b9f4
 8000edc:	0800ba30 	.word	0x0800ba30
 8000ee0:	0800ba68 	.word	0x0800ba68
 8000ee4:	0800ba8c 	.word	0x0800ba8c
 8000ee8:	0800bab4 	.word	0x0800bab4
 8000eec:	0800bae8 	.word	0x0800bae8
 8000ef0:	0800bb14 	.word	0x0800bb14
 8000ef4:	0800bb3c 	.word	0x0800bb3c
 8000ef8:	0800bb68 	.word	0x0800bb68
 8000efc:	0800bb94 	.word	0x0800bb94

08000f00 <modoCalibracion>:

uint8_t modoCalibracion(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
	  //	CASO DE HOMMING
	  if (buffer_rx[2] == 'H'){
 8000f06:	4bb3      	ldr	r3, [pc, #716]	; (80011d4 <modoCalibracion+0x2d4>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	2b48      	cmp	r3, #72	; 0x48
 8000f0c:	f040 8101 	bne.w	8001112 <modoCalibracion+0x212>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2120      	movs	r1, #32
 8000f14:	48b0      	ldr	r0, [pc, #704]	; (80011d8 <modoCalibracion+0x2d8>)
 8000f16:	f001 fcaf 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	48ae      	ldr	r0, [pc, #696]	; (80011d8 <modoCalibracion+0x2d8>)
 8000f20:	f001 fcaa 	bl	8002878 <HAL_GPIO_WritePin>
		  Lcd_Clear();
 8000f24:	f7ff fab0 	bl	8000488 <Lcd_Clear>
		  Lcd_Set_Cursor(1,1);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fab6 	bl	800049c <Lcd_Set_Cursor>
		  Lcd_Send_String("Start Homming");
 8000f30:	48aa      	ldr	r0, [pc, #680]	; (80011dc <modoCalibracion+0x2dc>)
 8000f32:	f7ff fae5 	bl	8000500 <Lcd_Send_String>
		  Lcd_Set_Cursor(2,1);
 8000f36:	2101      	movs	r1, #1
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff faaf 	bl	800049c <Lcd_Set_Cursor>
		  Lcd_Send_String("Calibration mode");
 8000f3e:	48a8      	ldr	r0, [pc, #672]	; (80011e0 <modoCalibracion+0x2e0>)
 8000f40:	f7ff fade 	bl	8000500 <Lcd_Send_String>
		  HAL_Delay(150);
 8000f44:	2096      	movs	r0, #150	; 0x96
 8000f46:	f001 f9e1 	bl	800230c <HAL_Delay>
		  Servo_Write_angle(0);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 fe34 	bl	8001bb8 <Servo_Write_angle>
		  estadoGarra = 0;
 8000f50:	4ba4      	ldr	r3, [pc, #656]	; (80011e4 <modoCalibracion+0x2e4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
		  homeStatus = HomingMotors(&homeMotor_X, &homeMotor_Y, &homeMotor_Z);
 8000f56:	4aa4      	ldr	r2, [pc, #656]	; (80011e8 <modoCalibracion+0x2e8>)
 8000f58:	49a4      	ldr	r1, [pc, #656]	; (80011ec <modoCalibracion+0x2ec>)
 8000f5a:	48a5      	ldr	r0, [pc, #660]	; (80011f0 <modoCalibracion+0x2f0>)
 8000f5c:	f000 fc94 	bl	8001888 <HomingMotors>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4aa4      	ldr	r2, [pc, #656]	; (80011f4 <modoCalibracion+0x2f4>)
 8000f64:	6013      	str	r3, [r2, #0]
		  if (homeStatus == 0){
 8000f66:	4ba3      	ldr	r3, [pc, #652]	; (80011f4 <modoCalibracion+0x2f4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d128      	bne.n	8000fc0 <modoCalibracion+0xc0>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Home Status: %u\nHome exitoso!\r\n", homeStatus);
 8000f6e:	4ba1      	ldr	r3, [pc, #644]	; (80011f4 <modoCalibracion+0x2f4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	49a0      	ldr	r1, [pc, #640]	; (80011f8 <modoCalibracion+0x2f8>)
 8000f76:	48a1      	ldr	r0, [pc, #644]	; (80011fc <modoCalibracion+0x2fc>)
 8000f78:	f009 ff4e 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000f7c:	489f      	ldr	r0, [pc, #636]	; (80011fc <modoCalibracion+0x2fc>)
 8000f7e:	f7ff f8e5 	bl	800014c <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	489c      	ldr	r0, [pc, #624]	; (80011fc <modoCalibracion+0x2fc>)
 8000f8a:	f009 fadb 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Clear();
 8000f8e:	f7ff fa7b 	bl	8000488 <Lcd_Clear>
			  Lcd_Set_Cursor(1,1);
 8000f92:	2101      	movs	r1, #1
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fa81 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Home Status: OK");
 8000f9a:	4899      	ldr	r0, [pc, #612]	; (8001200 <modoCalibracion+0x300>)
 8000f9c:	f7ff fab0 	bl	8000500 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f7ff fa7a 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("X000|Y000|Z000|C");
 8000fa8:	4896      	ldr	r0, [pc, #600]	; (8001204 <modoCalibracion+0x304>)
 8000faa:	f7ff faa9 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 8000fae:	2096      	movs	r0, #150	; 0x96
 8000fb0:	f001 f9ac 	bl	800230c <HAL_Delay>
			  HAL_GPIO_WritePin(Home_led_GPIO_Port, Home_led_Pin, SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	4887      	ldr	r0, [pc, #540]	; (80011d8 <modoCalibracion+0x2d8>)
 8000fba:	f001 fc5d 	bl	8002878 <HAL_GPIO_WritePin>
 8000fbe:	e0a2      	b.n	8001106 <modoCalibracion+0x206>
		  } else if (homeStatus == -1){
 8000fc0:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <modoCalibracion+0x2f4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d123      	bne.n	8001012 <modoCalibracion+0x112>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Home Status: %u\nFalla Home X!\r\n", homeStatus);
 8000fca:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <modoCalibracion+0x2f4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	498d      	ldr	r1, [pc, #564]	; (8001208 <modoCalibracion+0x308>)
 8000fd2:	488a      	ldr	r0, [pc, #552]	; (80011fc <modoCalibracion+0x2fc>)
 8000fd4:	f009 ff20 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000fd8:	4888      	ldr	r0, [pc, #544]	; (80011fc <modoCalibracion+0x2fc>)
 8000fda:	f7ff f8b7 	bl	800014c <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4885      	ldr	r0, [pc, #532]	; (80011fc <modoCalibracion+0x2fc>)
 8000fe6:	f009 faad 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Clear();
 8000fea:	f7ff fa4d 	bl	8000488 <Lcd_Clear>
			  Lcd_Set_Cursor(1,1);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff fa53 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Home Error: ejeX");
 8000ff6:	4885      	ldr	r0, [pc, #532]	; (800120c <modoCalibracion+0x30c>)
 8000ff8:	f7ff fa82 	bl	8000500 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff fa4c 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("X???|Y000|Z000|C");
 8001004:	4882      	ldr	r0, [pc, #520]	; (8001210 <modoCalibracion+0x310>)
 8001006:	f7ff fa7b 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 800100a:	2096      	movs	r0, #150	; 0x96
 800100c:	f001 f97e 	bl	800230c <HAL_Delay>
 8001010:	e079      	b.n	8001106 <modoCalibracion+0x206>
		  } else if (homeStatus == -2){
 8001012:	4b78      	ldr	r3, [pc, #480]	; (80011f4 <modoCalibracion+0x2f4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f113 0f02 	cmn.w	r3, #2
 800101a:	d123      	bne.n	8001064 <modoCalibracion+0x164>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Home Status: %u\nFalla Home Y!\r\n", homeStatus);
 800101c:	4b75      	ldr	r3, [pc, #468]	; (80011f4 <modoCalibracion+0x2f4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	497c      	ldr	r1, [pc, #496]	; (8001214 <modoCalibracion+0x314>)
 8001024:	4875      	ldr	r0, [pc, #468]	; (80011fc <modoCalibracion+0x2fc>)
 8001026:	f009 fef7 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 800102a:	4874      	ldr	r0, [pc, #464]	; (80011fc <modoCalibracion+0x2fc>)
 800102c:	f7ff f88e 	bl	800014c <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29b      	uxth	r3, r3
 8001034:	4619      	mov	r1, r3
 8001036:	4871      	ldr	r0, [pc, #452]	; (80011fc <modoCalibracion+0x2fc>)
 8001038:	f009 fa84 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Clear();
 800103c:	f7ff fa24 	bl	8000488 <Lcd_Clear>
			  Lcd_Set_Cursor(1,1);
 8001040:	2101      	movs	r1, #1
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fa2a 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Home Error: ejeX");
 8001048:	4870      	ldr	r0, [pc, #448]	; (800120c <modoCalibracion+0x30c>)
 800104a:	f7ff fa59 	bl	8000500 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 800104e:	2101      	movs	r1, #1
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff fa23 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("X000|Y???|Z000|C");
 8001056:	4870      	ldr	r0, [pc, #448]	; (8001218 <modoCalibracion+0x318>)
 8001058:	f7ff fa52 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 800105c:	2096      	movs	r0, #150	; 0x96
 800105e:	f001 f955 	bl	800230c <HAL_Delay>
 8001062:	e050      	b.n	8001106 <modoCalibracion+0x206>
		  } else if (homeStatus == -3){
 8001064:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <modoCalibracion+0x2f4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f113 0f03 	cmn.w	r3, #3
 800106c:	d123      	bne.n	80010b6 <modoCalibracion+0x1b6>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Home Status: %u\nFalla Home Z!\r\n", homeStatus);
 800106e:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <modoCalibracion+0x2f4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4969      	ldr	r1, [pc, #420]	; (800121c <modoCalibracion+0x31c>)
 8001076:	4861      	ldr	r0, [pc, #388]	; (80011fc <modoCalibracion+0x2fc>)
 8001078:	f009 fece 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 800107c:	485f      	ldr	r0, [pc, #380]	; (80011fc <modoCalibracion+0x2fc>)
 800107e:	f7ff f865 	bl	800014c <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29b      	uxth	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	485c      	ldr	r0, [pc, #368]	; (80011fc <modoCalibracion+0x2fc>)
 800108a:	f009 fa5b 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Clear();
 800108e:	f7ff f9fb 	bl	8000488 <Lcd_Clear>
			  Lcd_Set_Cursor(1,1);
 8001092:	2101      	movs	r1, #1
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fa01 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Home Error: ejeX");
 800109a:	485c      	ldr	r0, [pc, #368]	; (800120c <modoCalibracion+0x30c>)
 800109c:	f7ff fa30 	bl	8000500 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 80010a0:	2101      	movs	r1, #1
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff f9fa 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("X000|Y000|Z???|C");
 80010a8:	485d      	ldr	r0, [pc, #372]	; (8001220 <modoCalibracion+0x320>)
 80010aa:	f7ff fa29 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 80010ae:	2096      	movs	r0, #150	; 0x96
 80010b0:	f001 f92c 	bl	800230c <HAL_Delay>
 80010b4:	e027      	b.n	8001106 <modoCalibracion+0x206>
		  } else if (homeStatus == 1){
 80010b6:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <modoCalibracion+0x2f4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d123      	bne.n	8001106 <modoCalibracion+0x206>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Home Status: %u\nFalla en funcHome!\r\n", homeStatus);
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <modoCalibracion+0x2f4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4957      	ldr	r1, [pc, #348]	; (8001224 <modoCalibracion+0x324>)
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <modoCalibracion+0x2fc>)
 80010c8:	f009 fea6 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80010cc:	484b      	ldr	r0, [pc, #300]	; (80011fc <modoCalibracion+0x2fc>)
 80010ce:	f7ff f83d 	bl	800014c <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4619      	mov	r1, r3
 80010d8:	4848      	ldr	r0, [pc, #288]	; (80011fc <modoCalibracion+0x2fc>)
 80010da:	f009 fa33 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Clear();
 80010de:	f7ff f9d3 	bl	8000488 <Lcd_Clear>
			  Lcd_Set_Cursor(1,1);
 80010e2:	2101      	movs	r1, #1
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff f9d9 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("ERROR Home: all!");
 80010ea:	484f      	ldr	r0, [pc, #316]	; (8001228 <modoCalibracion+0x328>)
 80010ec:	f7ff fa08 	bl	8000500 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 80010f0:	2101      	movs	r1, #1
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff f9d2 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("X???|Y???|Z???|?");
 80010f8:	484c      	ldr	r0, [pc, #304]	; (800122c <modoCalibracion+0x32c>)
 80010fa:	f7ff fa01 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(750);
 80010fe:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001102:	f001 f903 	bl	800230c <HAL_Delay>
		  }
		  HAL_Delay(1500);
 8001106:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800110a:	f001 f8ff 	bl	800230c <HAL_Delay>
		  return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e1b3      	b.n	800147a <modoCalibracion+0x57a>
	  }
	  //	CASO DE SETEO PARA VELOCIDADES GLOBALES
	  //	Ejemplo de consigna :-V058  -> setear velocidades globales a 58%
	  else if (buffer_rx[2] == 'V'){
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <modoCalibracion+0x2d4>)
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	2b56      	cmp	r3, #86	; 0x56
 8001118:	f040 8094 	bne.w	8001244 <modoCalibracion+0x344>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2120      	movs	r1, #32
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <modoCalibracion+0x2d8>)
 8001122:	f001 fba9 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2110      	movs	r1, #16
 800112a:	482b      	ldr	r0, [pc, #172]	; (80011d8 <modoCalibracion+0x2d8>)
 800112c:	f001 fba4 	bl	8002878 <HAL_GPIO_WritePin>
		  CDC_FS_Substring(3, 5, buffer_rx, buffer_data[0]);
 8001130:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <modoCalibracion+0x330>)
 8001132:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <modoCalibracion+0x2d4>)
 8001134:	2105      	movs	r1, #5
 8001136:	2003      	movs	r0, #3
 8001138:	f000 fd60 	bl	8001bfc <CDC_FS_Substring>
		  uint8_t velocidad = (uint8_t)atoi(buffer_data[0]);
 800113c:	483c      	ldr	r0, [pc, #240]	; (8001230 <modoCalibracion+0x330>)
 800113e:	f009 fddf 	bl	800ad00 <atoi>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
		  if (velocidad < 100){
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b63      	cmp	r3, #99	; 0x63
 800114a:	d828      	bhi.n	800119e <modoCalibracion+0x29e>
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e00c      	b.n	800116c <modoCalibracion+0x26c>
				  motors[i].velocity = velocidad;
 8001152:	79f9      	ldrb	r1, [r7, #7]
 8001154:	4837      	ldr	r0, [pc, #220]	; (8001234 <modoCalibracion+0x334>)
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4403      	add	r3, r0
 8001162:	3314      	adds	r3, #20
 8001164:	6019      	str	r1, [r3, #0]
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b02      	cmp	r3, #2
 8001170:	ddef      	ble.n	8001152 <modoCalibracion+0x252>
			  }
			  Lcd_Set_Cursor(1,1);
 8001172:	2101      	movs	r1, #1
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff f991 	bl	800049c <Lcd_Set_Cursor>
	//			  char v[4];
	//			  sprintf(v, "%u", (uint8_t)atoi(buffer_data[2]));
	// 			  Lcd_Send_String("Velocidades: %u", (uint8_t)atoi(buffer_data[2]));
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Velocidad globales seteadas.\r\n");
 800117a:	492f      	ldr	r1, [pc, #188]	; (8001238 <modoCalibracion+0x338>)
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <modoCalibracion+0x2fc>)
 800117e:	f009 fe4b 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001182:	481e      	ldr	r0, [pc, #120]	; (80011fc <modoCalibracion+0x2fc>)
 8001184:	f7fe ffe2 	bl	800014c <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29b      	uxth	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <modoCalibracion+0x2fc>)
 8001190:	f009 f9d8 	bl	800a544 <CDC_Transmit_FS>
			  HAL_Delay(150);
 8001194:	2096      	movs	r0, #150	; 0x96
 8001196:	f001 f8b9 	bl	800230c <HAL_Delay>
			  return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	e16d      	b.n	800147a <modoCalibracion+0x57a>
		  } else {
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "La velocidad debe de ser entre 0 y 100.\r\n");
 800119e:	4927      	ldr	r1, [pc, #156]	; (800123c <modoCalibracion+0x33c>)
 80011a0:	4816      	ldr	r0, [pc, #88]	; (80011fc <modoCalibracion+0x2fc>)
 80011a2:	f009 fe39 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <modoCalibracion+0x2fc>)
 80011a8:	f7fe ffd0 	bl	800014c <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <modoCalibracion+0x2fc>)
 80011b4:	f009 f9c6 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(1,1);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff f96e 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("ERROR Vel global");
 80011c0:	481f      	ldr	r0, [pc, #124]	; (8001240 <modoCalibracion+0x340>)
 80011c2:	f7ff f99d 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(750);
 80011c6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80011ca:	f001 f89f 	bl	800230c <HAL_Delay>
			  return 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e153      	b.n	800147a <modoCalibracion+0x57a>
 80011d2:	bf00      	nop
 80011d4:	200002f4 	.word	0x200002f4
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	0800bbd0 	.word	0x0800bbd0
 80011e0:	0800bbe0 	.word	0x0800bbe0
 80011e4:	200002d4 	.word	0x200002d4
 80011e8:	200002e4 	.word	0x200002e4
 80011ec:	200002e3 	.word	0x200002e3
 80011f0:	200002e2 	.word	0x200002e2
 80011f4:	200002ec 	.word	0x200002ec
 80011f8:	0800bbf4 	.word	0x0800bbf4
 80011fc:	2000031c 	.word	0x2000031c
 8001200:	0800bc14 	.word	0x0800bc14
 8001204:	0800bc24 	.word	0x0800bc24
 8001208:	0800bc38 	.word	0x0800bc38
 800120c:	0800bc58 	.word	0x0800bc58
 8001210:	0800bc6c 	.word	0x0800bc6c
 8001214:	0800bc80 	.word	0x0800bc80
 8001218:	0800bca0 	.word	0x0800bca0
 800121c:	0800bcb4 	.word	0x0800bcb4
 8001220:	0800bcd4 	.word	0x0800bcd4
 8001224:	0800bce8 	.word	0x0800bce8
 8001228:	0800bd10 	.word	0x0800bd10
 800122c:	0800b8b4 	.word	0x0800b8b4
 8001230:	20000358 	.word	0x20000358
 8001234:	20000244 	.word	0x20000244
 8001238:	0800bd24 	.word	0x0800bd24
 800123c:	0800bd44 	.word	0x0800bd44
 8001240:	0800bd70 	.word	0x0800bd70
		  }
	  }
	  //	CASO DE SETEO PARA VELOCIDADES POR EJES
	  //	Ejemplo de consigna :-vX023Y100Z078 -> setea las velociades Q1 23%, Q2 100% y Q3 78%
	  else if (buffer_rx[2] == 'v'){
 8001244:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <modoCalibracion+0x584>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	2b76      	cmp	r3, #118	; 0x76
 800124a:	d162      	bne.n	8001312 <modoCalibracion+0x412>
		  if (buffer_rx[3] == 'X' && buffer_rx[7] == 'Y' && buffer_rx[11] == 'Z'){
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <modoCalibracion+0x584>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	2b58      	cmp	r3, #88	; 0x58
 8001252:	d144      	bne.n	80012de <modoCalibracion+0x3de>
 8001254:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <modoCalibracion+0x584>)
 8001256:	79db      	ldrb	r3, [r3, #7]
 8001258:	2b59      	cmp	r3, #89	; 0x59
 800125a:	d140      	bne.n	80012de <modoCalibracion+0x3de>
 800125c:	4b89      	ldr	r3, [pc, #548]	; (8001484 <modoCalibracion+0x584>)
 800125e:	7adb      	ldrb	r3, [r3, #11]
 8001260:	2b5a      	cmp	r3, #90	; 0x5a
 8001262:	d13c      	bne.n	80012de <modoCalibracion+0x3de>
			  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2120      	movs	r1, #32
 8001268:	4887      	ldr	r0, [pc, #540]	; (8001488 <modoCalibracion+0x588>)
 800126a:	f001 fb05 	bl	8002878 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2110      	movs	r1, #16
 8001272:	4885      	ldr	r0, [pc, #532]	; (8001488 <modoCalibracion+0x588>)
 8001274:	f001 fb00 	bl	8002878 <HAL_GPIO_WritePin>
			  // divido la data por cada gdl
			  CDC_FS_Substring(4, 6, buffer_rx, buffer_data[1]);
 8001278:	4b84      	ldr	r3, [pc, #528]	; (800148c <modoCalibracion+0x58c>)
 800127a:	4a82      	ldr	r2, [pc, #520]	; (8001484 <modoCalibracion+0x584>)
 800127c:	2106      	movs	r1, #6
 800127e:	2004      	movs	r0, #4
 8001280:	f000 fcbc 	bl	8001bfc <CDC_FS_Substring>
			  CDC_FS_Substring(8, 10, buffer_rx, buffer_data[2]);
 8001284:	4b82      	ldr	r3, [pc, #520]	; (8001490 <modoCalibracion+0x590>)
 8001286:	4a7f      	ldr	r2, [pc, #508]	; (8001484 <modoCalibracion+0x584>)
 8001288:	210a      	movs	r1, #10
 800128a:	2008      	movs	r0, #8
 800128c:	f000 fcb6 	bl	8001bfc <CDC_FS_Substring>
			  CDC_FS_Substring(12, 14, buffer_rx, buffer_data[3]);
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <modoCalibracion+0x594>)
 8001292:	4a7c      	ldr	r2, [pc, #496]	; (8001484 <modoCalibracion+0x584>)
 8001294:	210e      	movs	r1, #14
 8001296:	200c      	movs	r0, #12
 8001298:	f000 fcb0 	bl	8001bfc <CDC_FS_Substring>
			  // cargo las velocidades en cada eje
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e019      	b.n	80012d6 <modoCalibracion+0x3d6>
				  motors[i].velocity = (uint8_t)atoi(buffer_data[i+1]);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4a7a      	ldr	r2, [pc, #488]	; (8001498 <modoCalibracion+0x598>)
 80012b0:	4413      	add	r3, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 fd24 	bl	800ad00 <atoi>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	4977      	ldr	r1, [pc, #476]	; (800149c <modoCalibracion+0x59c>)
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	440b      	add	r3, r1
 80012cc:	3314      	adds	r3, #20
 80012ce:	6018      	str	r0, [r3, #0]
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dde2      	ble.n	80012a2 <modoCalibracion+0x3a2>
 80012dc:	e017      	b.n	800130e <modoCalibracion+0x40e>
			  }
		  } else {
			  // en caso de no contener X Y Z tirar error
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Error en setear velocidades individuales.\r\n");
 80012de:	4970      	ldr	r1, [pc, #448]	; (80014a0 <modoCalibracion+0x5a0>)
 80012e0:	4870      	ldr	r0, [pc, #448]	; (80014a4 <modoCalibracion+0x5a4>)
 80012e2:	f009 fd99 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80012e6:	486f      	ldr	r0, [pc, #444]	; (80014a4 <modoCalibracion+0x5a4>)
 80012e8:	f7fe ff30 	bl	800014c <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	486c      	ldr	r0, [pc, #432]	; (80014a4 <modoCalibracion+0x5a4>)
 80012f4:	f009 f926 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(1,1);
 80012f8:	2101      	movs	r1, #1
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff f8ce 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("ERROR Vel format");
 8001300:	4869      	ldr	r0, [pc, #420]	; (80014a8 <modoCalibracion+0x5a8>)
 8001302:	f7ff f8fd 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(750);
 8001306:	f240 20ee 	movw	r0, #750	; 0x2ee
 800130a:	f000 ffff 	bl	800230c <HAL_Delay>
		  }
		  return 0;
 800130e:	2300      	movs	r3, #0
 8001310:	e0b3      	b.n	800147a <modoCalibracion+0x57a>
	  }
	  //	CASO DE HABILITACION DE MOTORES
	  //	Ejemplo de consigna :-E1  -> activar todos los motores  :-E0  -> Desactivar todos los motores
	  else if (buffer_rx[2] == 'E'){
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <modoCalibracion+0x584>)
 8001314:	789b      	ldrb	r3, [r3, #2]
 8001316:	2b45      	cmp	r3, #69	; 0x45
 8001318:	d176      	bne.n	8001408 <modoCalibracion+0x508>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2120      	movs	r1, #32
 800131e:	485a      	ldr	r0, [pc, #360]	; (8001488 <modoCalibracion+0x588>)
 8001320:	f001 faaa 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2110      	movs	r1, #16
 8001328:	4857      	ldr	r0, [pc, #348]	; (8001488 <modoCalibracion+0x588>)
 800132a:	f001 faa5 	bl	8002878 <HAL_GPIO_WritePin>
		  CDC_FS_Substring(3, 3, buffer_rx, buffer_data[0]);
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <modoCalibracion+0x598>)
 8001330:	4a54      	ldr	r2, [pc, #336]	; (8001484 <modoCalibracion+0x584>)
 8001332:	2103      	movs	r1, #3
 8001334:	2003      	movs	r0, #3
 8001336:	f000 fc61 	bl	8001bfc <CDC_FS_Substring>
		  if ((uint8_t)atoi(buffer_data[0]) == 1){
 800133a:	4857      	ldr	r0, [pc, #348]	; (8001498 <modoCalibracion+0x598>)
 800133c:	f009 fce0 	bl	800ad00 <atoi>
 8001340:	4603      	mov	r3, r0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d11f      	bne.n	8001388 <modoCalibracion+0x488>
			  ActivatedAll((uint8_t)atoi(buffer_data[0]));
 8001348:	4853      	ldr	r0, [pc, #332]	; (8001498 <modoCalibracion+0x598>)
 800134a:	f009 fcd9 	bl	800ad00 <atoi>
 800134e:	4603      	mov	r3, r0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fb8e 	bl	8001a74 <ActivatedAll>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Se habilitaron los Motores.\r\n");
 8001358:	4954      	ldr	r1, [pc, #336]	; (80014ac <modoCalibracion+0x5ac>)
 800135a:	4852      	ldr	r0, [pc, #328]	; (80014a4 <modoCalibracion+0x5a4>)
 800135c:	f009 fd5c 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001360:	4850      	ldr	r0, [pc, #320]	; (80014a4 <modoCalibracion+0x5a4>)
 8001362:	f7fe fef3 	bl	800014c <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	484d      	ldr	r0, [pc, #308]	; (80014a4 <modoCalibracion+0x5a4>)
 800136e:	f009 f8e9 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(1, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff f891 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Motores Enables!");
 800137a:	484d      	ldr	r0, [pc, #308]	; (80014b0 <modoCalibracion+0x5b0>)
 800137c:	f7ff f8c0 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 8001380:	2096      	movs	r0, #150	; 0x96
 8001382:	f000 ffc3 	bl	800230c <HAL_Delay>
 8001386:	e03d      	b.n	8001404 <modoCalibracion+0x504>
		  } else if ((uint8_t)atoi(buffer_data[0]) == 0){
 8001388:	4843      	ldr	r0, [pc, #268]	; (8001498 <modoCalibracion+0x598>)
 800138a:	f009 fcb9 	bl	800ad00 <atoi>
 800138e:	4603      	mov	r3, r0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d11f      	bne.n	80013d6 <modoCalibracion+0x4d6>
			  ActivatedAll((uint8_t)atoi(buffer_data[0]));
 8001396:	4840      	ldr	r0, [pc, #256]	; (8001498 <modoCalibracion+0x598>)
 8001398:	f009 fcb2 	bl	800ad00 <atoi>
 800139c:	4603      	mov	r3, r0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fb67 	bl	8001a74 <ActivatedAll>
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Se deshabilitaron los Motores.\r\n");
 80013a6:	4943      	ldr	r1, [pc, #268]	; (80014b4 <modoCalibracion+0x5b4>)
 80013a8:	483e      	ldr	r0, [pc, #248]	; (80014a4 <modoCalibracion+0x5a4>)
 80013aa:	f009 fd35 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80013ae:	483d      	ldr	r0, [pc, #244]	; (80014a4 <modoCalibracion+0x5a4>)
 80013b0:	f7fe fecc 	bl	800014c <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	483a      	ldr	r0, [pc, #232]	; (80014a4 <modoCalibracion+0x5a4>)
 80013bc:	f009 f8c2 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(1, 1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff f86a 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("Motores Disables");
 80013c8:	483b      	ldr	r0, [pc, #236]	; (80014b8 <modoCalibracion+0x5b8>)
 80013ca:	f7ff f899 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 80013ce:	2096      	movs	r0, #150	; 0x96
 80013d0:	f000 ff9c 	bl	800230c <HAL_Delay>
 80013d4:	e016      	b.n	8001404 <modoCalibracion+0x504>
		  } else {
			  // notifico al ordenador de los resultados del proceso
			  sprintf(buffer_tx, "Error, ON/OFF motores! \r\n");
 80013d6:	4939      	ldr	r1, [pc, #228]	; (80014bc <modoCalibracion+0x5bc>)
 80013d8:	4832      	ldr	r0, [pc, #200]	; (80014a4 <modoCalibracion+0x5a4>)
 80013da:	f009 fd1d 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80013de:	4831      	ldr	r0, [pc, #196]	; (80014a4 <modoCalibracion+0x5a4>)
 80013e0:	f7fe feb4 	bl	800014c <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	482e      	ldr	r0, [pc, #184]	; (80014a4 <modoCalibracion+0x5a4>)
 80013ec:	f009 f8aa 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(1, 1);
 80013f0:	2101      	movs	r1, #1
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff f852 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_String("<E ? Motores>");
 80013f8:	4831      	ldr	r0, [pc, #196]	; (80014c0 <modoCalibracion+0x5c0>)
 80013fa:	f7ff f881 	bl	8000500 <Lcd_Send_String>
			  HAL_Delay(150);
 80013fe:	2096      	movs	r0, #150	; 0x96
 8001400:	f000 ff84 	bl	800230c <HAL_Delay>
		  }
		  return 0;
 8001404:	2300      	movs	r3, #0
 8001406:	e038      	b.n	800147a <modoCalibracion+0x57a>
	  }
	  //	CASO DE HABILITACION DE MOTORES
	  //	Ejemplo de consigna :-S  -> Parada de emergencia
	  else if (buffer_rx[2] == 'S'){
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <modoCalibracion+0x584>)
 800140a:	789b      	ldrb	r3, [r3, #2]
 800140c:	2b53      	cmp	r3, #83	; 0x53
 800140e:	d126      	bne.n	800145e <modoCalibracion+0x55e>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2120      	movs	r1, #32
 8001414:	481c      	ldr	r0, [pc, #112]	; (8001488 <modoCalibracion+0x588>)
 8001416:	f001 fa2f 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2110      	movs	r1, #16
 800141e:	481a      	ldr	r0, [pc, #104]	; (8001488 <modoCalibracion+0x588>)
 8001420:	f001 fa2a 	bl	8002878 <HAL_GPIO_WritePin>
		  // Desactivar todos los motores
		  ActivatedAll(-1);
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 fb24 	bl	8001a74 <ActivatedAll>
		  // notifico al ordenador de los resultados del proceso
		  sprintf(buffer_tx, "Se han detenido los Motores.\r\n");
 800142c:	4925      	ldr	r1, [pc, #148]	; (80014c4 <modoCalibracion+0x5c4>)
 800142e:	481d      	ldr	r0, [pc, #116]	; (80014a4 <modoCalibracion+0x5a4>)
 8001430:	f009 fcf2 	bl	800ae18 <siprintf>
		  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001434:	481b      	ldr	r0, [pc, #108]	; (80014a4 <modoCalibracion+0x5a4>)
 8001436:	f7fe fe89 	bl	800014c <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29b      	uxth	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	4818      	ldr	r0, [pc, #96]	; (80014a4 <modoCalibracion+0x5a4>)
 8001442:	f009 f87f 	bl	800a544 <CDC_Transmit_FS>
		  Lcd_Set_Cursor(1, 1);
 8001446:	2101      	movs	r1, #1
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff f827 	bl	800049c <Lcd_Set_Cursor>
		  Lcd_Send_String("Motores Detenidos!");
 800144e:	481e      	ldr	r0, [pc, #120]	; (80014c8 <modoCalibracion+0x5c8>)
 8001450:	f7ff f856 	bl	8000500 <Lcd_Send_String>
		  HAL_Delay(150);
 8001454:	2096      	movs	r0, #150	; 0x96
 8001456:	f000 ff59 	bl	800230c <HAL_Delay>
		  return 0;
 800145a:	2300      	movs	r3, #0
 800145c:	e00d      	b.n	800147a <modoCalibracion+0x57a>
	  }
	  //	CASO DE CÓDIGO ERRONEO EN MODO DE CALIBRACIÓN
	  //	Ejemplo de consigna :-
	  else {
		  // notifico al ordenador de los resultados del proceso
		  sprintf(buffer_tx, "Consigna erronea de calibración.\r\n");
 800145e:	491b      	ldr	r1, [pc, #108]	; (80014cc <modoCalibracion+0x5cc>)
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <modoCalibracion+0x5a4>)
 8001462:	f009 fcd9 	bl	800ae18 <siprintf>
		  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001466:	480f      	ldr	r0, [pc, #60]	; (80014a4 <modoCalibracion+0x5a4>)
 8001468:	f7fe fe70 	bl	800014c <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29b      	uxth	r3, r3
 8001470:	4619      	mov	r1, r3
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <modoCalibracion+0x5a4>)
 8001474:	f009 f866 	bl	800a544 <CDC_Transmit_FS>
		  return 1;
 8001478:	2301      	movs	r3, #1
	  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002f4 	.word	0x200002f4
 8001488:	40010c00 	.word	0x40010c00
 800148c:	2000035e 	.word	0x2000035e
 8001490:	20000364 	.word	0x20000364
 8001494:	2000036a 	.word	0x2000036a
 8001498:	20000358 	.word	0x20000358
 800149c:	20000244 	.word	0x20000244
 80014a0:	0800bd84 	.word	0x0800bd84
 80014a4:	2000031c 	.word	0x2000031c
 80014a8:	0800bdb0 	.word	0x0800bdb0
 80014ac:	0800bdc4 	.word	0x0800bdc4
 80014b0:	0800bde4 	.word	0x0800bde4
 80014b4:	0800bdf8 	.word	0x0800bdf8
 80014b8:	0800be1c 	.word	0x0800be1c
 80014bc:	0800be30 	.word	0x0800be30
 80014c0:	0800be4c 	.word	0x0800be4c
 80014c4:	0800be5c 	.word	0x0800be5c
 80014c8:	0800be7c 	.word	0x0800be7c
 80014cc:	0800be90 	.word	0x0800be90

080014d0 <modoAprendizaje>:

uint8_t modoAprendizaje(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
	  //	CASO DE SETEO DE POSICIONES
	  if (buffer_data[0][0] == 'D'){
 80014d6:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <modoAprendizaje+0x1b4>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b44      	cmp	r3, #68	; 0x44
 80014dc:	d13d      	bne.n	800155a <modoAprendizaje+0x8a>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2120      	movs	r1, #32
 80014e2:	4869      	ldr	r0, [pc, #420]	; (8001688 <modoAprendizaje+0x1b8>)
 80014e4:	f001 f9c8 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2110      	movs	r1, #16
 80014ec:	4866      	ldr	r0, [pc, #408]	; (8001688 <modoAprendizaje+0x1b8>)
 80014ee:	f001 f9c3 	bl	8002878 <HAL_GPIO_WritePin>
		  char posiciones[3][5];
		  CDC_FS_Substring(2, 4, buffer_rx, posiciones[0]);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4a65      	ldr	r2, [pc, #404]	; (800168c <modoAprendizaje+0x1bc>)
 80014f6:	2104      	movs	r1, #4
 80014f8:	2002      	movs	r0, #2
 80014fa:	f000 fb7f 	bl	8001bfc <CDC_FS_Substring>
		  CDC_FS_Substring(6, 8, buffer_rx, posiciones[1]);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	3305      	adds	r3, #5
 8001502:	4a62      	ldr	r2, [pc, #392]	; (800168c <modoAprendizaje+0x1bc>)
 8001504:	2108      	movs	r1, #8
 8001506:	2006      	movs	r0, #6
 8001508:	f000 fb78 	bl	8001bfc <CDC_FS_Substring>
		  CDC_FS_Substring(9, 11, buffer_rx, posiciones[2]);
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	330a      	adds	r3, #10
 8001510:	4a5e      	ldr	r2, [pc, #376]	; (800168c <modoAprendizaje+0x1bc>)
 8001512:	210b      	movs	r1, #11
 8001514:	2009      	movs	r0, #9
 8001516:	f000 fb71 	bl	8001bfc <CDC_FS_Substring>
		  for (int i = 0; i < NUM_MOTORS; ++i) {
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e018      	b.n	8001552 <modoAprendizaje+0x82>
			  motors[i].newPosition = (uint8_t)atoi(buffer_data[i]);
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <modoAprendizaje+0x1b4>)
 800152c:	4413      	add	r3, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f009 fbe6 	bl	800ad00 <atoi>
 8001534:	4603      	mov	r3, r0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	4955      	ldr	r1, [pc, #340]	; (8001690 <modoAprendizaje+0x1c0>)
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	3320      	adds	r3, #32
 800154a:	6018      	str	r0, [r3, #0]
		  for (int i = 0; i < NUM_MOTORS; ++i) {
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b02      	cmp	r3, #2
 8001556:	dde3      	ble.n	8001520 <modoAprendizaje+0x50>
 8001558:	e08f      	b.n	800167a <modoAprendizaje+0x1aa>
		  }
	  }
	  //	CASO DE CONTROL DEL GRIPPE
	  else if (buffer_data[0][0] == 'P'){
 800155a:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <modoAprendizaje+0x1b4>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b50      	cmp	r3, #80	; 0x50
 8001560:	f040 808b 	bne.w	800167a <modoAprendizaje+0x1aa>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2120      	movs	r1, #32
 8001568:	4847      	ldr	r0, [pc, #284]	; (8001688 <modoAprendizaje+0x1b8>)
 800156a:	f001 f985 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2110      	movs	r1, #16
 8001572:	4845      	ldr	r0, [pc, #276]	; (8001688 <modoAprendizaje+0x1b8>)
 8001574:	f001 f980 	bl	8002878 <HAL_GPIO_WritePin>
		  CDC_FS_Substring(2, 4, buffer_rx, buffer_data[2]);
 8001578:	4b46      	ldr	r3, [pc, #280]	; (8001694 <modoAprendizaje+0x1c4>)
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <modoAprendizaje+0x1bc>)
 800157c:	2104      	movs	r1, #4
 800157e:	2002      	movs	r0, #2
 8001580:	f000 fb3c 	bl	8001bfc <CDC_FS_Substring>
		  if (((uint8_t)atoi(buffer_data[2]) < 90) && ((uint8_t)atoi(buffer_data[2]) > 0)){
 8001584:	4843      	ldr	r0, [pc, #268]	; (8001694 <modoAprendizaje+0x1c4>)
 8001586:	f009 fbbb 	bl	800ad00 <atoi>
 800158a:	4603      	mov	r3, r0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b59      	cmp	r3, #89	; 0x59
 8001590:	d82a      	bhi.n	80015e8 <modoAprendizaje+0x118>
 8001592:	4840      	ldr	r0, [pc, #256]	; (8001694 <modoAprendizaje+0x1c4>)
 8001594:	f009 fbb4 	bl	800ad00 <atoi>
 8001598:	4603      	mov	r3, r0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d023      	beq.n	80015e8 <modoAprendizaje+0x118>
			  Servo_Write_angle((uint8_t)atoi(buffer_data[2]));
 80015a0:	483c      	ldr	r0, [pc, #240]	; (8001694 <modoAprendizaje+0x1c4>)
 80015a2:	f009 fbad 	bl	800ad00 <atoi>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fb03 	bl	8001bb8 <Servo_Write_angle>
			  estadoGarra = 0;
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <modoAprendizaje+0x1c8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			  sprintf(buffer_tx, "La Garra ha sido cerrada.\r\n");
 80015b8:	4938      	ldr	r1, [pc, #224]	; (800169c <modoAprendizaje+0x1cc>)
 80015ba:	4839      	ldr	r0, [pc, #228]	; (80016a0 <modoAprendizaje+0x1d0>)
 80015bc:	f009 fc2c 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80015c0:	4837      	ldr	r0, [pc, #220]	; (80016a0 <modoAprendizaje+0x1d0>)
 80015c2:	f7fe fdc3 	bl	800014c <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	4834      	ldr	r0, [pc, #208]	; (80016a0 <modoAprendizaje+0x1d0>)
 80015ce:	f008 ffb9 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(2, 16);
 80015d2:	2110      	movs	r1, #16
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7fe ff61 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_Char('C');
 80015da:	2043      	movs	r0, #67	; 0x43
 80015dc:	f7fe ff0e 	bl	80003fc <Lcd_Send_Char>
			  HAL_Delay(150);
 80015e0:	2096      	movs	r0, #150	; 0x96
 80015e2:	f000 fe93 	bl	800230c <HAL_Delay>
 80015e6:	e048      	b.n	800167a <modoAprendizaje+0x1aa>
		  } else if (((uint8_t)atoi(buffer_data[2]) >= 90)&& ((uint8_t)atoi(buffer_data[2]) > 0)){
 80015e8:	482a      	ldr	r0, [pc, #168]	; (8001694 <modoAprendizaje+0x1c4>)
 80015ea:	f009 fb89 	bl	800ad00 <atoi>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b59      	cmp	r3, #89	; 0x59
 80015f4:	d92a      	bls.n	800164c <modoAprendizaje+0x17c>
 80015f6:	4827      	ldr	r0, [pc, #156]	; (8001694 <modoAprendizaje+0x1c4>)
 80015f8:	f009 fb82 	bl	800ad00 <atoi>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d023      	beq.n	800164c <modoAprendizaje+0x17c>
			  Servo_Write_angle((uint8_t)atoi(buffer_data[2]));
 8001604:	4823      	ldr	r0, [pc, #140]	; (8001694 <modoAprendizaje+0x1c4>)
 8001606:	f009 fb7b 	bl	800ad00 <atoi>
 800160a:	4603      	mov	r3, r0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fad1 	bl	8001bb8 <Servo_Write_angle>
			  estadoGarra = 1;
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <modoAprendizaje+0x1c8>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
			  sprintf(buffer_tx, "La Garra ha sido abierta.\r\n");
 800161c:	4921      	ldr	r1, [pc, #132]	; (80016a4 <modoAprendizaje+0x1d4>)
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <modoAprendizaje+0x1d0>)
 8001620:	f009 fbfa 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001624:	481e      	ldr	r0, [pc, #120]	; (80016a0 <modoAprendizaje+0x1d0>)
 8001626:	f7fe fd91 	bl	800014c <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29b      	uxth	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	481b      	ldr	r0, [pc, #108]	; (80016a0 <modoAprendizaje+0x1d0>)
 8001632:	f008 ff87 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(2, 16);
 8001636:	2110      	movs	r1, #16
 8001638:	2002      	movs	r0, #2
 800163a:	f7fe ff2f 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_Char('A');
 800163e:	2041      	movs	r0, #65	; 0x41
 8001640:	f7fe fedc 	bl	80003fc <Lcd_Send_Char>
			  HAL_Delay(150);
 8001644:	2096      	movs	r0, #150	; 0x96
 8001646:	f000 fe61 	bl	800230c <HAL_Delay>
 800164a:	e016      	b.n	800167a <modoAprendizaje+0x1aa>
		  } else {
			  sprintf(buffer_tx, "Error, valor invalido Gripper! \r\n");
 800164c:	4916      	ldr	r1, [pc, #88]	; (80016a8 <modoAprendizaje+0x1d8>)
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <modoAprendizaje+0x1d0>)
 8001650:	f009 fbe2 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001654:	4812      	ldr	r0, [pc, #72]	; (80016a0 <modoAprendizaje+0x1d0>)
 8001656:	f7fe fd79 	bl	800014c <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29b      	uxth	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <modoAprendizaje+0x1d0>)
 8001662:	f008 ff6f 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(2, 16);
 8001666:	2110      	movs	r1, #16
 8001668:	2002      	movs	r0, #2
 800166a:	f7fe ff17 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_Char('?');
 800166e:	203f      	movs	r0, #63	; 0x3f
 8001670:	f7fe fec4 	bl	80003fc <Lcd_Send_Char>
			  HAL_Delay(150);
 8001674:	2096      	movs	r0, #150	; 0x96
 8001676:	f000 fe49 	bl	800230c <HAL_Delay>
		  }
	  }
	  return 1;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000358 	.word	0x20000358
 8001688:	40010c00 	.word	0x40010c00
 800168c:	200002f4 	.word	0x200002f4
 8001690:	20000244 	.word	0x20000244
 8001694:	20000364 	.word	0x20000364
 8001698:	200002d4 	.word	0x200002d4
 800169c:	0800beb4 	.word	0x0800beb4
 80016a0:	2000031c 	.word	0x2000031c
 80016a4:	0800bed0 	.word	0x0800bed0
 80016a8:	0800beec 	.word	0x0800beec

080016ac <modoEjecucion>:
uint8_t modoEjecucion(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

	  //	CASO DE SETEO DE POSICIONES
	  if (buffer_data[0][0] == 'D'){
 80016b2:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <modoEjecucion+0x1b4>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b44      	cmp	r3, #68	; 0x44
 80016b8:	d13d      	bne.n	8001736 <modoEjecucion+0x8a>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2120      	movs	r1, #32
 80016be:	4869      	ldr	r0, [pc, #420]	; (8001864 <modoEjecucion+0x1b8>)
 80016c0:	f001 f8da 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2110      	movs	r1, #16
 80016c8:	4866      	ldr	r0, [pc, #408]	; (8001864 <modoEjecucion+0x1b8>)
 80016ca:	f001 f8d5 	bl	8002878 <HAL_GPIO_WritePin>
		  char posiciones[3][5];
		  CDC_FS_Substring(2, 4, buffer_rx, posiciones[0]);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <modoEjecucion+0x1bc>)
 80016d2:	2104      	movs	r1, #4
 80016d4:	2002      	movs	r0, #2
 80016d6:	f000 fa91 	bl	8001bfc <CDC_FS_Substring>
		  CDC_FS_Substring(6, 8, buffer_rx, posiciones[1]);
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	3305      	adds	r3, #5
 80016de:	4a62      	ldr	r2, [pc, #392]	; (8001868 <modoEjecucion+0x1bc>)
 80016e0:	2108      	movs	r1, #8
 80016e2:	2006      	movs	r0, #6
 80016e4:	f000 fa8a 	bl	8001bfc <CDC_FS_Substring>
		  CDC_FS_Substring(9, 11, buffer_rx, posiciones[2]);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	330a      	adds	r3, #10
 80016ec:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <modoEjecucion+0x1bc>)
 80016ee:	210b      	movs	r1, #11
 80016f0:	2009      	movs	r0, #9
 80016f2:	f000 fa83 	bl	8001bfc <CDC_FS_Substring>
		  for (int i = 0; i < NUM_MOTORS; ++i) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e018      	b.n	800172e <modoEjecucion+0x82>
			  motors[i].newPosition = (uint8_t)atoi(buffer_data[i]);
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4a56      	ldr	r2, [pc, #344]	; (8001860 <modoEjecucion+0x1b4>)
 8001708:	4413      	add	r3, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f009 faf8 	bl	800ad00 <atoi>
 8001710:	4603      	mov	r3, r0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	4955      	ldr	r1, [pc, #340]	; (800186c <modoEjecucion+0x1c0>)
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	440b      	add	r3, r1
 8001724:	3320      	adds	r3, #32
 8001726:	6018      	str	r0, [r3, #0]
		  for (int i = 0; i < NUM_MOTORS; ++i) {
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b02      	cmp	r3, #2
 8001732:	dde3      	ble.n	80016fc <modoEjecucion+0x50>
 8001734:	e08f      	b.n	8001856 <modoEjecucion+0x1aa>
		  }
	  }
	  //	CASO DE CONTROL DEL GRIPPE
	  else if (buffer_data[0][0] == 'P'){
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <modoEjecucion+0x1b4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b50      	cmp	r3, #80	; 0x50
 800173c:	f040 808b 	bne.w	8001856 <modoEjecucion+0x1aa>
		  HAL_GPIO_WritePin(Wait_led_GPIO_Port, Wait_led_Pin, SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2120      	movs	r1, #32
 8001744:	4847      	ldr	r0, [pc, #284]	; (8001864 <modoEjecucion+0x1b8>)
 8001746:	f001 f897 	bl	8002878 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Finish_led_GPIO_Port, Finish_led_Pin, RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2110      	movs	r1, #16
 800174e:	4845      	ldr	r0, [pc, #276]	; (8001864 <modoEjecucion+0x1b8>)
 8001750:	f001 f892 	bl	8002878 <HAL_GPIO_WritePin>
		  CDC_FS_Substring(2, 4, buffer_rx, buffer_data[2]);
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <modoEjecucion+0x1c4>)
 8001756:	4a44      	ldr	r2, [pc, #272]	; (8001868 <modoEjecucion+0x1bc>)
 8001758:	2104      	movs	r1, #4
 800175a:	2002      	movs	r0, #2
 800175c:	f000 fa4e 	bl	8001bfc <CDC_FS_Substring>
		  if (((uint8_t)atoi(buffer_data[2]) < 90) && ((uint8_t)atoi(buffer_data[2]) > 0)){
 8001760:	4843      	ldr	r0, [pc, #268]	; (8001870 <modoEjecucion+0x1c4>)
 8001762:	f009 facd 	bl	800ad00 <atoi>
 8001766:	4603      	mov	r3, r0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b59      	cmp	r3, #89	; 0x59
 800176c:	d82a      	bhi.n	80017c4 <modoEjecucion+0x118>
 800176e:	4840      	ldr	r0, [pc, #256]	; (8001870 <modoEjecucion+0x1c4>)
 8001770:	f009 fac6 	bl	800ad00 <atoi>
 8001774:	4603      	mov	r3, r0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <modoEjecucion+0x118>
			  Servo_Write_angle((uint8_t)atoi(buffer_data[2]));
 800177c:	483c      	ldr	r0, [pc, #240]	; (8001870 <modoEjecucion+0x1c4>)
 800177e:	f009 fabf 	bl	800ad00 <atoi>
 8001782:	4603      	mov	r3, r0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fa15 	bl	8001bb8 <Servo_Write_angle>
			  estadoGarra = 0;
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <modoEjecucion+0x1c8>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
			  sprintf(buffer_tx, "La Garra ha sido cerrada.\r\n");
 8001794:	4938      	ldr	r1, [pc, #224]	; (8001878 <modoEjecucion+0x1cc>)
 8001796:	4839      	ldr	r0, [pc, #228]	; (800187c <modoEjecucion+0x1d0>)
 8001798:	f009 fb3e 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 800179c:	4837      	ldr	r0, [pc, #220]	; (800187c <modoEjecucion+0x1d0>)
 800179e:	f7fe fcd5 	bl	800014c <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	4834      	ldr	r0, [pc, #208]	; (800187c <modoEjecucion+0x1d0>)
 80017aa:	f008 fecb 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(2, 16);
 80017ae:	2110      	movs	r1, #16
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7fe fe73 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_Char('C');
 80017b6:	2043      	movs	r0, #67	; 0x43
 80017b8:	f7fe fe20 	bl	80003fc <Lcd_Send_Char>
			  HAL_Delay(150);
 80017bc:	2096      	movs	r0, #150	; 0x96
 80017be:	f000 fda5 	bl	800230c <HAL_Delay>
 80017c2:	e048      	b.n	8001856 <modoEjecucion+0x1aa>
		  } else if (((uint8_t)atoi(buffer_data[2]) >= 90)&& ((uint8_t)atoi(buffer_data[2]) > 0)){
 80017c4:	482a      	ldr	r0, [pc, #168]	; (8001870 <modoEjecucion+0x1c4>)
 80017c6:	f009 fa9b 	bl	800ad00 <atoi>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b59      	cmp	r3, #89	; 0x59
 80017d0:	d92a      	bls.n	8001828 <modoEjecucion+0x17c>
 80017d2:	4827      	ldr	r0, [pc, #156]	; (8001870 <modoEjecucion+0x1c4>)
 80017d4:	f009 fa94 	bl	800ad00 <atoi>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d023      	beq.n	8001828 <modoEjecucion+0x17c>
			  Servo_Write_angle((uint8_t)atoi(buffer_data[2]));
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <modoEjecucion+0x1c4>)
 80017e2:	f009 fa8d 	bl	800ad00 <atoi>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f9e3 	bl	8001bb8 <Servo_Write_angle>
			  estadoGarra = 1;
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <modoEjecucion+0x1c8>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
			  sprintf(buffer_tx, "La Garra ha sido abierta.\r\n");
 80017f8:	4921      	ldr	r1, [pc, #132]	; (8001880 <modoEjecucion+0x1d4>)
 80017fa:	4820      	ldr	r0, [pc, #128]	; (800187c <modoEjecucion+0x1d0>)
 80017fc:	f009 fb0c 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001800:	481e      	ldr	r0, [pc, #120]	; (800187c <modoEjecucion+0x1d0>)
 8001802:	f7fe fca3 	bl	800014c <strlen>
 8001806:	4603      	mov	r3, r0
 8001808:	b29b      	uxth	r3, r3
 800180a:	4619      	mov	r1, r3
 800180c:	481b      	ldr	r0, [pc, #108]	; (800187c <modoEjecucion+0x1d0>)
 800180e:	f008 fe99 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(2, 16);
 8001812:	2110      	movs	r1, #16
 8001814:	2002      	movs	r0, #2
 8001816:	f7fe fe41 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_Char('A');
 800181a:	2041      	movs	r0, #65	; 0x41
 800181c:	f7fe fdee 	bl	80003fc <Lcd_Send_Char>
			  HAL_Delay(150);
 8001820:	2096      	movs	r0, #150	; 0x96
 8001822:	f000 fd73 	bl	800230c <HAL_Delay>
 8001826:	e016      	b.n	8001856 <modoEjecucion+0x1aa>
		  } else {
			  sprintf(buffer_tx, "Error, valor invalido Gripper! \r\n");
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <modoEjecucion+0x1d8>)
 800182a:	4814      	ldr	r0, [pc, #80]	; (800187c <modoEjecucion+0x1d0>)
 800182c:	f009 faf4 	bl	800ae18 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <modoEjecucion+0x1d0>)
 8001832:	f7fe fc8b 	bl	800014c <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29b      	uxth	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <modoEjecucion+0x1d0>)
 800183e:	f008 fe81 	bl	800a544 <CDC_Transmit_FS>
			  Lcd_Set_Cursor(2, 16);
 8001842:	2110      	movs	r1, #16
 8001844:	2002      	movs	r0, #2
 8001846:	f7fe fe29 	bl	800049c <Lcd_Set_Cursor>
			  Lcd_Send_Char('?');
 800184a:	203f      	movs	r0, #63	; 0x3f
 800184c:	f7fe fdd6 	bl	80003fc <Lcd_Send_Char>
			  HAL_Delay(150);
 8001850:	2096      	movs	r0, #150	; 0x96
 8001852:	f000 fd5b 	bl	800230c <HAL_Delay>
		  }
	  }
	  return 1;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000358 	.word	0x20000358
 8001864:	40010c00 	.word	0x40010c00
 8001868:	200002f4 	.word	0x200002f4
 800186c:	20000244 	.word	0x20000244
 8001870:	20000364 	.word	0x20000364
 8001874:	200002d4 	.word	0x200002d4
 8001878:	0800beb4 	.word	0x0800beb4
 800187c:	2000031c 	.word	0x2000031c
 8001880:	0800bed0 	.word	0x0800bed0
 8001884:	0800beec 	.word	0x0800beec

08001888 <HomingMotors>:

int HomingMotors(uint8_t* hmX, uint8_t* hmY, uint8_t* hmZ) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	ActivatedAll(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f000 f8ed 	bl	8001a74 <ActivatedAll>
    // Activar todos los motores y configurar velocidades
    for (int i = 0; i < NUM_MOTORS; i++) {
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e025      	b.n	80018ec <HomingMotors+0x64>
		motors[i].stepInterval = TIMER_FREQUENCY / (50 * motors[i].microStepping);
 80018a0:	4970      	ldr	r1, [pc, #448]	; (8001a64 <HomingMotors+0x1dc>)
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	3318      	adds	r3, #24
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2232      	movs	r2, #50	; 0x32
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018bc:	fb92 f1f3 	sdiv	r1, r2, r3
 80018c0:	4868      	ldr	r0, [pc, #416]	; (8001a64 <HomingMotors+0x1dc>)
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4403      	add	r3, r0
 80018ce:	3328      	adds	r3, #40	; 0x28
 80018d0:	6019      	str	r1, [r3, #0]
        motors[i].stopFlag = 1;   // Deshabilitar el movimiento
 80018d2:	4964      	ldr	r1, [pc, #400]	; (8001a64 <HomingMotors+0x1dc>)
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	440b      	add	r3, r1
 80018e0:	332c      	adds	r3, #44	; 0x2c
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	ddd6      	ble.n	80018a0 <HomingMotors+0x18>
    }

    // Verificar el home de cada motor
    motors[0].stopFlag = 0;
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HomingMotors+0x1dc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
    motors[1].stopFlag = 1;
 80018f8:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HomingMotors+0x1dc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	65da      	str	r2, [r3, #92]	; 0x5c
    motors[2].stopFlag = 1;
 80018fe:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HomingMotors+0x1dc>)
 8001900:	2201      	movs	r2, #1
 8001902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	contSeconds = 0;
 8001906:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HomingMotors+0x1e0>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim3);
 800190c:	4857      	ldr	r0, [pc, #348]	; (8001a6c <HomingMotors+0x1e4>)
 800190e:	f003 fef1 	bl	80056f4 <HAL_TIM_Base_Start_IT>
    while ((*hmX == 0 )&&(contSeconds < 3)){
 8001912:	e004      	b.n	800191e <HomingMotors+0x96>
        *hmX = motors[0].stopFlag;
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HomingMotors+0x1dc>)
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	701a      	strb	r2, [r3, #0]
    while ((*hmX == 0 )&&(contSeconds < 3)){
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <HomingMotors+0xa6>
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HomingMotors+0x1e0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d9f2      	bls.n	8001914 <HomingMotors+0x8c>
    }
	motors[0].stopFlag = 1;
 800192e:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HomingMotors+0x1dc>)
 8001930:	2201      	movs	r2, #1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
	motors[1].stopFlag = 0;
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HomingMotors+0x1dc>)
 8001936:	2200      	movs	r2, #0
 8001938:	65da      	str	r2, [r3, #92]	; 0x5c
	motors[2].stopFlag = 1;
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HomingMotors+0x1dc>)
 800193c:	2201      	movs	r2, #1
 800193e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	contSeconds = 0;
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HomingMotors+0x1e0>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
    while ((*hmY == 0 )&&(contSeconds < 3)){
 8001948:	e004      	b.n	8001954 <HomingMotors+0xcc>
        *hmY = motors[1].stopFlag;
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HomingMotors+0x1dc>)
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	701a      	strb	r2, [r3, #0]
    while ((*hmY == 0 )&&(contSeconds < 3)){
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d103      	bne.n	8001964 <HomingMotors+0xdc>
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HomingMotors+0x1e0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d9f2      	bls.n	800194a <HomingMotors+0xc2>
    }
    motors[0].stopFlag = 1;
 8001964:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HomingMotors+0x1dc>)
 8001966:	2201      	movs	r2, #1
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
    motors[1].stopFlag = 1;
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <HomingMotors+0x1dc>)
 800196c:	2201      	movs	r2, #1
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c
    motors[2].stopFlag = 0;
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <HomingMotors+0x1dc>)
 8001972:	2200      	movs	r2, #0
 8001974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	contSeconds = 0;
 8001978:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HomingMotors+0x1e0>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
    while ((*hmZ == 0 )&&(contSeconds < 3)){
 800197e:	e005      	b.n	800198c <HomingMotors+0x104>
        *hmZ = motors[2].stopFlag;
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HomingMotors+0x1dc>)
 8001982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001986:	b2da      	uxtb	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	701a      	strb	r2, [r3, #0]
    while ((*hmZ == 0 )&&(contSeconds < 3)){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <HomingMotors+0x114>
 8001994:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HomingMotors+0x1e0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d9f1      	bls.n	8001980 <HomingMotors+0xf8>
    }
    HAL_TIM_Base_Stop_IT(&htim3);
 800199c:	4833      	ldr	r0, [pc, #204]	; (8001a6c <HomingMotors+0x1e4>)
 800199e:	f003 fefb 	bl	8005798 <HAL_TIM_Base_Stop_IT>
	contSeconds = 0;
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HomingMotors+0x1e0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e02a      	b.n	8001a04 <HomingMotors+0x17c>
        motors[i].velocity = 0; // Detener el motor
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <HomingMotors+0x1dc>)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	440b      	add	r3, r1
 80019bc:	3314      	adds	r3, #20
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
        motors[i].stepInterval = 0; // Detener el motor
 80019c2:	4928      	ldr	r1, [pc, #160]	; (8001a64 <HomingMotors+0x1dc>)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	440b      	add	r3, r1
 80019d0:	3328      	adds	r3, #40	; 0x28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
        motors[i].currentPosition = 0; // Reiniciar la posición actual
 80019d6:	4923      	ldr	r1, [pc, #140]	; (8001a64 <HomingMotors+0x1dc>)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	440b      	add	r3, r1
 80019e4:	331c      	adds	r3, #28
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
        motors[i].stopFlag = 0;   // Habilitar el movimiento
 80019ea:	491e      	ldr	r1, [pc, #120]	; (8001a64 <HomingMotors+0x1dc>)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	332c      	adds	r3, #44	; 0x2c
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	3301      	adds	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	ddd1      	ble.n	80019ae <HomingMotors+0x126>
    }
    if ((*hmX == 1 )&&(*hmY == 1 )&&(*hmZ == 1 )){// Apagar todos los motores y reiniciar posiciones
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10e      	bne.n	8001a30 <HomingMotors+0x1a8>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10a      	bne.n	8001a30 <HomingMotors+0x1a8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d106      	bne.n	8001a30 <HomingMotors+0x1a8>
        countHome++;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HomingMotors+0x1e8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <HomingMotors+0x1e8>)
 8001a2a:	6013      	str	r3, [r2, #0]
        return 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e015      	b.n	8001a5c <HomingMotors+0x1d4>
    } else if (*hmX == 0 ){
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <HomingMotors+0x1b6>
    	return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	e00e      	b.n	8001a5c <HomingMotors+0x1d4>
    } else if (*hmY == 0 ){
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HomingMotors+0x1c4>
    	return -2;
 8001a46:	f06f 0301 	mvn.w	r3, #1
 8001a4a:	e007      	b.n	8001a5c <HomingMotors+0x1d4>
    } else if (*hmZ == 0 ){
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HomingMotors+0x1d2>
    	return -3;
 8001a54:	f06f 0302 	mvn.w	r3, #2
 8001a58:	e000      	b.n	8001a5c <HomingMotors+0x1d4>
    }
    return 1;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000244 	.word	0x20000244
 8001a68:	200002f0 	.word	0x200002f0
 8001a6c:	200003bc 	.word	0x200003bc
 8001a70:	200002e8 	.word	0x200002e8

08001a74 <ActivatedAll>:
		return 0;
	}
}

//	Función para definir comportamiento de los motores
void ActivatedAll (int habilitar){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	//		Pines Enable, Reset y Sleep comporten los mismos bus de datos
	//		para cada uno respectivamente de los distintos motores.
	//		Se recuerda que los pines son erntradas de lógica negada al A4988
	if (habilitar == -1){
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d127      	bne.n	8001ad4 <ActivatedAll+0x60>
	    for (int i = 0; i < NUM_MOTORS; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e020      	b.n	8001acc <ActivatedAll+0x58>
	        motors[i].velocity = 0; // Detener el motor
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <ActivatedAll+0x90>)
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	440b      	add	r3, r1
 8001a98:	3314      	adds	r3, #20
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
	        motors[i].stepInterval = 0; // Reiniciar la posición actual
 8001a9e:	4919      	ldr	r1, [pc, #100]	; (8001b04 <ActivatedAll+0x90>)
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	440b      	add	r3, r1
 8001aac:	3328      	adds	r3, #40	; 0x28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
	        motors[i].stopFlag = 1;   // Habilitar el movimiento
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <ActivatedAll+0x90>)
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	440b      	add	r3, r1
 8001ac0:	332c      	adds	r3, #44	; 0x2c
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < NUM_MOTORS; i++) {
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	dddb      	ble.n	8001a8a <ActivatedAll+0x16>
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, RESET);			//	Se habilita el ENABLE
	}
	else if (habilitar == 0){
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, SET);			//	Se Deshabilita el ENABLE
	}
}
 8001ad2:	e012      	b.n	8001afa <ActivatedAll+0x86>
	else if (habilitar == 1){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d106      	bne.n	8001ae8 <ActivatedAll+0x74>
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, RESET);			//	Se habilita el ENABLE
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <ActivatedAll+0x94>)
 8001ae2:	f000 fec9 	bl	8002878 <HAL_GPIO_WritePin>
}
 8001ae6:	e008      	b.n	8001afa <ActivatedAll+0x86>
	else if (habilitar == 0){
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <ActivatedAll+0x86>
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, SET);			//	Se Deshabilita el ENABLE
 8001aee:	2201      	movs	r2, #1
 8001af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <ActivatedAll+0x94>)
 8001af6:	f000 febf 	bl	8002878 <HAL_GPIO_WritePin>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000244 	.word	0x20000244
 8001b08:	40010c00 	.word	0x40010c00

08001b0c <moveMotors>:
float deg2rad(float degrees) {
	return degrees * (M_PI / 180.0);
}

// Función para configurar el intervalo de paso en función de la velocidad del motor
void moveMotors(StepperMotor *motor, int *newPosition, int *velocity) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	if (velocity != 0){
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <moveMotors+0x1a>
		motor->velocity = *velocity;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	615a      	str	r2, [r3, #20]
	}
	if (newPosition !=0){
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <moveMotors+0x28>
		motor->newPosition = *newPosition;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	621a      	str	r2, [r3, #32]
	}
	if (motor->velocity != 0){
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d031      	beq.n	8001ba0 <moveMotors+0x94>
		if (motor->currentPosition < motor->newPosition){
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	da12      	bge.n	8001b6e <moveMotors+0x62>
			motor->direction = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
			motor->stopFlag = 0;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
			motor->stepInterval = TIMER_FREQUENCY / (motor->velocity * motor->microStepping);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	6992      	ldr	r2, [r2, #24]
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b64:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
		}
	} else {
		motor->stepInterval = 0;
		motor->stopFlag = 1;
	}
}
 8001b6c:	e01e      	b.n	8001bac <moveMotors+0xa0>
		} else if (motor->currentPosition > motor->newPosition){
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dd18      	ble.n	8001bac <moveMotors+0xa0>
			motor->direction = 1;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	611a      	str	r2, [r3, #16]
			motor->stopFlag = 0;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
			motor->stepInterval = TIMER_FREQUENCY / (motor->velocity * motor->microStepping);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	6992      	ldr	r2, [r2, #24]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b96:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9e:	e005      	b.n	8001bac <moveMotors+0xa0>
		motor->stepInterval = 0;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
		motor->stopFlag = 1;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
	...

08001bb8 <Servo_Write_angle>:
  HAL_GPIO_EXTI_IRQHandler(StopM_Z_Pin);  // Limpiar la bandera de interrupción EXTI3
  HAL_GPIO_EXTI_IRQHandler(STOP_btn_Pin);  // Limpiar la bandera de interrupción EXTI3
}

//	Función para mover el servo
void Servo_Write_angle(uint16_t theta){
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_servo;
	pwm_servo = (uint16_t)((theta-0)*(PULSE_MAX-PULSE_MIN)/(180-0)+PULSE_MIN);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	f240 726c 	movw	r2, #1900	; 0x76c
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <Servo_Write_angle+0x3c>)
 8001bce:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd2:	441a      	add	r2, r3
 8001bd4:	11d2      	asrs	r2, r2, #7
 8001bd6:	17db      	asrs	r3, r3, #31
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001be0:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm_servo);
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <Servo_Write_angle+0x40>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	89fa      	ldrh	r2, [r7, #14]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	b60b60b7 	.word	0xb60b60b7
 8001bf8:	20000404 	.word	0x20000404

08001bfc <CDC_FS_Substring>:

// FUNCIÓN PARA DIVIDIR Y COPIAR CADENAS (formatear)
void CDC_FS_Substring(uint8_t inicioCadena, uint8_t finCadena, char* cadenaOriginal, char* cadenaCortada) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60ba      	str	r2, [r7, #8]
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	73bb      	strb	r3, [r7, #14]
	uint8_t pt = 0; // Inicializa un contador para la posición en la cadena de destino
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
	// Itera a través del rango de caracteres desde inicioCadena hasta finCadena
	for (uint16_t lt = inicioCadena; lt < finCadena; lt++) {
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	82bb      	strh	r3, [r7, #20]
 8001c16:	e00d      	b.n	8001c34 <CDC_FS_Substring+0x38>
		cadenaCortada[pt] = cadenaOriginal[lt]; // Copia el carácter de la cadena de origen a la cadena de destino
 8001c18:	8abb      	ldrh	r3, [r7, #20]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	440b      	add	r3, r1
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	701a      	strb	r2, [r3, #0]
		pt++; // Incrementa el contador de posición en la cadena de destino
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
	for (uint16_t lt = inicioCadena; lt < finCadena; lt++) {
 8001c2e:	8abb      	ldrh	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	82bb      	strh	r3, [r7, #20]
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	8aba      	ldrh	r2, [r7, #20]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3ec      	bcc.n	8001c18 <CDC_FS_Substring+0x1c>
	}
	cadenaCortada[pt] = '\0'; // Agrega un carácter nulo al final de la cadena de destino para marcar el final
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
	pt = 0; // Restablece el contador de posición en la cadena de destino para su reutilización
 8001c48:	2300      	movs	r3, #0
 8001c4a:	75fb      	strb	r3, [r7, #23]
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c68:	d15f      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0xd2>
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e059      	b.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0xcc>
			StepperMotor *motor = &motors[i];
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
			motor->stepCounter++;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
			if ((motor->newPosition != motor->currentPosition) || (countHome >= 0)){
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d103      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x46>
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db3f      	blt.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0xc6>
				if ((motor->stepCounter >= motor->stepInterval)&&(motor->stepInterval != 0)) {
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	db39      	blt.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0xc6>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d035      	beq.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0xc6>
					motor->stepCounter = 0;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
					if (motor->stopFlag == 0) {
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d126      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0xb6>
						if (motor->direction == 0) {
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x8c>
							motor->currentPosition += 1;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	61da      	str	r2, [r3, #28]
							HAL_GPIO_WritePin(motor->dirPort, motor->dirPin, SET);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6898      	ldr	r0, [r3, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	899b      	ldrh	r3, [r3, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f000 fdcb 	bl	8002878 <HAL_GPIO_WritePin>
 8001ce2:	e00c      	b.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0xa6>
						} else {
							motor->currentPosition -= 1;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	61da      	str	r2, [r3, #28]
							HAL_GPIO_WritePin(motor->dirPort, motor->dirPin, RESET);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	6898      	ldr	r0, [r3, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	899b      	ldrh	r3, [r3, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f000 fdbd 	bl	8002878 <HAL_GPIO_WritePin>
						}
						HAL_GPIO_WritePin(motor->stepPort, motor->stepPin, SET);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	889b      	ldrh	r3, [r3, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f000 fdb5 	bl	8002878 <HAL_GPIO_WritePin>
					}
					HAL_GPIO_WritePin(motor->stepPort, motor->stepPin, RESET);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	889b      	ldrh	r3, [r3, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f000 fdad 	bl	8002878 <HAL_GPIO_WritePin>
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	dda2      	ble.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}

	}
	if (htim->Instance == TIM3){
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d105      	bne.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0xe8>
		//		TIMER para contar segundos
		contSeconds++;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	}
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000244 	.word	0x20000244
 8001d4c:	200002e8 	.word	0x200002e8
 8001d50:	40000400 	.word	0x40000400
 8001d54:	200002f0 	.word	0x200002f0

08001d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <Error_Handler+0x8>
	...

08001d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_MspInit+0x5c>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_MspInit+0x5c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6193      	str	r3, [r2, #24]
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_MspInit+0x5c>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_MspInit+0x5c>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_MspInit+0x5c>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_MspInit+0x5c>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_MspInit+0x60>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_MspInit+0x60>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0e:	f000 fa61 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e1e:	f001 fb1e 	bl	800345e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20001118 	.word	0x20001118

08001e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM2_IRQHandler+0x10>)
 8001e32:	f003 fdd9 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000374 	.word	0x20000374

08001e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <TIM3_IRQHandler+0x10>)
 8001e46:	f003 fdcf 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200003bc 	.word	0x200003bc

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f008 fff0 	bl	800ae68 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20005000 	.word	0x20005000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	20000370 	.word	0x20000370
 8001ebc:	20001770 	.word	0x20001770

08001ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001ef2:	2247      	movs	r2, #71	; 0x47
 8001ef4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f10:	4813      	ldr	r0, [pc, #76]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001f12:	f003 fb9f 	bl	8005654 <HAL_TIM_Base_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f1c:	f7ff ff1c 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001f2e:	f003 ff25 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f38:	f7ff ff0e 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_TIM2_Init+0x94>)
 8001f4a:	f004 faa7 	bl	800649c <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f54:	f7ff ff00 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000374 	.word	0x20000374

08001f64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <MX_TIM3_Init+0x98>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001f88:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001f8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001f96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fa8:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001faa:	f003 fb53 	bl	8005654 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001fb4:	f7ff fed0 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001fc6:	f003 fed9 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001fd0:	f7ff fec2 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM3_Init+0x94>)
 8001fe2:	f004 fa5b 	bl	800649c <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fec:	f7ff feb4 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200003bc 	.word	0x200003bc
 8001ffc:	40000400 	.word	0x40000400

08002000 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	; 0x38
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
 800202c:	615a      	str	r2, [r3, #20]
 800202e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002030:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <MX_TIM4_Init+0xe8>)
 8002034:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002038:	2247      	movs	r2, #71	; 0x47
 800203a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <MX_TIM4_Init+0xe4>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002044:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002048:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <MX_TIM4_Init+0xe4>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002056:	4823      	ldr	r0, [pc, #140]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002058:	f003 fafc 	bl	8005654 <HAL_TIM_Base_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002062:	f7ff fe79 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800206c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002070:	4619      	mov	r1, r3
 8002072:	481c      	ldr	r0, [pc, #112]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002074:	f003 fe82 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800207e:	f7ff fe6b 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002082:	4818      	ldr	r0, [pc, #96]	; (80020e4 <MX_TIM4_Init+0xe4>)
 8002084:	f003 fbb6 	bl	80057f4 <HAL_TIM_PWM_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800208e:	f7ff fe63 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	4619      	mov	r1, r3
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <MX_TIM4_Init+0xe4>)
 80020a2:	f004 f9fb 	bl	800649c <HAL_TIMEx_MasterConfigSynchronization>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80020ac:	f7ff fe54 	bl	8001d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b0:	2360      	movs	r3, #96	; 0x60
 80020b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	220c      	movs	r2, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM4_Init+0xe4>)
 80020c8:	f003 fd96 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80020d2:	f7ff fe41 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020d6:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM4_Init+0xe4>)
 80020d8:	f000 f85c 	bl	8002194 <HAL_TIM_MspPostInit>

}
 80020dc:	bf00      	nop
 80020de:	3738      	adds	r7, #56	; 0x38
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000404 	.word	0x20000404
 80020e8:	40000800 	.word	0x40000800

080020ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d114      	bne.n	8002128 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	61d3      	str	r3, [r2, #28]
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	201c      	movs	r0, #28
 800211c:	f000 f9f1 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002120:	201c      	movs	r0, #28
 8002122:	f000 fa0a 	bl	800253a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002126:	e02a      	b.n	800217e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_TIM_Base_MspInit+0xa0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d114      	bne.n	800215c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	201d      	movs	r0, #29
 8002150:	f000 f9d7 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002154:	201d      	movs	r0, #29
 8002156:	f000 f9f0 	bl	800253a <HAL_NVIC_EnableIRQ>
}
 800215a:	e010      	b.n	800217e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_TIM_Base_MspInit+0xa4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10b      	bne.n	800217e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_TIM_Base_MspInit+0x9c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40000400 	.word	0x40000400
 8002190:	40000800 	.word	0x40000800

08002194 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_TIM_MspPostInit+0x5c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d118      	bne.n	80021e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_TIM_MspPostInit+0x60>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_TIM_MspPostInit+0x60>)
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_TIM_MspPostInit+0x60>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Gripper_pin_Pin;
 80021cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Gripper_pin_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_TIM_MspPostInit+0x64>)
 80021e2:	f000 f9c5 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010c00 	.word	0x40010c00

080021fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021fc:	f7ff fe60 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002202:	490c      	ldr	r1, [pc, #48]	; (8002234 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002218:	4c09      	ldr	r4, [pc, #36]	; (8002240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002226:	f008 fe25 	bl	800ae74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222a:	f7fe f985 	bl	8000538 <main>
  bx lr
 800222e:	4770      	bx	lr
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002238:	0800c0c0 	.word	0x0800c0c0
  ldr r2, =_sbss
 800223c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002240:	20001770 	.word	0x20001770

08002244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC1_2_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_Init+0x28>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_Init+0x28>)
 8002252:	f043 0310 	orr.w	r3, r3, #16
 8002256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f947 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	200f      	movs	r0, #15
 8002260:	f000 f808 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff fd7e 	bl	8001d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x54>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x58>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f95f 	bl	8002556 <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f000 f927 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_InitTick+0x5c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000010 	.word	0x20000010
 80022d0:	2000000c 	.word	0x2000000c

080022d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_IncTick+0x1c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_IncTick+0x20>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <HAL_IncTick+0x20>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	20000010 	.word	0x20000010
 80022f4:	2000044c 	.word	0x2000044c

080022f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_GetTick+0x10>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	2000044c 	.word	0x2000044c

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff fff0 	bl	80022f8 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_Delay+0x44>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffe0 	bl	80022f8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000010 	.word	0x20000010

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <__NVIC_EnableIRQ+0x34>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff90 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff2d 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff42 	bl	800239c <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff90 	bl	8002444 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5f 	bl	80023f0 <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff35 	bl	80023b8 <__NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffa2 	bl	80024a8 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	e169      	b.n	8002858 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002584:	2201      	movs	r2, #1
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 8158 	bne.w	8002852 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a9a      	ldr	r2, [pc, #616]	; (8002810 <HAL_GPIO_Init+0x2a0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d05e      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025ac:	4a98      	ldr	r2, [pc, #608]	; (8002810 <HAL_GPIO_Init+0x2a0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d875      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025b2:	4a98      	ldr	r2, [pc, #608]	; (8002814 <HAL_GPIO_Init+0x2a4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d058      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025b8:	4a96      	ldr	r2, [pc, #600]	; (8002814 <HAL_GPIO_Init+0x2a4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d86f      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025be:	4a96      	ldr	r2, [pc, #600]	; (8002818 <HAL_GPIO_Init+0x2a8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d052      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025c4:	4a94      	ldr	r2, [pc, #592]	; (8002818 <HAL_GPIO_Init+0x2a8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d869      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025ca:	4a94      	ldr	r2, [pc, #592]	; (800281c <HAL_GPIO_Init+0x2ac>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04c      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025d0:	4a92      	ldr	r2, [pc, #584]	; (800281c <HAL_GPIO_Init+0x2ac>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d863      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025d6:	4a92      	ldr	r2, [pc, #584]	; (8002820 <HAL_GPIO_Init+0x2b0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d046      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025dc:	4a90      	ldr	r2, [pc, #576]	; (8002820 <HAL_GPIO_Init+0x2b0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d85d      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d82a      	bhi.n	800263c <HAL_GPIO_Init+0xcc>
 80025e6:	2b12      	cmp	r3, #18
 80025e8:	d859      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_GPIO_Init+0x80>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	0800266b 	.word	0x0800266b
 80025f4:	08002645 	.word	0x08002645
 80025f8:	08002657 	.word	0x08002657
 80025fc:	08002699 	.word	0x08002699
 8002600:	0800269f 	.word	0x0800269f
 8002604:	0800269f 	.word	0x0800269f
 8002608:	0800269f 	.word	0x0800269f
 800260c:	0800269f 	.word	0x0800269f
 8002610:	0800269f 	.word	0x0800269f
 8002614:	0800269f 	.word	0x0800269f
 8002618:	0800269f 	.word	0x0800269f
 800261c:	0800269f 	.word	0x0800269f
 8002620:	0800269f 	.word	0x0800269f
 8002624:	0800269f 	.word	0x0800269f
 8002628:	0800269f 	.word	0x0800269f
 800262c:	0800269f 	.word	0x0800269f
 8002630:	0800269f 	.word	0x0800269f
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002661 	.word	0x08002661
 800263c:	4a79      	ldr	r2, [pc, #484]	; (8002824 <HAL_GPIO_Init+0x2b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002642:	e02c      	b.n	800269e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e029      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	3304      	adds	r3, #4
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e024      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	3308      	adds	r3, #8
 800265c:	623b      	str	r3, [r7, #32]
          break;
 800265e:	e01f      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	330c      	adds	r3, #12
 8002666:	623b      	str	r3, [r7, #32]
          break;
 8002668:	e01a      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002672:	2304      	movs	r3, #4
 8002674:	623b      	str	r3, [r7, #32]
          break;
 8002676:	e013      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002680:	2308      	movs	r3, #8
 8002682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	611a      	str	r2, [r3, #16]
          break;
 800268a:	e009      	b.n	80026a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800268c:	2308      	movs	r3, #8
 800268e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	615a      	str	r2, [r3, #20]
          break;
 8002696:	e003      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
          break;
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          break;
 800269e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2bff      	cmp	r3, #255	; 0xff
 80026a4:	d801      	bhi.n	80026aa <HAL_GPIO_Init+0x13a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	e001      	b.n	80026ae <HAL_GPIO_Init+0x13e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2bff      	cmp	r3, #255	; 0xff
 80026b4:	d802      	bhi.n	80026bc <HAL_GPIO_Init+0x14c>
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	e002      	b.n	80026c2 <HAL_GPIO_Init+0x152>
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	3b08      	subs	r3, #8
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	210f      	movs	r1, #15
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	6a39      	ldr	r1, [r7, #32]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80b1 	beq.w	8002852 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026f0:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <HAL_GPIO_Init+0x2b8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	; (8002828 <HAL_GPIO_Init+0x2b8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <HAL_GPIO_Init+0x2b8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2bc>)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a40      	ldr	r2, [pc, #256]	; (8002830 <HAL_GPIO_Init+0x2c0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_GPIO_Init+0x1ec>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3f      	ldr	r2, [pc, #252]	; (8002834 <HAL_GPIO_Init+0x2c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00d      	beq.n	8002758 <HAL_GPIO_Init+0x1e8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3e      	ldr	r2, [pc, #248]	; (8002838 <HAL_GPIO_Init+0x2c8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <HAL_GPIO_Init+0x1e4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3d      	ldr	r2, [pc, #244]	; (800283c <HAL_GPIO_Init+0x2cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_GPIO_Init+0x1e0>
 800274c:	2303      	movs	r3, #3
 800274e:	e006      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 8002750:	2304      	movs	r3, #4
 8002752:	e004      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 8002754:	2302      	movs	r3, #2
 8002756:	e002      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 800275c:	2300      	movs	r3, #0
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	f002 0203 	and.w	r2, r2, #3
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	4093      	lsls	r3, r2
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800276e:	492f      	ldr	r1, [pc, #188]	; (800282c <HAL_GPIO_Init+0x2bc>)
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	492c      	ldr	r1, [pc, #176]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	4928      	ldr	r1, [pc, #160]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027b0:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	4922      	ldr	r1, [pc, #136]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	491e      	ldr	r1, [pc, #120]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4918      	ldr	r1, [pc, #96]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	4914      	ldr	r1, [pc, #80]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d021      	beq.n	8002844 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e021      	b.n	8002852 <HAL_GPIO_Init+0x2e2>
 800280e:	bf00      	nop
 8002810:	10320000 	.word	0x10320000
 8002814:	10310000 	.word	0x10310000
 8002818:	10220000 	.word	0x10220000
 800281c:	10210000 	.word	0x10210000
 8002820:	10120000 	.word	0x10120000
 8002824:	10110000 	.word	0x10110000
 8002828:	40021000 	.word	0x40021000
 800282c:	40010000 	.word	0x40010000
 8002830:	40010800 	.word	0x40010800
 8002834:	40010c00 	.word	0x40010c00
 8002838:	40011000 	.word	0x40011000
 800283c:	40011400 	.word	0x40011400
 8002840:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	43db      	mvns	r3, r3
 800284c:	4909      	ldr	r1, [pc, #36]	; (8002874 <HAL_GPIO_Init+0x304>)
 800284e:	4013      	ands	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	3301      	adds	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	f47f ae8e 	bne.w	8002584 <HAL_GPIO_Init+0x14>
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	372c      	adds	r7, #44	; 0x2c
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002894:	e003      	b.n	800289e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43d9      	mvns	r1, r3
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	400b      	ands	r3, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	611a      	str	r2, [r3, #16]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e12b      	b.n	8002b46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd fd0c 	bl	8000320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800292e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800293e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002940:	f002 fda0 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8002944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a81      	ldr	r2, [pc, #516]	; (8002b50 <HAL_I2C_Init+0x274>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d807      	bhi.n	8002960 <HAL_I2C_Init+0x84>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <HAL_I2C_Init+0x278>)
 8002954:	4293      	cmp	r3, r2
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e006      	b.n	800296e <HAL_I2C_Init+0x92>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a7d      	ldr	r2, [pc, #500]	; (8002b58 <HAL_I2C_Init+0x27c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0e7      	b.n	8002b46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a78      	ldr	r2, [pc, #480]	; (8002b5c <HAL_I2C_Init+0x280>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0c9b      	lsrs	r3, r3, #18
 8002980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <HAL_I2C_Init+0x274>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d802      	bhi.n	80029b0 <HAL_I2C_Init+0xd4>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3301      	adds	r3, #1
 80029ae:	e009      	b.n	80029c4 <HAL_I2C_Init+0xe8>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <HAL_I2C_Init+0x284>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	3301      	adds	r3, #1
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	495c      	ldr	r1, [pc, #368]	; (8002b50 <HAL_I2C_Init+0x274>)
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d819      	bhi.n	8002a18 <HAL_I2C_Init+0x13c>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e59      	subs	r1, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f8:	400b      	ands	r3, r1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_I2C_Init+0x138>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e59      	subs	r1, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a12:	e051      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e04f      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <HAL_I2C_Init+0x168>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e012      	b.n	8002a6a <HAL_I2C_Init+0x18e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Init+0x196>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e022      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <HAL_I2C_Init+0x1bc>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e58      	subs	r0, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	440b      	add	r3, r1
 8002a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a96:	e00f      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	6809      	ldr	r1, [r1, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6911      	ldr	r1, [r2, #16]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	000186a0 	.word	0x000186a0
 8002b54:	001e847f 	.word	0x001e847f
 8002b58:	003d08ff 	.word	0x003d08ff
 8002b5c:	431bde83 	.word	0x431bde83
 8002b60:	10624dd3 	.word	0x10624dd3

08002b64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	817b      	strh	r3, [r7, #10]
 8002b74:	4613      	mov	r3, r2
 8002b76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff fbbe 	bl	80022f8 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	f040 80e0 	bne.w	8002d4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2319      	movs	r3, #25
 8002b92:	2201      	movs	r2, #1
 8002b94:	4970      	ldr	r1, [pc, #448]	; (8002d58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f964 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0d3      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_I2C_Master_Transmit+0x50>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0cc      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d007      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2221      	movs	r2, #33	; 0x21
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f89c 	bl	8002d60 <I2C_MasterRequestWrite>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e08d      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c48:	e066      	b.n	8002d18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	6a39      	ldr	r1, [r7, #32]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa22 	bl	8003098 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06b      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x188>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	6a39      	ldr	r1, [r7, #32]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa19 	bl	8003128 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d107      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e01a      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d194      	bne.n	8002c4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	00100002 	.word	0x00100002
 8002d5c:	ffff0000 	.word	0xffff0000

08002d60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d006      	beq.n	8002d8a <I2C_MasterRequestWrite+0x2a>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d003      	beq.n	8002d8a <I2C_MasterRequestWrite+0x2a>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d88:	d108      	bne.n	8002d9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e00b      	b.n	8002db4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d107      	bne.n	8002db4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f84f 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d103      	bne.n	8002de4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e035      	b.n	8002e54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002df2:	897b      	ldrh	r3, [r7, #10]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	e01b      	b.n	8002e3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e04:	897b      	ldrh	r3, [r7, #10]
 8002e06:	11db      	asrs	r3, r3, #7
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0306 	and.w	r3, r3, #6
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f063 030f 	orn	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <I2C_MasterRequestWrite+0xfc>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f898 	bl	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e010      	b.n	8002e54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <I2C_MasterRequestWrite+0x100>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f888 	bl	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	00010008 	.word	0x00010008
 8002e60:	00010002 	.word	0x00010002

08002e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e74:	e048      	b.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d044      	beq.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7ff fa3b 	bl	80022f8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d139      	bne.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10d      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	e00c      	b.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d116      	bne.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e023      	b.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10d      	bne.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	e00c      	b.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d093      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f66:	e071      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f76:	d123      	bne.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0204 	orr.w	r2, r3, #4
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e067      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d041      	beq.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7ff f996 	bl	80022f8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d136      	bne.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10c      	bne.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e00b      	b.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e021      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d10c      	bne.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e00b      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f af6d 	bne.w	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a4:	e034      	b.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f886 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d028      	beq.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7ff f91b 	bl	80022f8 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d016      	beq.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d1c3      	bne.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003134:	e034      	b.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f83e 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e034      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d028      	beq.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7ff f8d3 	bl	80022f8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11d      	bne.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d016      	beq.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d1c3      	bne.n	8003136 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d11b      	bne.n	8003208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	b08b      	sub	sp, #44	; 0x2c
 8003218:	af06      	add	r7, sp, #24
 800321a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0f1      	b.n	800340a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f007 fab6 	bl	800a7ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 f9bb 	bl	80065c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	687e      	ldr	r6, [r7, #4]
 800325a:	466d      	mov	r5, sp
 800325c:	f106 0410 	add.w	r4, r6, #16
 8003260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	1d33      	adds	r3, r6, #4
 800326a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	f003 f985 	bl	800657c <USB_CoreInit>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0c2      	b.n	800340a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f003 f9b6 	bl	80065fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e040      	b.n	8003318 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	3301      	adds	r3, #1
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3303      	adds	r3, #3
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333c      	adds	r3, #60	; 0x3c
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3340      	adds	r3, #64	; 0x40
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3301      	adds	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3b9      	bcc.n	8003296 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e044      	b.n	80033b2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	f203 1369 	addw	r3, r3, #361	; 0x169
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	3301      	adds	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3b5      	bcc.n	8003328 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	687e      	ldr	r6, [r7, #4]
 80033c4:	466d      	mov	r5, sp
 80033c6:	f106 0410 	add.w	r4, r6, #16
 80033ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	1d33      	adds	r3, r6, #4
 80033d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	f003 f91c 	bl	8006614 <USB_DevInit>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00d      	b.n	800340a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fb9d 	bl	8008b42 <USB_DevDisconnect>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003412 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_PCD_Start+0x16>
 8003424:	2302      	movs	r3, #2
 8003426:	e016      	b.n	8003456 <HAL_PCD_Start+0x44>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 f8b1 	bl	800659c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800343a:	2101      	movs	r1, #1
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f007 fc28 	bl	800ac92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f005 fb71 	bl	8008b2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f005 fb73 	bl	8008b56 <USB_ReadInterrupts>
 8003470:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fb1b 	bl	8003ab8 <PCD_EP_ISR_Handler>

    return;
 8003482:	e119      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d013      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a0:	b292      	uxth	r2, r2
 80034a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f007 f9fb 	bl	800a8a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f905 	bl	80036be <HAL_PCD_SetAddress>

    return;
 80034b4:	e100      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00c      	beq.n	80034da <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034d2:	b292      	uxth	r2, r2
 80034d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80034d8:	e0ee      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00c      	beq.n	80034fe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f6:	b292      	uxth	r2, r2
 80034f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80034fc:	e0dc      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d027      	beq.n	8003558 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	b292      	uxth	r2, r2
 800351c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0208 	bic.w	r2, r2, #8
 8003532:	b292      	uxth	r2, r2
 8003534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f007 f9eb 	bl	800a914 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003550:	b292      	uxth	r2, r2
 8003552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003556:	e0af      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8083 	beq.w	800366a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e010      	b.n	800358c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	8812      	ldrh	r2, [r2, #0]
 800357a:	b292      	uxth	r2, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	3320      	adds	r3, #32
 8003580:	443b      	add	r3, r7
 8003582:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003586:	7ffb      	ldrb	r3, [r7, #31]
 8003588:	3301      	adds	r3, #1
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	7ffb      	ldrb	r3, [r7, #31]
 800358e:	2b07      	cmp	r3, #7
 8003590:	d9eb      	bls.n	800356a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	b292      	uxth	r2, r2
 80035a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	b292      	uxth	r2, r2
 80035be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80035c2:	bf00      	nop
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f6      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	b292      	uxth	r2, r2
 80035ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e00f      	b.n	8003614 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	4611      	mov	r1, r2
 80035fc:	7ffa      	ldrb	r2, [r7, #31]
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	440a      	add	r2, r1
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	3320      	adds	r3, #32
 8003606:	443b      	add	r3, r7
 8003608:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800360c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	3301      	adds	r3, #1
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	7ffb      	ldrb	r3, [r7, #31]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d9ec      	bls.n	80035f4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0208 	orr.w	r2, r2, #8
 800362c:	b292      	uxth	r2, r2
 800362e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003644:	b292      	uxth	r2, r2
 8003646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0204 	orr.w	r2, r2, #4
 800365c:	b292      	uxth	r2, r2
 800365e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f007 f93c 	bl	800a8e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003668:	e026      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00f      	beq.n	8003694 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f007 f8fa 	bl	800a886 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003692:	e011      	b.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b0:	b292      	uxth	r2, r2
 80036b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80036b6:	bf00      	nop
  }
}
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_PCD_SetAddress+0x1a>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e013      	b.n	8003700 <HAL_PCD_SetAddress+0x42>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f005 fa09 	bl	8008b08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	4608      	mov	r0, r1
 8003712:	4611      	mov	r1, r2
 8003714:	461a      	mov	r2, r3
 8003716:	4603      	mov	r3, r0
 8003718:	70fb      	strb	r3, [r7, #3]
 800371a:	460b      	mov	r3, r1
 800371c:	803b      	strh	r3, [r7, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	da0e      	bge.n	800374c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	705a      	strb	r2, [r3, #1]
 800374a:	e00e      	b.n	800376a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 0207 	and.w	r2, r3, #7
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003776:	883a      	ldrh	r2, [r7, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	78ba      	ldrb	r2, [r7, #2]
 8003780:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003782:	78bb      	ldrb	r3, [r7, #2]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d102      	bne.n	800378e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_PCD_EP_Open+0x94>
 8003798:	2302      	movs	r3, #2
 800379a:	e00e      	b.n	80037ba <HAL_PCD_EP_Open+0xb2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f002 ff52 	bl	8006654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80037b8:	7afb      	ldrb	r3, [r7, #11]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da0e      	bge.n	80037f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
 80037f2:	e00e      	b.n	8003812 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 0207 	and.w	r2, r3, #7
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_PCD_EP_Close+0x6a>
 8003828:	2302      	movs	r3, #2
 800382a:	e00e      	b.n	800384a <HAL_PCD_EP_Close+0x88>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	4618      	mov	r0, r3
 800383c:	f003 faca 	bl	8006dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	460b      	mov	r3, r1
 8003860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003862:	7afb      	ldrb	r3, [r7, #11]
 8003864:	f003 0207 	and.w	r2, r3, #7
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2200      	movs	r2, #0
 8003890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	b2da      	uxtb	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f003 fc81 	bl	80071ac <USB_EPStartXfer>

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	460b      	mov	r3, r1
 80038f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	b2da      	uxtb	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fc33 	bl	80071ac <USB_EPStartXfer>

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 0207 	and.w	r2, r3, #7
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d901      	bls.n	800396e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04c      	b.n	8003a08 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800396e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003972:	2b00      	cmp	r3, #0
 8003974:	da0e      	bge.n	8003994 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	705a      	strb	r2, [r3, #1]
 8003992:	e00c      	b.n	80039ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_EP_SetStall+0x7e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e01c      	b.n	8003a08 <HAL_PCD_EP_SetStall+0xb8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 ff96 	bl	800890e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f005 f8bb 	bl	8008b74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d901      	bls.n	8003a2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e040      	b.n	8003ab0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da0e      	bge.n	8003a54 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	705a      	strb	r2, [r3, #1]
 8003a52:	e00e      	b.n	8003a72 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 0207 	and.w	r2, r3, #7
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_PCD_EP_ClrStall+0x82>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e00e      	b.n	8003ab0 <HAL_PCD_EP_ClrStall+0xa0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 ff84 	bl	80089ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b096      	sub	sp, #88	; 0x58
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ac0:	e3bf      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ace:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003adc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 8179 	bne.w	8003dd8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d152      	bne.n	8003b98 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	81fb      	strh	r3, [r7, #14]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3328      	adds	r3, #40	; 0x28
 8003b1a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3302      	adds	r3, #2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	441a      	add	r2, r3
 8003b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f006 fe7a 	bl	800a852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 836b 	beq.w	8004242 <PCD_EP_ISR_Handler+0x78a>
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 8366 	bne.w	8004242 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b96:	e354      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b9e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003baa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d034      	beq.n	8003c20 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3306      	adds	r3, #6
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f005 f80d 	bl	8008c14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c06:	4013      	ands	r3, r2
 8003c08:	823b      	strh	r3, [r7, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	8a3a      	ldrh	r2, [r7, #16]
 8003c10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c14:	b292      	uxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f006 fded 	bl	800a7f8 <HAL_PCD_SetupStageCallback>
 8003c1e:	e310      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c20:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f280 830c 	bge.w	8004242 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c36:	4013      	ands	r3, r2
 8003c38:	83fb      	strh	r3, [r7, #30]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	8bfa      	ldrh	r2, [r7, #30]
 8003c40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c44:	b292      	uxth	r2, r2
 8003c46:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3306      	adds	r3, #6
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c72:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d019      	beq.n	8003cb0 <PCD_EP_ISR_Handler+0x1f8>
 8003c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c92:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f004 ffbd 	bl	8008c14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f006 fdb6 	bl	800a81c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 82bd 	bne.w	8004242 <PCD_EP_ISR_Handler+0x78a>
 8003cc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ccc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cd4:	f000 82b5 	beq.w	8004242 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d0e:	d91d      	bls.n	8003d4c <PCD_EP_ISR_Handler+0x294>
 8003d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	647b      	str	r3, [r7, #68]	; 0x44
 8003d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <PCD_EP_ISR_Handler+0x272>
 8003d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d26:	3b01      	subs	r3, #1
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e026      	b.n	8003d9a <PCD_EP_ISR_Handler+0x2e2>
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <PCD_EP_ISR_Handler+0x2b2>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	e017      	b.n	8003d9a <PCD_EP_ISR_Handler+0x2e2>
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
 8003d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <PCD_EP_ISR_Handler+0x2cc>
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	3301      	adds	r3, #1
 8003d82:	647b      	str	r3, [r7, #68]	; 0x44
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	029b      	lsls	r3, r3, #10
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	827b      	strh	r3, [r7, #18]
 8003dac:	8a7b      	ldrh	r3, [r7, #18]
 8003dae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003db2:	827b      	strh	r3, [r7, #18]
 8003db4:	8a7b      	ldrh	r3, [r7, #18]
 8003db6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dba:	827b      	strh	r3, [r7, #18]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	8a7b      	ldrh	r3, [r7, #18]
 8003dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	8013      	strh	r3, [r2, #0]
 8003dd6:	e234      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f280 80fc 	bge.w	8003fee <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e2c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e44:	7b1b      	ldrb	r3, [r3, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d125      	bne.n	8003e96 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3306      	adds	r3, #6
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e72:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003e76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8092 	beq.w	8003fa4 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e86:	6959      	ldr	r1, [r3, #20]
 8003e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8a:	88da      	ldrh	r2, [r3, #6]
 8003e8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e90:	f004 fec0 	bl	8008c14 <USB_ReadPMA>
 8003e94:	e086      	b.n	8003fa4 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e98:	78db      	ldrb	r3, [r3, #3]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d10a      	bne.n	8003eb4 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9d9 	bl	800425e <HAL_PCD_EP_DB_Receive>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003eb2:	e077      	b.n	8003fa4 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	441a      	add	r2, r3
 8003ee0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d024      	beq.n	8003f5c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	3302      	adds	r3, #2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003f3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d02e      	beq.n	8003fa4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4c:	6959      	ldr	r1, [r3, #20]
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f50:	891a      	ldrh	r2, [r3, #8]
 8003f52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f56:	f004 fe5d 	bl	8008c14 <USB_ReadPMA>
 8003f5a:	e023      	b.n	8003fa4 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3306      	adds	r3, #6
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f84:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003f88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	6959      	ldr	r1, [r3, #20]
 8003f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9a:	895a      	ldrh	r2, [r3, #10]
 8003f9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fa0:	f004 fe38 	bl	8008c14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fac:	441a      	add	r2, r3
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fba:	441a      	add	r2, r3
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <PCD_EP_ISR_Handler+0x51c>
 8003fc8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d206      	bcs.n	8003fe2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f006 fc1e 	bl	800a81c <HAL_PCD_DataOutStageCallback>
 8003fe0:	e005      	b.n	8003fee <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 f8df 	bl	80071ac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8123 	beq.w	8004242 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ffc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	78db      	ldrb	r3, [r3, #3]
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 80a2 	bne.w	800419a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	7b1b      	ldrb	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8093 	beq.w	800418c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d046      	beq.n	8004100 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d126      	bne.n	80040c8 <PCD_EP_ISR_Handler+0x610>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	4413      	add	r3, r2
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	011a      	lsls	r2, r3, #4
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	4413      	add	r3, r2
 800409c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e061      	b.n	800418c <PCD_EP_ISR_Handler+0x6d4>
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d15d      	bne.n	800418c <PCD_EP_ISR_Handler+0x6d4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	4413      	add	r3, r2
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	011a      	lsls	r2, r3, #4
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	4413      	add	r3, r2
 80040f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	2200      	movs	r2, #0
 80040fc:	801a      	strh	r2, [r3, #0]
 80040fe:	e045      	b.n	800418c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d126      	bne.n	800415c <PCD_EP_ISR_Handler+0x6a4>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	4413      	add	r3, r2
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412e:	4413      	add	r3, r2
 8004130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004140:	b29a      	uxth	r2, r3
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004154:	b29a      	uxth	r2, r3
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e017      	b.n	800418c <PCD_EP_ISR_Handler+0x6d4>
 800415c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d113      	bne.n	800418c <PCD_EP_ISR_Handler+0x6d4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004172:	4413      	add	r3, r2
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	011a      	lsls	r2, r3, #4
 800417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417e:	4413      	add	r3, r2
 8004180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f006 fb5d 	bl	800a852 <HAL_PCD_DataInStageCallback>
 8004198:	e053      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800419a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d146      	bne.n	8004234 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	3302      	adds	r3, #2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80041d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041da:	429a      	cmp	r2, r3
 80041dc:	d907      	bls.n	80041ee <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80041de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ea:	619a      	str	r2, [r3, #24]
 80041ec:	e002      	b.n	80041f4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80041ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80041f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f006 fb25 	bl	800a852 <HAL_PCD_DataInStageCallback>
 8004208:	e01b      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800420a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004212:	441a      	add	r2, r3
 8004214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004216:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004220:	441a      	add	r2, r3
 8004222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004224:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800422c:	4618      	mov	r0, r3
 800422e:	f002 ffbd 	bl	80071ac <USB_EPStartXfer>
 8004232:	e006      	b.n	8004242 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004234:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004238:	461a      	mov	r2, r3
 800423a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f91b 	bl	8004478 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800424a:	b29b      	uxth	r3, r3
 800424c:	b21b      	sxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	f6ff ac37 	blt.w	8003ac2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3758      	adds	r7, #88	; 0x58
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b088      	sub	sp, #32
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d07e      	beq.n	8004374 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	3302      	adds	r3, #2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800429e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	8b7b      	ldrh	r3, [r7, #26]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d306      	bcc.n	80042b8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	8b7b      	ldrh	r3, [r7, #26]
 80042b0:	1ad2      	subs	r2, r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	619a      	str	r2, [r3, #24]
 80042b6:	e002      	b.n	80042be <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d123      	bne.n	800430e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e0:	833b      	strh	r3, [r7, #24]
 80042e2:	8b3b      	ldrh	r3, [r7, #24]
 80042e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042e8:	833b      	strh	r3, [r7, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	8b3b      	ldrh	r3, [r7, #24]
 80042fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01f      	beq.n	8004358 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	82fb      	strh	r3, [r7, #22]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	8afb      	ldrh	r3, [r7, #22]
 8004344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004354:	b29b      	uxth	r3, r3
 8004356:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004358:	8b7b      	ldrh	r3, [r7, #26]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8087 	beq.w	800446e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6959      	ldr	r1, [r3, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	891a      	ldrh	r2, [r3, #8]
 800436c:	8b7b      	ldrh	r3, [r7, #26]
 800436e:	f004 fc51 	bl	8008c14 <USB_ReadPMA>
 8004372:	e07c      	b.n	800446e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	3306      	adds	r3, #6
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800439c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	8b7b      	ldrh	r3, [r7, #26]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d306      	bcc.n	80043b6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	8b7b      	ldrh	r3, [r7, #26]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	619a      	str	r2, [r3, #24]
 80043b4:	e002      	b.n	80043bc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d123      	bne.n	800440c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	83fb      	strh	r3, [r7, #30]
 80043e0:	8bfb      	ldrh	r3, [r7, #30]
 80043e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043e6:	83fb      	strh	r3, [r7, #30]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	8bfb      	ldrh	r3, [r7, #30]
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d11f      	bne.n	8004456 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	83bb      	strh	r3, [r7, #28]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	8bbb      	ldrh	r3, [r7, #28]
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6959      	ldr	r1, [r3, #20]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	895a      	ldrh	r2, [r3, #10]
 8004468:	8b7b      	ldrh	r3, [r7, #26]
 800446a:	f004 fbd3 	bl	8008c14 <USB_ReadPMA>
    }
  }

  return count;
 800446e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b0a4      	sub	sp, #144	; 0x90
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 81dd 	beq.w	800484c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	3302      	adds	r3, #2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d907      	bls.n	80044da <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	619a      	str	r2, [r3, #24]
 80044d8:	e002      	b.n	80044e0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 80b9 	bne.w	800465c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d126      	bne.n	8004540 <HAL_PCD_EP_DB_Transmit+0xc8>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	4413      	add	r3, r2
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	011a      	lsls	r2, r3, #4
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	4413      	add	r3, r2
 8004514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004524:	b29a      	uxth	r2, r3
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e01a      	b.n	8004576 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d116      	bne.n	8004576 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	4413      	add	r3, r2
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	011a      	lsls	r2, r3, #4
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	4413      	add	r3, r2
 800456a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d126      	bne.n	80045d2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e017      	b.n	8004602 <HAL_PCD_EP_DB_Transmit+0x18a>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d113      	bne.n	8004602 <HAL_PCD_EP_DB_Transmit+0x18a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	4413      	add	r3, r2
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	011a      	lsls	r2, r3, #4
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2200      	movs	r2, #0
 8004600:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f006 f922 	bl	800a852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 82fc 	beq.w	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	82fb      	strh	r3, [r7, #22]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]
 800465a:	e2da      	b.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d021      	beq.n	80046aa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 82ae 	bne.w	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046be:	441a      	add	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046cc:	441a      	add	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6a1a      	ldr	r2, [r3, #32]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d30b      	bcc.n	80046f6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	621a      	str	r2, [r3, #32]
 80046f4:	e017      	b.n	8004726 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80046fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800470e:	e00a      	b.n	8004726 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d165      	bne.n	80047fa <HAL_PCD_EP_DB_Transmit+0x382>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	4413      	add	r3, r2
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	011a      	lsls	r2, r3, #4
 800474c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474e:	4413      	add	r3, r2
 8004750:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004754:	63bb      	str	r3, [r7, #56]	; 0x38
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004760:	b29a      	uxth	r2, r3
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800476a:	2b3e      	cmp	r3, #62	; 0x3e
 800476c:	d91d      	bls.n	80047aa <HAL_PCD_EP_DB_Transmit+0x332>
 800476e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
 8004776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_PCD_EP_DB_Transmit+0x310>
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004784:	3b01      	subs	r3, #1
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29a      	uxth	r2, r3
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	b29b      	uxth	r3, r3
 8004792:	029b      	lsls	r3, r3, #10
 8004794:	b29b      	uxth	r3, r3
 8004796:	4313      	orrs	r3, r2
 8004798:	b29b      	uxth	r3, r3
 800479a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800479e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	e044      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <HAL_PCD_EP_DB_Transmit+0x350>
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	801a      	strh	r2, [r3, #0]
 80047c6:	e035      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80047dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047de:	3301      	adds	r3, #1
 80047e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	e01c      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d118      	bne.n	8004834 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004816:	4413      	add	r3, r2
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	011a      	lsls	r2, r3, #4
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004822:	4413      	add	r3, r2
 8004824:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004828:	643b      	str	r3, [r7, #64]	; 0x40
 800482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482e:	b29a      	uxth	r2, r3
 8004830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004832:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	891a      	ldrh	r2, [r3, #8]
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004844:	b29b      	uxth	r3, r3
 8004846:	f004 f9a0 	bl	8008b8a <USB_WritePMA>
 800484a:	e1e2      	b.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	3306      	adds	r3, #6
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004874:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004880:	429a      	cmp	r2, r3
 8004882:	d307      	bcc.n	8004894 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800488c:	1ad2      	subs	r2, r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	619a      	str	r2, [r3, #24]
 8004892:	e002      	b.n	800489a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 80c0 	bne.w	8004a24 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d126      	bne.n	80048fa <HAL_PCD_EP_DB_Transmit+0x482>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c0:	4413      	add	r3, r2
 80048c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80048d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	e01a      	b.n	8004930 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d116      	bne.n	8004930 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	667b      	str	r3, [r7, #100]	; 0x64
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004910:	b29b      	uxth	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004916:	4413      	add	r3, r2
 8004918:	667b      	str	r3, [r7, #100]	; 0x64
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	011a      	lsls	r2, r3, #4
 8004920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004922:	4413      	add	r3, r2
 8004924:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492c:	2200      	movs	r2, #0
 800492e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	677b      	str	r3, [r7, #116]	; 0x74
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d12b      	bne.n	8004996 <HAL_PCD_EP_DB_Transmit+0x51e>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	4413      	add	r3, r2
 8004954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	011a      	lsls	r2, r3, #4
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	4413      	add	r3, r2
 8004960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004974:	b29a      	uxth	r2, r3
 8004976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498c:	b29a      	uxth	r2, r3
 800498e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	e017      	b.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d113      	bne.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ac:	4413      	add	r3, r2
 80049ae:	677b      	str	r3, [r7, #116]	; 0x74
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	011a      	lsls	r2, r3, #4
 80049b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b8:	4413      	add	r3, r2
 80049ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049be:	673b      	str	r3, [r7, #112]	; 0x70
 80049c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c2:	2200      	movs	r2, #0
 80049c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f005 ff40 	bl	800a852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f040 811a 	bne.w	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
 8004a22:	e0f6      	b.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d121      	bne.n	8004a72 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 80ca 	bne.w	8004c12 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a86:	441a      	add	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a94:	441a      	add	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d30b      	bcc.n	8004abe <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	621a      	str	r2, [r3, #32]
 8004abc:	e017      	b.n	8004aee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004ac6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ad6:	e00a      	b.n	8004aee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	657b      	str	r3, [r7, #84]	; 0x54
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d165      	bne.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x750>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b10:	4413      	add	r3, r2
 8004b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011a      	lsls	r2, r3, #4
 8004b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b38:	2b3e      	cmp	r3, #62	; 0x3e
 8004b3a:	d91d      	bls.n	8004b78 <HAL_PCD_EP_DB_Transmit+0x700>
 8004b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b52:	3b01      	subs	r3, #1
 8004b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e041      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x784>
 8004b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e032      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x784>
 8004b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_PCD_EP_DB_Transmit+0x738>
 8004baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bac:	3301      	adds	r3, #1
 8004bae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	e019      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x784>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d115      	bne.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x784>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	4413      	add	r3, r2
 8004be0:	657b      	str	r3, [r7, #84]	; 0x54
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	011a      	lsls	r2, r3, #4
 8004be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bea:	4413      	add	r3, r2
 8004bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6959      	ldr	r1, [r3, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	895a      	ldrh	r2, [r3, #10]
 8004c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f003 ffbc 	bl	8008b8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2c:	82bb      	strh	r3, [r7, #20]
 8004c2e:	8abb      	ldrh	r3, [r7, #20]
 8004c30:	f083 0310 	eor.w	r3, r3, #16
 8004c34:	82bb      	strh	r3, [r7, #20]
 8004c36:	8abb      	ldrh	r3, [r7, #20]
 8004c38:	f083 0320 	eor.w	r3, r3, #32
 8004c3c:	82bb      	strh	r3, [r7, #20]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	8abb      	ldrh	r3, [r7, #20]
 8004c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3790      	adds	r7, #144	; 0x90
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c7e:	897b      	ldrh	r3, [r7, #10]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	e009      	b.n	8004cb6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ca2:	897a      	ldrh	r2, [r7, #10]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	80da      	strh	r2, [r3, #6]
 8004cca:	e00b      	b.n	8004ce4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e272      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8087 	beq.w	8004e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d10:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d00c      	beq.n	8004d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d1c:	4b8f      	ldr	r3, [pc, #572]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d112      	bne.n	8004d4e <HAL_RCC_OscConfig+0x5e>
 8004d28:	4b8c      	ldr	r3, [pc, #560]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d10b      	bne.n	8004d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d36:	4b89      	ldr	r3, [pc, #548]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d06c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x12c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d168      	bne.n	8004e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e24c      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x76>
 8004d58:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a7f      	ldr	r2, [pc, #508]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e02e      	b.n	8004dc4 <HAL_RCC_OscConfig+0xd4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x98>
 8004d6e:	4b7b      	ldr	r3, [pc, #492]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7a      	ldr	r2, [pc, #488]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a77      	ldr	r2, [pc, #476]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e01d      	b.n	8004dc4 <HAL_RCC_OscConfig+0xd4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0xbc>
 8004d92:	4b72      	ldr	r3, [pc, #456]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a71      	ldr	r2, [pc, #452]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b6f      	ldr	r3, [pc, #444]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6e      	ldr	r2, [pc, #440]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0xd4>
 8004dac:	4b6b      	ldr	r3, [pc, #428]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a6a      	ldr	r2, [pc, #424]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b68      	ldr	r3, [pc, #416]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a67      	ldr	r2, [pc, #412]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fa94 	bl	80022f8 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fd fa90 	bl	80022f8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e200      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de6:	4b5d      	ldr	r3, [pc, #372]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xe4>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fd fa80 	bl	80022f8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fa7c 	bl	80022f8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e1ec      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0e:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x10c>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d063      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e36:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d11c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x18c>
 8004e42:	4b46      	ldr	r3, [pc, #280]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d116      	bne.n	8004e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4e:	4b43      	ldr	r3, [pc, #268]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_RCC_OscConfig+0x176>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e1c0      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e66:	4b3d      	ldr	r3, [pc, #244]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4939      	ldr	r1, [pc, #228]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	e03a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e84:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <HAL_RCC_OscConfig+0x270>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8a:	f7fd fa35 	bl	80022f8 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e92:	f7fd fa31 	bl	80022f8 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e1a1      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4927      	ldr	r1, [pc, #156]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]
 8004ec4:	e015      	b.n	8004ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fa14 	bl	80022f8 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed4:	f7fd fa10 	bl	80022f8 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e180      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d03a      	beq.n	8004f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d019      	beq.n	8004f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f06:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <HAL_RCC_OscConfig+0x274>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0c:	f7fd f9f4 	bl	80022f8 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f14:	f7fd f9f0 	bl	80022f8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e160      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_RCC_OscConfig+0x26c>)
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f32:	2001      	movs	r0, #1
 8004f34:	f000 faba 	bl	80054ac <RCC_Delay>
 8004f38:	e01c      	b.n	8004f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f40:	f7fd f9da 	bl	80022f8 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f46:	e00f      	b.n	8004f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f48:	f7fd f9d6 	bl	80022f8 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d908      	bls.n	8004f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e146      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	42420000 	.word	0x42420000
 8004f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	4b92      	ldr	r3, [pc, #584]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e9      	bne.n	8004f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80a6 	beq.w	80050ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b8b      	ldr	r3, [pc, #556]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	4b88      	ldr	r3, [pc, #544]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4a87      	ldr	r2, [pc, #540]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	61d3      	str	r3, [r2, #28]
 8004f9e:	4b85      	ldr	r3, [pc, #532]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b82      	ldr	r3, [pc, #520]	; (80051b8 <HAL_RCC_OscConfig+0x4c8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d118      	bne.n	8004fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fba:	4b7f      	ldr	r3, [pc, #508]	; (80051b8 <HAL_RCC_OscConfig+0x4c8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7e      	ldr	r2, [pc, #504]	; (80051b8 <HAL_RCC_OscConfig+0x4c8>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc6:	f7fd f997 	bl	80022f8 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fce:	f7fd f993 	bl	80022f8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b64      	cmp	r3, #100	; 0x64
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e103      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe0:	4b75      	ldr	r3, [pc, #468]	; (80051b8 <HAL_RCC_OscConfig+0x4c8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x312>
 8004ff4:	4b6f      	ldr	r3, [pc, #444]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	4a6e      	ldr	r2, [pc, #440]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6213      	str	r3, [r2, #32]
 8005000:	e02d      	b.n	800505e <HAL_RCC_OscConfig+0x36e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x334>
 800500a:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	6213      	str	r3, [r2, #32]
 8005016:	4b67      	ldr	r3, [pc, #412]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4a66      	ldr	r2, [pc, #408]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	6213      	str	r3, [r2, #32]
 8005022:	e01c      	b.n	800505e <HAL_RCC_OscConfig+0x36e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b05      	cmp	r3, #5
 800502a:	d10c      	bne.n	8005046 <HAL_RCC_OscConfig+0x356>
 800502c:	4b61      	ldr	r3, [pc, #388]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4a60      	ldr	r2, [pc, #384]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005032:	f043 0304 	orr.w	r3, r3, #4
 8005036:	6213      	str	r3, [r2, #32]
 8005038:	4b5e      	ldr	r3, [pc, #376]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	4a5d      	ldr	r2, [pc, #372]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6213      	str	r3, [r2, #32]
 8005044:	e00b      	b.n	800505e <HAL_RCC_OscConfig+0x36e>
 8005046:	4b5b      	ldr	r3, [pc, #364]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	4a5a      	ldr	r2, [pc, #360]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	6213      	str	r3, [r2, #32]
 8005052:	4b58      	ldr	r3, [pc, #352]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	4a57      	ldr	r2, [pc, #348]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	f023 0304 	bic.w	r3, r3, #4
 800505c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d015      	beq.n	8005092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005066:	f7fd f947 	bl	80022f8 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506c:	e00a      	b.n	8005084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506e:	f7fd f943 	bl	80022f8 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f241 3288 	movw	r2, #5000	; 0x1388
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e0b1      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	4b4b      	ldr	r3, [pc, #300]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ee      	beq.n	800506e <HAL_RCC_OscConfig+0x37e>
 8005090:	e014      	b.n	80050bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fd f931 	bl	80022f8 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005098:	e00a      	b.n	80050b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fd f92d 	bl	80022f8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e09b      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1ee      	bne.n	800509a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d105      	bne.n	80050ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4b3c      	ldr	r3, [pc, #240]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8087 	beq.w	80051e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d8:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 030c 	and.w	r3, r3, #12
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d061      	beq.n	80051a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d146      	bne.n	800517a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ec:	4b33      	ldr	r3, [pc, #204]	; (80051bc <HAL_RCC_OscConfig+0x4cc>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f2:	f7fd f901 	bl	80022f8 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fa:	f7fd f8fd 	bl	80022f8 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e06d      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510c:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1f0      	bne.n	80050fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d108      	bne.n	8005134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4921      	ldr	r1, [pc, #132]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a19      	ldr	r1, [r3, #32]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	430b      	orrs	r3, r1
 8005146:	491b      	ldr	r1, [pc, #108]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_RCC_OscConfig+0x4cc>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fd f8d1 	bl	80022f8 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd f8cd 	bl	80022f8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e03d      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x46a>
 8005178:	e035      	b.n	80051e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCC_OscConfig+0x4cc>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fd f8ba 	bl	80022f8 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd f8b6 	bl	80022f8 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e026      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x498>
 80051a6:	e01e      	b.n	80051e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e019      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40007000 	.word	0x40007000
 80051bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_OscConfig+0x500>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40021000 	.word	0x40021000

080051f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0d0      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d910      	bls.n	8005238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 0207 	bic.w	r2, r3, #7
 800521e:	4965      	ldr	r1, [pc, #404]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800525a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	494d      	ldr	r1, [pc, #308]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d040      	beq.n	8005314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e073      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06b      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4936      	ldr	r1, [pc, #216]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e4:	f7fd f808 	bl	80022f8 <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ec:	f7fd f804 	bl	80022f8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e053      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 020c 	and.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d210      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 0207 	bic.w	r2, r3, #7
 800532a:	4922      	ldr	r1, [pc, #136]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e032      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4916      	ldr	r1, [pc, #88]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005382:	f000 f821 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005386:	4602      	mov	r2, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	490a      	ldr	r1, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x1c8>)
 8005394:	5ccb      	ldrb	r3, [r1, r3]
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1cc>)
 800539c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1d0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fc ff66 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40022000 	.word	0x40022000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800bf58 	.word	0x0800bf58
 80053c0:	20000008 	.word	0x20000008
 80053c4:	2000000c 	.word	0x2000000c

080053c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053e2:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCC_GetSysClockFreq+0x94>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d002      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x30>
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d003      	beq.n	80053fe <HAL_RCC_GetSysClockFreq+0x36>
 80053f6:	e027      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_GetSysClockFreq+0x98>)
 80053fa:	613b      	str	r3, [r7, #16]
      break;
 80053fc:	e027      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	0c9b      	lsrs	r3, r3, #18
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005408:	5cd3      	ldrb	r3, [r2, r3]
 800540a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005416:	4b11      	ldr	r3, [pc, #68]	; (800545c <HAL_RCC_GetSysClockFreq+0x94>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	0c5b      	lsrs	r3, r3, #17
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	4a11      	ldr	r2, [pc, #68]	; (8005468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <HAL_RCC_GetSysClockFreq+0x98>)
 800542a:	fb03 f202 	mul.w	r2, r3, r2
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e004      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <HAL_RCC_GetSysClockFreq+0xa4>)
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	613b      	str	r3, [r7, #16]
      break;
 8005446:	e002      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetSysClockFreq+0x98>)
 800544a:	613b      	str	r3, [r7, #16]
      break;
 800544c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544e:	693b      	ldr	r3, [r7, #16]
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	007a1200 	.word	0x007a1200
 8005464:	0800bf70 	.word	0x0800bf70
 8005468:	0800bf80 	.word	0x0800bf80
 800546c:	003d0900 	.word	0x003d0900

08005470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005474:	4b02      	ldr	r3, [pc, #8]	; (8005480 <HAL_RCC_GetHCLKFreq+0x10>)
 8005476:	681b      	ldr	r3, [r3, #0]
}
 8005478:	4618      	mov	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	20000008 	.word	0x20000008

08005484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005488:	f7ff fff2 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4903      	ldr	r1, [pc, #12]	; (80054a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	0800bf68 	.word	0x0800bf68

080054ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054b4:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <RCC_Delay+0x34>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <RCC_Delay+0x38>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0a5b      	lsrs	r3, r3, #9
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054c8:	bf00      	nop
  }
  while (Delay --);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	60fa      	str	r2, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f9      	bne.n	80054c8 <RCC_Delay+0x1c>
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	20000008 	.word	0x20000008
 80054e4:	10624dd3 	.word	0x10624dd3

080054e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d07d      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005504:	2300      	movs	r3, #0
 8005506:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005508:	4b4f      	ldr	r3, [pc, #316]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10d      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b4c      	ldr	r3, [pc, #304]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4a4b      	ldr	r2, [pc, #300]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	61d3      	str	r3, [r2, #28]
 8005520:	4b49      	ldr	r3, [pc, #292]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	4b46      	ldr	r3, [pc, #280]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d118      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a42      	ldr	r2, [pc, #264]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005548:	f7fc fed6 	bl	80022f8 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554e:	e008      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005550:	f7fc fed2 	bl	80022f8 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e06d      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800556e:	4b36      	ldr	r3, [pc, #216]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02e      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	429a      	cmp	r2, r3
 800558a:	d027      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800558c:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005594:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005596:	4b2e      	ldr	r3, [pc, #184]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800559c:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055a2:	4a29      	ldr	r2, [pc, #164]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fc fea1 	bl	80022f8 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b8:	e00a      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ba:	f7fc fe9d 	bl	80022f8 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e036      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0ee      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4917      	ldr	r1, [pc, #92]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f4:	4b14      	ldr	r3, [pc, #80]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	4a13      	ldr	r2, [pc, #76]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d008      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	490b      	ldr	r1, [pc, #44]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	4904      	ldr	r1, [pc, #16]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
 800564c:	40007000 	.word	0x40007000
 8005650:	42420440 	.word	0x42420440

08005654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e041      	b.n	80056ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fd36 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fc5e 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d001      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e03a      	b.n	8005782 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_Base_Start_IT+0x98>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x58>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d009      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x58>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_TIM_Base_Start_IT+0x9c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x58>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a13      	ldr	r2, [pc, #76]	; (8005794 <HAL_TIM_Base_Start_IT+0xa0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d111      	bne.n	8005770 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b06      	cmp	r3, #6
 800575c:	d010      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	e007      	b.n	8005780 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800

08005798 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <HAL_TIM_Base_Stop_IT+0x48>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	f240 4344 	movw	r3, #1092	; 0x444
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_Base_Stop_IT+0x48>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e041      	b.n	800588a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f839 	bl	8005892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f000 fb8e 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <HAL_TIM_PWM_Start+0x24>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e022      	b.n	800590e <HAL_TIM_PWM_Start+0x6a>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d109      	bne.n	80058e2 <HAL_TIM_PWM_Start+0x3e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	bf14      	ite	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	2300      	moveq	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e015      	b.n	800590e <HAL_TIM_PWM_Start+0x6a>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d109      	bne.n	80058fc <HAL_TIM_PWM_Start+0x58>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e008      	b.n	800590e <HAL_TIM_PWM_Start+0x6a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e05e      	b.n	80059d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0x82>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005924:	e013      	b.n	800594e <HAL_TIM_PWM_Start+0xaa>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0x92>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005934:	e00b      	b.n	800594e <HAL_TIM_PWM_Start+0xaa>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005944:	e003      	b.n	800594e <HAL_TIM_PWM_Start+0xaa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fd7c 	bl	8006454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_TIM_PWM_Start+0x138>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d107      	bne.n	8005976 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_TIM_PWM_Start+0x138>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIM_PWM_Start+0xfa>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d009      	beq.n	800599e <HAL_TIM_PWM_Start+0xfa>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <HAL_TIM_PWM_Start+0x13c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIM_PWM_Start+0xfa>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <HAL_TIM_PWM_Start+0x140>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d111      	bne.n	80059c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d010      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c0:	e007      	b.n	80059d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800

080059e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0202 	mvn.w	r2, #2
 8005a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa76 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa69 	bl	8005f0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fa78 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0204 	mvn.w	r2, #4
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa4c 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa3f 	bl	8005f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa4e 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0208 	mvn.w	r2, #8
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa22 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa15 	bl	8005f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa24 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0210 	mvn.w	r2, #16
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2208      	movs	r2, #8
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9f8 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9eb 	bl	8005f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9fa 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10e      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0201 	mvn.w	r2, #1
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc f876 	bl	8001c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fce9 	bl	800656a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9be 	bl	8005f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0220 	mvn.w	r2, #32
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fcb4 	bl	8006558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0ae      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	f200 809f 	bhi.w	8005d64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005d65 	.word	0x08005d65
 8005c34:	08005d65 	.word	0x08005d65
 8005c38:	08005d65 	.word	0x08005d65
 8005c3c:	08005ca1 	.word	0x08005ca1
 8005c40:	08005d65 	.word	0x08005d65
 8005c44:	08005d65 	.word	0x08005d65
 8005c48:	08005d65 	.word	0x08005d65
 8005c4c:	08005ce3 	.word	0x08005ce3
 8005c50:	08005d65 	.word	0x08005d65
 8005c54:	08005d65 	.word	0x08005d65
 8005c58:	08005d65 	.word	0x08005d65
 8005c5c:	08005d23 	.word	0x08005d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f9d6 	bl	8006018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0204 	bic.w	r2, r2, #4
 8005c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6999      	ldr	r1, [r3, #24]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	619a      	str	r2, [r3, #24]
      break;
 8005c9e:	e064      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fa1c 	bl	80060e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6999      	ldr	r1, [r3, #24]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	619a      	str	r2, [r3, #24]
      break;
 8005ce0:	e043      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fa65 	bl	80061b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0208 	orr.w	r2, r2, #8
 8005cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0204 	bic.w	r2, r2, #4
 8005d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69d9      	ldr	r1, [r3, #28]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	61da      	str	r2, [r3, #28]
      break;
 8005d20:	e023      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 faaf 	bl	800628c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69d9      	ldr	r1, [r3, #28]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	021a      	lsls	r2, r3, #8
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	61da      	str	r2, [r3, #28]
      break;
 8005d62:	e002      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	75fb      	strb	r3, [r7, #23]
      break;
 8005d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_ConfigClockSource+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0b4      	b.n	8005f02 <HAL_TIM_ConfigClockSource+0x186>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd0:	d03e      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0xd4>
 8005dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd6:	f200 8087 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dde:	f000 8086 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x172>
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d87f      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b70      	cmp	r3, #112	; 0x70
 8005dea:	d01a      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0xa6>
 8005dec:	2b70      	cmp	r3, #112	; 0x70
 8005dee:	d87b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b60      	cmp	r3, #96	; 0x60
 8005df2:	d050      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x11a>
 8005df4:	2b60      	cmp	r3, #96	; 0x60
 8005df6:	d877      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b50      	cmp	r3, #80	; 0x50
 8005dfa:	d03c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0xfa>
 8005dfc:	2b50      	cmp	r3, #80	; 0x50
 8005dfe:	d873      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d058      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d86f      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d064      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e0c:	2b30      	cmp	r3, #48	; 0x30
 8005e0e:	d86b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d060      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d867      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d05c      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d05a      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e20:	e062      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e32:	f000 faf0 	bl	8006416 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	609a      	str	r2, [r3, #8]
      break;
 8005e4e:	e04f      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e60:	f000 fad9 	bl	8006416 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e72:	609a      	str	r2, [r3, #8]
      break;
 8005e74:	e03c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e82:	461a      	mov	r2, r3
 8005e84:	f000 fa50 	bl	8006328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2150      	movs	r1, #80	; 0x50
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 faa7 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005e94:	e02c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f000 fa6e 	bl	8006384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2160      	movs	r1, #96	; 0x60
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fa97 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005eb4:	e01c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 fa30 	bl	8006328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2140      	movs	r1, #64	; 0x40
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fa87 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e00c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f000 fa7e 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005ee6:	e003      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      break;
 8005eec:	e000      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
	...

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a29      	ldr	r2, [pc, #164]	; (800600c <TIM_Base_SetConfig+0xb8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <TIM_Base_SetConfig+0x30>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d007      	beq.n	8005f84 <TIM_Base_SetConfig+0x30>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a26      	ldr	r2, [pc, #152]	; (8006010 <TIM_Base_SetConfig+0xbc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0x30>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a25      	ldr	r2, [pc, #148]	; (8006014 <TIM_Base_SetConfig+0xc0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d108      	bne.n	8005f96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	; (800600c <TIM_Base_SetConfig+0xb8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_Base_SetConfig+0x62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d007      	beq.n	8005fb6 <TIM_Base_SetConfig+0x62>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <TIM_Base_SetConfig+0xbc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_Base_SetConfig+0x62>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	; (8006014 <TIM_Base_SetConfig+0xc0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <TIM_Base_SetConfig+0xb8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d103      	bne.n	8005ffc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800

08006018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f023 0201 	bic.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0302 	bic.w	r3, r3, #2
 8006060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a1c      	ldr	r2, [pc, #112]	; (80060e0 <TIM_OC1_SetConfig+0xc8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d10c      	bne.n	800608e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 0308 	bic.w	r3, r3, #8
 800607a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f023 0304 	bic.w	r3, r3, #4
 800608c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <TIM_OC1_SetConfig+0xc8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d111      	bne.n	80060ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	621a      	str	r2, [r3, #32]
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00

080060e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0210 	bic.w	r2, r3, #16
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0320 	bic.w	r3, r3, #32
 800612e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <TIM_OC2_SetConfig+0xd0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10d      	bne.n	8006160 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800614a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <TIM_OC2_SetConfig+0xd0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d113      	bne.n	8006190 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	40012c00 	.word	0x40012c00

080061b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <TIM_OC3_SetConfig+0xd0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d10d      	bne.n	8006232 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a14      	ldr	r2, [pc, #80]	; (8006288 <TIM_OC3_SetConfig+0xd0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d113      	bne.n	8006262 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	621a      	str	r2, [r3, #32]
}
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40012c00 	.word	0x40012c00

0800628c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <TIM_OC4_SetConfig+0x98>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d109      	bne.n	8006300 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	019b      	lsls	r3, r3, #6
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00

08006328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f023 0201 	bic.w	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f023 030a 	bic.w	r3, r3, #10
 8006364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0210 	bic.w	r2, r3, #16
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	031b      	lsls	r3, r3, #12
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	f043 0307 	orr.w	r3, r3, #7
 8006404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006416:	b480      	push	{r7}
 8006418:	b087      	sub	sp, #28
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	021a      	lsls	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	431a      	orrs	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	609a      	str	r2, [r3, #8]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2201      	movs	r2, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e046      	b.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a16      	ldr	r2, [pc, #88]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d009      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a10      	ldr	r2, [pc, #64]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10c      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800

08006558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800657c:	b084      	sub	sp, #16
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	f107 0014 	add.w	r0, r7, #20
 800658a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	b004      	add	sp, #16
 800659a:	4770      	bx	lr

0800659c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	4013      	ands	r3, r2
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006614:	b084      	sub	sp, #16
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	f107 0014 	add.w	r0, r7, #20
 8006622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	bc80      	pop	{r7}
 8006650:	b004      	add	sp, #16
 8006652:	4770      	bx	lr

08006654 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006654:	b480      	push	{r7}
 8006656:	b09d      	sub	sp, #116	; 0x74
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d81f      	bhi.n	80066c6 <USB_ActivateEndpoint+0x72>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <USB_ActivateEndpoint+0x38>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066cf 	.word	0x080066cf
 8006698:	080066ab 	.word	0x080066ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800669c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80066a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80066a8:	e012      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80066ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80066b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80066b6:	e00b      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80066bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80066c4:	e004      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80066cc:	e000      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>
      break;
 80066ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	b29a      	uxth	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	7b1b      	ldrb	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 8178 	bne.w	8006a32 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8084 	beq.w	8006854 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	4413      	add	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	88db      	ldrh	r3, [r3, #6]
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	827b      	strh	r3, [r7, #18]
 800678e:	8a7b      	ldrh	r3, [r7, #18]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <USB_ActivateEndpoint+0x17c>
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	823b      	strh	r3, [r7, #16]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	8a3b      	ldrh	r3, [r7, #16]
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	78db      	ldrb	r3, [r3, #3]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d020      	beq.n	800681a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ee:	81bb      	strh	r3, [r7, #12]
 80067f0:	89bb      	ldrh	r3, [r7, #12]
 80067f2:	f083 0320 	eor.w	r3, r3, #32
 80067f6:	81bb      	strh	r3, [r7, #12]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	89bb      	ldrh	r3, [r7, #12]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
 8006818:	e2d5      	b.n	8006dc6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006830:	81fb      	strh	r3, [r7, #14]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	89fb      	ldrh	r3, [r7, #14]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
 8006852:	e2b8      	b.n	8006dc6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	633b      	str	r3, [r7, #48]	; 0x30
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	4413      	add	r3, r2
 8006866:	633b      	str	r3, [r7, #48]	; 0x30
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	011a      	lsls	r2, r3, #4
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	4413      	add	r3, r2
 8006872:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	88db      	ldrh	r3, [r3, #6]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	4413      	add	r3, r2
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	011a      	lsls	r2, r3, #4
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b3e      	cmp	r3, #62	; 0x3e
 80068c2:	d91d      	bls.n	8006900 <USB_ActivateEndpoint+0x2ac>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <USB_ActivateEndpoint+0x28a>
 80068d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068da:	3b01      	subs	r3, #1
 80068dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4313      	orrs	r3, r2
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	e026      	b.n	800694e <USB_ActivateEndpoint+0x2fa>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <USB_ActivateEndpoint+0x2ca>
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006916:	b29a      	uxth	r2, r3
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e017      	b.n	800694e <USB_ActivateEndpoint+0x2fa>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	66bb      	str	r3, [r7, #104]	; 0x68
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <USB_ActivateEndpoint+0x2e4>
 8006932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006934:	3301      	adds	r3, #1
 8006936:	66bb      	str	r3, [r7, #104]	; 0x68
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006940:	b29b      	uxth	r3, r3
 8006942:	029b      	lsls	r3, r3, #10
 8006944:	b29b      	uxth	r3, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	b29a      	uxth	r2, r3
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	847b      	strh	r3, [r7, #34]	; 0x22
 800695c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800695e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <USB_ActivateEndpoint+0x34a>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	843b      	strh	r3, [r7, #32]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	8c3b      	ldrh	r3, [r7, #32]
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d124      	bne.n	80069f0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069bc:	83bb      	strh	r3, [r7, #28]
 80069be:	8bbb      	ldrh	r3, [r7, #28]
 80069c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069c4:	83bb      	strh	r3, [r7, #28]
 80069c6:	8bbb      	ldrh	r3, [r7, #28]
 80069c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069cc:	83bb      	strh	r3, [r7, #28]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	8bbb      	ldrh	r3, [r7, #28]
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
 80069ee:	e1ea      	b.n	8006dc6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	83fb      	strh	r3, [r7, #30]
 8006a08:	8bfb      	ldrh	r3, [r7, #30]
 8006a0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a0e:	83fb      	strh	r3, [r7, #30]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8bfb      	ldrh	r3, [r7, #30]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
 8006a30:	e1c9      	b.n	8006dc6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	78db      	ldrb	r3, [r3, #3]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d11e      	bne.n	8006a78 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	441a      	add	r2, r3
 8006a5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	8013      	strh	r3, [r2, #0]
 8006a76:	e01d      	b.n	8006ab4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac4:	4413      	add	r3, r2
 8006ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	011a      	lsls	r2, r3, #4
 8006ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	891b      	ldrh	r3, [r3, #8]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	657b      	str	r3, [r7, #84]	; 0x54
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af8:	4413      	add	r3, r2
 8006afa:	657b      	str	r3, [r7, #84]	; 0x54
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	011a      	lsls	r2, r3, #4
 8006b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	895b      	ldrh	r3, [r3, #10]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 8093 	bne.w	8006c4c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01b      	beq.n	8006b7a <USB_ActivateEndpoint+0x526>
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006b88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01b      	beq.n	8006bca <USB_ActivateEndpoint+0x576>
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006be2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be8:	873b      	strh	r3, [r7, #56]	; 0x38
 8006bea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bf0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	441a      	add	r2, r3
 8006bfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]
 8006c4a:	e0bc      	b.n	8006dc6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01d      	beq.n	8006ca4 <USB_ActivateEndpoint+0x650>
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01d      	beq.n	8006cfc <USB_ActivateEndpoint+0x6a8>
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	441a      	add	r2, r3
 8006ce4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	78db      	ldrb	r3, [r3, #3]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d024      	beq.n	8006d4e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006d1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d22:	f083 0320 	eor.w	r3, r3, #32
 8006d26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	441a      	add	r2, r3
 8006d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	8013      	strh	r3, [r2, #0]
 8006d4c:	e01d      	b.n	8006d8a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	441a      	add	r2, r3
 8006dae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006dc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3774      	adds	r7, #116	; 0x74
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b08d      	sub	sp, #52	; 0x34
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	7b1b      	ldrb	r3, [r3, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 808e 	bne.w	8006f04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d044      	beq.n	8006e7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	81bb      	strh	r3, [r7, #12]
 8006dfe:	89bb      	ldrh	r3, [r7, #12]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <USB_DeactivateEndpoint+0x6c>
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	817b      	strh	r3, [r7, #10]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	441a      	add	r2, r3
 8006e2a:	897b      	ldrh	r3, [r7, #10]
 8006e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e56:	813b      	strh	r3, [r7, #8]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
 8006e78:	e192      	b.n	80071a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	827b      	strh	r3, [r7, #18]
 8006e88:	8a7b      	ldrh	r3, [r7, #18]
 8006e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01b      	beq.n	8006eca <USB_DeactivateEndpoint+0xf6>
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea8:	823b      	strh	r3, [r7, #16]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	8a3b      	ldrh	r3, [r7, #16]
 8006eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee0:	81fb      	strh	r3, [r7, #14]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	89fb      	ldrh	r3, [r7, #14]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
 8006f02:	e14d      	b.n	80071a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f040 80a5 	bne.w	8007058 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	843b      	strh	r3, [r7, #32]
 8006f1c:	8c3b      	ldrh	r3, [r7, #32]
 8006f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01b      	beq.n	8006f5e <USB_DeactivateEndpoint+0x18a>
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3c:	83fb      	strh	r3, [r7, #30]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	8bfb      	ldrh	r3, [r7, #30]
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	83bb      	strh	r3, [r7, #28]
 8006f6c:	8bbb      	ldrh	r3, [r7, #28]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01b      	beq.n	8006fae <USB_DeactivateEndpoint+0x1da>
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8c:	837b      	strh	r3, [r7, #26]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	8b7b      	ldrh	r3, [r7, #26]
 8006f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	833b      	strh	r3, [r7, #24]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	8b3b      	ldrh	r3, [r7, #24]
 8006fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffc:	82fb      	strh	r3, [r7, #22]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	8afb      	ldrh	r3, [r7, #22]
 800700a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007034:	82bb      	strh	r3, [r7, #20]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	441a      	add	r2, r3
 8007040:	8abb      	ldrh	r3, [r7, #20]
 8007042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007052:	b29b      	uxth	r3, r3
 8007054:	8013      	strh	r3, [r2, #0]
 8007056:	e0a3      	b.n	80071a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01b      	beq.n	80070a8 <USB_DeactivateEndpoint+0x2d4>
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80070b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01b      	beq.n	80070f8 <USB_DeactivateEndpoint+0x324>
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800711c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712c:	b29b      	uxth	r3, r3
 800712e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007146:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	441a      	add	r2, r3
 8007152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007164:	b29b      	uxth	r3, r3
 8007166:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800718c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719c:	b29b      	uxth	r3, r3
 800719e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3734      	adds	r7, #52	; 0x34
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b0c2      	sub	sp, #264	; 0x108
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ba:	6018      	str	r0, [r3, #0]
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	f040 86b7 	bne.w	8007f46 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699a      	ldr	r2, [r3, #24]
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d908      	bls.n	8007206 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007204:	e007      	b.n	8007216 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	7b1b      	ldrb	r3, [r3, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d13a      	bne.n	800729c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6959      	ldr	r1, [r3, #20]
 8007232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	88da      	ldrh	r2, [r3, #6]
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007242:	b29b      	uxth	r3, r3
 8007244:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007248:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800724c:	6800      	ldr	r0, [r0, #0]
 800724e:	f001 fc9c 	bl	8008b8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726c:	b29b      	uxth	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	011a      	lsls	r2, r3, #4
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	f000 be1f 	b.w	8007eda <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	78db      	ldrb	r3, [r3, #3]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f040 8462 	bne.w	8007b72 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6a1a      	ldr	r2, [r3, #32]
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	f240 83df 	bls.w	8007a8a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007324:	b29b      	uxth	r3, r3
 8007326:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 81c7 	beq.w	80076fc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800736e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	633b      	str	r3, [r7, #48]	; 0x30
 800737a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d177      	bne.n	800747a <USB_EPStartXfer+0x2ce>
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
 8007396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	4413      	add	r3, r2
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	011a      	lsls	r2, r3, #4
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	4413      	add	r3, r2
 80073c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	2b3e      	cmp	r3, #62	; 0x3e
 80073dc:	d921      	bls.n	8007422 <USB_EPStartXfer+0x276>
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USB_EPStartXfer+0x252>
 80073f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073f8:	3b01      	subs	r3, #1
 80073fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29a      	uxth	r2, r3
 8007404:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007408:	b29b      	uxth	r3, r3
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	b29b      	uxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741a:	b29a      	uxth	r2, r3
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e050      	b.n	80074c4 <USB_EPStartXfer+0x318>
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <USB_EPStartXfer+0x294>
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007438:	b29a      	uxth	r2, r3
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e041      	b.n	80074c4 <USB_EPStartXfer+0x318>
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <USB_EPStartXfer+0x2b4>
 8007456:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800745a:	3301      	adds	r3, #1
 800745c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800746a:	b29b      	uxth	r3, r3
 800746c:	029b      	lsls	r3, r3, #10
 800746e:	b29b      	uxth	r3, r3
 8007470:	4313      	orrs	r3, r2
 8007472:	b29a      	uxth	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e024      	b.n	80074c4 <USB_EPStartXfer+0x318>
 800747a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d11c      	bne.n	80074c4 <USB_EPStartXfer+0x318>
 800748a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007498:	b29b      	uxth	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	4413      	add	r3, r2
 80074a0:	633b      	str	r3, [r7, #48]	; 0x30
 80074a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	011a      	lsls	r2, r3, #4
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	4413      	add	r3, r2
 80074b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	b29a      	uxth	r2, r3
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	895b      	ldrh	r3, [r3, #10]
 80074d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6959      	ldr	r1, [r3, #20]
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074f2:	6800      	ldr	r0, [r0, #0]
 80074f4:	f001 fb49 	bl	8008b8a <USB_WritePMA>
            ep->xfer_buff += len;
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695a      	ldr	r2, [r3, #20]
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	441a      	add	r2, r3
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	429a      	cmp	r2, r3
 8007530:	d90f      	bls.n	8007552 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	621a      	str	r2, [r3, #32]
 8007550:	e00e      	b.n	8007570 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2200      	movs	r2, #0
 800756e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d177      	bne.n	8007670 <USB_EPStartXfer+0x4c4>
 8007580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	4413      	add	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	011a      	lsls	r2, r3, #4
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	4413      	add	r3, r2
 80075b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d0:	2b3e      	cmp	r3, #62	; 0x3e
 80075d2:	d921      	bls.n	8007618 <USB_EPStartXfer+0x46c>
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <USB_EPStartXfer+0x448>
 80075ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ee:	3b01      	subs	r3, #1
 80075f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075fe:	b29b      	uxth	r3, r3
 8007600:	029b      	lsls	r3, r3, #10
 8007602:	b29b      	uxth	r3, r3
 8007604:	4313      	orrs	r3, r2
 8007606:	b29b      	uxth	r3, r3
 8007608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007610:	b29a      	uxth	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e056      	b.n	80076c6 <USB_EPStartXfer+0x51a>
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <USB_EPStartXfer+0x48a>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762e:	b29a      	uxth	r2, r3
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e047      	b.n	80076c6 <USB_EPStartXfer+0x51a>
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <USB_EPStartXfer+0x4aa>
 800764c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007650:	3301      	adds	r3, #1
 8007652:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29a      	uxth	r2, r3
 800765c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007660:	b29b      	uxth	r3, r3
 8007662:	029b      	lsls	r3, r3, #10
 8007664:	b29b      	uxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e02a      	b.n	80076c6 <USB_EPStartXfer+0x51a>
 8007670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d122      	bne.n	80076c6 <USB_EPStartXfer+0x51a>
 8007680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	623b      	str	r3, [r7, #32]
 800768c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769a:	b29b      	uxth	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	4413      	add	r3, r2
 80076a2:	623b      	str	r3, [r7, #32]
 80076a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	011a      	lsls	r2, r3, #4
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	4413      	add	r3, r2
 80076b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	891b      	ldrh	r3, [r3, #8]
 80076d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6959      	ldr	r1, [r3, #20]
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076f4:	6800      	ldr	r0, [r0, #0]
 80076f6:	f001 fa48 	bl	8008b8a <USB_WritePMA>
 80076fa:	e3ee      	b.n	8007eda <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d177      	bne.n	80077fc <USB_EPStartXfer+0x650>
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	64bb      	str	r3, [r7, #72]	; 0x48
 8007718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007726:	b29b      	uxth	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772c:	4413      	add	r3, r2
 800772e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	011a      	lsls	r2, r3, #4
 800773e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007740:	4413      	add	r3, r2
 8007742:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
 8007748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007752:	b29a      	uxth	r2, r3
 8007754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775c:	2b3e      	cmp	r3, #62	; 0x3e
 800775e:	d921      	bls.n	80077a4 <USB_EPStartXfer+0x5f8>
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <USB_EPStartXfer+0x5d4>
 8007776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800777a:	3b01      	subs	r3, #1
 800777c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29b      	uxth	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b29b      	uxth	r3, r3
 8007794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779c:	b29a      	uxth	r2, r3
 800779e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e056      	b.n	8007852 <USB_EPStartXfer+0x6a6>
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <USB_EPStartXfer+0x616>
 80077ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	e047      	b.n	8007852 <USB_EPStartXfer+0x6a6>
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <USB_EPStartXfer+0x636>
 80077d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077dc:	3301      	adds	r3, #1
 80077de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	029b      	lsls	r3, r3, #10
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	4313      	orrs	r3, r2
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	e02a      	b.n	8007852 <USB_EPStartXfer+0x6a6>
 80077fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d122      	bne.n	8007852 <USB_EPStartXfer+0x6a6>
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	653b      	str	r3, [r7, #80]	; 0x50
 8007818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782c:	4413      	add	r3, r2
 800782e:	653b      	str	r3, [r7, #80]	; 0x50
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	011a      	lsls	r2, r3, #4
 800783e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007840:	4413      	add	r3, r2
 8007842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800784c:	b29a      	uxth	r2, r3
 800784e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007850:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	891b      	ldrh	r3, [r3, #8]
 800785e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6959      	ldr	r1, [r3, #20]
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007872:	b29b      	uxth	r3, r3
 8007874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007878:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800787c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007880:	6800      	ldr	r0, [r0, #0]
 8007882:	f001 f982 	bl	8008b8a <USB_WritePMA>
            ep->xfer_buff += len;
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007896:	441a      	add	r2, r3
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6a1a      	ldr	r2, [r3, #32]
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d90f      	bls.n	80078e0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6a1a      	ldr	r2, [r3, #32]
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	621a      	str	r2, [r3, #32]
 80078de:	e00e      	b.n	80078fe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80078f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	643b      	str	r3, [r7, #64]	; 0x40
 800790a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d177      	bne.n	8007a0a <USB_EPStartXfer+0x85e>
 800791a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007934:	b29b      	uxth	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	4413      	add	r3, r2
 800793c:	63bb      	str	r3, [r7, #56]	; 0x38
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	011a      	lsls	r2, r3, #4
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	4413      	add	r3, r2
 8007950:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007960:	b29a      	uxth	r2, r3
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796a:	2b3e      	cmp	r3, #62	; 0x3e
 800796c:	d921      	bls.n	80079b2 <USB_EPStartXfer+0x806>
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <USB_EPStartXfer+0x7e2>
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	3b01      	subs	r3, #1
 800798a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29a      	uxth	r2, r3
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007998:	b29b      	uxth	r3, r3
 800799a:	029b      	lsls	r3, r3, #10
 800799c:	b29b      	uxth	r3, r3
 800799e:	4313      	orrs	r3, r2
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	e050      	b.n	8007a54 <USB_EPStartXfer+0x8a8>
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <USB_EPStartXfer+0x824>
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e041      	b.n	8007a54 <USB_EPStartXfer+0x8a8>
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	085b      	lsrs	r3, r3, #1
 80079d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USB_EPStartXfer+0x844>
 80079e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ea:	3301      	adds	r3, #1
 80079ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	029b      	lsls	r3, r3, #10
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4313      	orrs	r3, r2
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e024      	b.n	8007a54 <USB_EPStartXfer+0x8a8>
 8007a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d11c      	bne.n	8007a54 <USB_EPStartXfer+0x8a8>
 8007a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a2e:	4413      	add	r3, r2
 8007a30:	643b      	str	r3, [r7, #64]	; 0x40
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	011a      	lsls	r2, r3, #4
 8007a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a42:	4413      	add	r3, r2
 8007a44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	895b      	ldrh	r3, [r3, #10]
 8007a60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6959      	ldr	r1, [r3, #20]
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	f001 f881 	bl	8008b8a <USB_WritePMA>
 8007a88:	e227      	b.n	8007eda <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	441a      	add	r2, r3
 8007ade:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b16:	4413      	add	r3, r2
 8007b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	011a      	lsls	r2, r3, #4
 8007b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b30:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	891b      	ldrh	r3, [r3, #8]
 8007b48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6959      	ldr	r1, [r3, #20]
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	f001 f80d 	bl	8008b8a <USB_WritePMA>
 8007b70:	e1b3      	b.n	8007eda <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b82:	1ad2      	subs	r2, r2, r3
 8007b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80c6 	beq.w	8007d44 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d177      	bne.n	8007cc4 <USB_EPStartXfer+0xb18>
 8007bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8007be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bf4:	4413      	add	r3, r2
 8007bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	011a      	lsls	r2, r3, #4
 8007c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c08:	4413      	add	r3, r2
 8007c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c24:	2b3e      	cmp	r3, #62	; 0x3e
 8007c26:	d921      	bls.n	8007c6c <USB_EPStartXfer+0xac0>
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <USB_EPStartXfer+0xa9c>
 8007c3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c42:	3b01      	subs	r3, #1
 8007c44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	029b      	lsls	r3, r3, #10
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	e050      	b.n	8007d0e <USB_EPStartXfer+0xb62>
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <USB_EPStartXfer+0xade>
 8007c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	e041      	b.n	8007d0e <USB_EPStartXfer+0xb62>
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d004      	beq.n	8007caa <USB_EPStartXfer+0xafe>
 8007ca0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	029b      	lsls	r3, r3, #10
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	e024      	b.n	8007d0e <USB_EPStartXfer+0xb62>
 8007cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	785b      	ldrb	r3, [r3, #1]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d11c      	bne.n	8007d0e <USB_EPStartXfer+0xb62>
 8007cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce8:	4413      	add	r3, r2
 8007cea:	673b      	str	r3, [r7, #112]	; 0x70
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	011a      	lsls	r2, r3, #4
 8007cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	895b      	ldrh	r3, [r3, #10]
 8007d1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6959      	ldr	r1, [r3, #20]
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f000 ff24 	bl	8008b8a <USB_WritePMA>
 8007d42:	e0ca      	b.n	8007eda <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d177      	bne.n	8007e44 <USB_EPStartXfer+0xc98>
 8007d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d74:	4413      	add	r3, r2
 8007d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	011a      	lsls	r2, r3, #4
 8007d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d88:	4413      	add	r3, r2
 8007d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da4:	2b3e      	cmp	r3, #62	; 0x3e
 8007da6:	d921      	bls.n	8007dec <USB_EPStartXfer+0xc40>
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db6:	f003 031f 	and.w	r3, r3, #31
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d104      	bne.n	8007dc8 <USB_EPStartXfer+0xc1c>
 8007dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	029b      	lsls	r3, r3, #10
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e05c      	b.n	8007ea6 <USB_EPStartXfer+0xcfa>
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <USB_EPStartXfer+0xc5e>
 8007df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	e04d      	b.n	8007ea6 <USB_EPStartXfer+0xcfa>
 8007e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <USB_EPStartXfer+0xc7e>
 8007e20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e24:	3301      	adds	r3, #1
 8007e26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e40:	801a      	strh	r2, [r3, #0]
 8007e42:	e030      	b.n	8007ea6 <USB_EPStartXfer+0xcfa>
 8007e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d128      	bne.n	8007ea6 <USB_EPStartXfer+0xcfa>
 8007e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e78:	4413      	add	r3, r2
 8007e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	011a      	lsls	r2, r3, #4
 8007e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e90:	4413      	add	r3, r2
 8007e92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ea4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	891b      	ldrh	r3, [r3, #8]
 8007eb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6959      	ldr	r1, [r3, #20]
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ecc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ed0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ed4:	6800      	ldr	r0, [r0, #0]
 8007ed6:	f000 fe58 	bl	8008b8a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f00:	817b      	strh	r3, [r7, #10]
 8007f02:	897b      	ldrh	r3, [r7, #10]
 8007f04:	f083 0310 	eor.w	r3, r3, #16
 8007f08:	817b      	strh	r3, [r7, #10]
 8007f0a:	897b      	ldrh	r3, [r7, #10]
 8007f0c:	f083 0320 	eor.w	r3, r3, #32
 8007f10:	817b      	strh	r3, [r7, #10]
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	897b      	ldrh	r3, [r7, #10]
 8007f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8013      	strh	r3, [r2, #0]
 8007f42:	f000 bcde 	b.w	8008902 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	7b1b      	ldrb	r3, [r3, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f040 80bb 	bne.w	80080ce <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	699a      	ldr	r2, [r3, #24]
 8007f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d917      	bls.n	8007fa4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f94:	1ad2      	subs	r2, r2, r3
 8007f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	619a      	str	r2, [r3, #24]
 8007fa2:	e00e      	b.n	8007fc2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	011a      	lsls	r2, r3, #4
 8007ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ffe:	4413      	add	r3, r2
 8008000:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008014:	b29a      	uxth	r2, r3
 8008016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801a:	801a      	strh	r2, [r3, #0]
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008020:	2b3e      	cmp	r3, #62	; 0x3e
 8008022:	d924      	bls.n	800806e <USB_EPStartXfer+0xec2>
 8008024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <USB_EPStartXfer+0xe98>
 800803a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800803e:	3b01      	subs	r3, #1
 8008040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29a      	uxth	r2, r3
 800804c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008050:	b29b      	uxth	r3, r3
 8008052:	029b      	lsls	r3, r3, #10
 8008054:	b29b      	uxth	r3, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	b29b      	uxth	r3, r3
 800805a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008062:	b29a      	uxth	r2, r3
 8008064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	f000 bc10 	b.w	800888e <USB_EPStartXfer+0x16e2>
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10c      	bne.n	8008090 <USB_EPStartXfer+0xee4>
 8008076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008086:	b29a      	uxth	r2, r3
 8008088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	e3fe      	b.n	800888e <USB_EPStartXfer+0x16e2>
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d004      	beq.n	80080b0 <USB_EPStartXfer+0xf04>
 80080a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080aa:	3301      	adds	r3, #1
 80080ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080bc:	b29b      	uxth	r3, r3
 80080be:	029b      	lsls	r3, r3, #10
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	4313      	orrs	r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	e3df      	b.n	800888e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	f040 8218 	bne.w	8008510 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80080e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 809d 	bne.w	800822c <USB_EPStartXfer+0x1080>
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008116:	4413      	add	r3, r2
 8008118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	011a      	lsls	r2, r3, #4
 800812a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800812e:	4413      	add	r3, r2
 8008130:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008144:	b29a      	uxth	r2, r3
 8008146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b3e      	cmp	r3, #62	; 0x3e
 800815a:	d92b      	bls.n	80081b4 <USB_EPStartXfer+0x1008>
 800815c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <USB_EPStartXfer+0xfe0>
 8008182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008186:	3b01      	subs	r3, #1
 8008188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800818c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29a      	uxth	r2, r3
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	b29b      	uxth	r3, r3
 800819a:	029b      	lsls	r3, r3, #10
 800819c:	b29b      	uxth	r3, r3
 800819e:	4313      	orrs	r3, r2
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	e070      	b.n	8008296 <USB_EPStartXfer+0x10ea>
 80081b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10c      	bne.n	80081de <USB_EPStartXfer+0x1032>
 80081c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	e05b      	b.n	8008296 <USB_EPStartXfer+0x10ea>
 80081de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <USB_EPStartXfer+0x1062>
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008208:	3301      	adds	r3, #1
 800820a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800820e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	b29b      	uxth	r3, r3
 800821c:	029b      	lsls	r3, r3, #10
 800821e:	b29b      	uxth	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008228:	801a      	strh	r2, [r3, #0]
 800822a:	e034      	b.n	8008296 <USB_EPStartXfer+0x10ea>
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d12c      	bne.n	8008296 <USB_EPStartXfer+0x10ea>
 800823c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008258:	b29b      	uxth	r3, r3
 800825a:	461a      	mov	r2, r3
 800825c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008260:	4413      	add	r3, r2
 8008262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	011a      	lsls	r2, r3, #4
 8008274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008278:	4413      	add	r3, r2
 800827a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800827e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	b29a      	uxth	r2, r3
 8008290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 809d 	bne.w	80083f0 <USB_EPStartXfer+0x1244>
 80082b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082da:	4413      	add	r3, r2
 80082dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	011a      	lsls	r2, r3, #4
 80082ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f2:	4413      	add	r3, r2
 80082f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008308:	b29a      	uxth	r2, r3
 800830a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b3e      	cmp	r3, #62	; 0x3e
 800831e:	d92b      	bls.n	8008378 <USB_EPStartXfer+0x11cc>
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 031f 	and.w	r3, r3, #31
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <USB_EPStartXfer+0x11a4>
 8008346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834a:	3b01      	subs	r3, #1
 800834c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835c:	b29b      	uxth	r3, r3
 800835e:	029b      	lsls	r3, r3, #10
 8008360:	b29b      	uxth	r3, r3
 8008362:	4313      	orrs	r3, r2
 8008364:	b29b      	uxth	r3, r3
 8008366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836e:	b29a      	uxth	r2, r3
 8008370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	e069      	b.n	800844c <USB_EPStartXfer+0x12a0>
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <USB_EPStartXfer+0x11f6>
 8008388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e054      	b.n	800844c <USB_EPStartXfer+0x12a0>
 80083a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	085b      	lsrs	r3, r3, #1
 80083b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <USB_EPStartXfer+0x1226>
 80083c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083cc:	3301      	adds	r3, #1
 80083ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	4313      	orrs	r3, r2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e02d      	b.n	800844c <USB_EPStartXfer+0x12a0>
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	785b      	ldrb	r3, [r3, #1]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d125      	bne.n	800844c <USB_EPStartXfer+0x12a0>
 8008400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840e:	b29b      	uxth	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008416:	4413      	add	r3, r2
 8008418:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	011a      	lsls	r2, r3, #4
 800842a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800842e:	4413      	add	r3, r2
 8008430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800844a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800844c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8218 	beq.w	800888e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800845e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800847e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <USB_EPStartXfer+0x12ea>
 800848a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10d      	bne.n	80084b2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008496:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800849a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f040 81f5 	bne.w	800888e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80084a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 81ee 	bne.w	800888e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80084b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80084dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	441a      	add	r2, r3
 80084f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80084fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800850a:	b29b      	uxth	r3, r3
 800850c:	8013      	strh	r3, [r2, #0]
 800850e:	e1be      	b.n	800888e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	2b01      	cmp	r3, #1
 800851e:	f040 81b4 	bne.w	800888a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	429a      	cmp	r2, r3
 800853c:	d917      	bls.n	800856e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800853e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800854e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800855e:	1ad2      	subs	r2, r2, r3
 8008560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	619a      	str	r2, [r3, #24]
 800856c:	e00e      	b.n	800858c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800856e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800857e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800858c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 8085 	bne.w	80086a8 <USB_EPStartXfer+0x14fc>
 800859e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80085c2:	4413      	add	r3, r2
 80085c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	011a      	lsls	r2, r3, #4
 80085d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80085da:	4413      	add	r3, r2
 80085dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fc:	2b3e      	cmp	r3, #62	; 0x3e
 80085fe:	d923      	bls.n	8008648 <USB_EPStartXfer+0x149c>
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <USB_EPStartXfer+0x1474>
 8008616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800861a:	3b01      	subs	r3, #1
 800861c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29a      	uxth	r2, r3
 8008628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800862c:	b29b      	uxth	r3, r3
 800862e:	029b      	lsls	r3, r3, #10
 8008630:	b29b      	uxth	r3, r3
 8008632:	4313      	orrs	r3, r2
 8008634:	b29b      	uxth	r3, r3
 8008636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	e060      	b.n	800870a <USB_EPStartXfer+0x155e>
 8008648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10c      	bne.n	800866a <USB_EPStartXfer+0x14be>
 8008650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008660:	b29a      	uxth	r2, r3
 8008662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008666:	801a      	strh	r2, [r3, #0]
 8008668:	e04f      	b.n	800870a <USB_EPStartXfer+0x155e>
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <USB_EPStartXfer+0x14de>
 8008680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008684:	3301      	adds	r3, #1
 8008686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800868a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008696:	b29b      	uxth	r3, r3
 8008698:	029b      	lsls	r3, r3, #10
 800869a:	b29b      	uxth	r3, r3
 800869c:	4313      	orrs	r3, r2
 800869e:	b29a      	uxth	r2, r3
 80086a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e030      	b.n	800870a <USB_EPStartXfer+0x155e>
 80086a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d128      	bne.n	800870a <USB_EPStartXfer+0x155e>
 80086b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086dc:	4413      	add	r3, r2
 80086de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80086e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	011a      	lsls	r2, r3, #4
 80086f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086f4:	4413      	add	r3, r2
 80086f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008708:	801a      	strh	r2, [r3, #0]
 800870a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f040 8085 	bne.w	8008834 <USB_EPStartXfer+0x1688>
 800872a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008746:	b29b      	uxth	r3, r3
 8008748:	461a      	mov	r2, r3
 800874a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800874e:	4413      	add	r3, r2
 8008750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	011a      	lsls	r2, r3, #4
 8008762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008766:	4413      	add	r3, r2
 8008768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800876c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008788:	2b3e      	cmp	r3, #62	; 0x3e
 800878a:	d923      	bls.n	80087d4 <USB_EPStartXfer+0x1628>
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008790:	095b      	lsrs	r3, r3, #5
 8008792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800879a:	f003 031f 	and.w	r3, r3, #31
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <USB_EPStartXfer+0x1600>
 80087a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087a6:	3b01      	subs	r3, #1
 80087a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	029b      	lsls	r3, r3, #10
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4313      	orrs	r3, r2
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	e05c      	b.n	800888e <USB_EPStartXfer+0x16e2>
 80087d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10c      	bne.n	80087f6 <USB_EPStartXfer+0x164a>
 80087dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	e04b      	b.n	800888e <USB_EPStartXfer+0x16e2>
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <USB_EPStartXfer+0x166a>
 800880c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008810:	3301      	adds	r3, #1
 8008812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	b29a      	uxth	r2, r3
 800881e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008822:	b29b      	uxth	r3, r3
 8008824:	029b      	lsls	r3, r3, #10
 8008826:	b29b      	uxth	r3, r3
 8008828:	4313      	orrs	r3, r2
 800882a:	b29a      	uxth	r2, r3
 800882c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008830:	801a      	strh	r2, [r3, #0]
 8008832:	e02c      	b.n	800888e <USB_EPStartXfer+0x16e2>
 8008834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d124      	bne.n	800888e <USB_EPStartXfer+0x16e2>
 8008844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008852:	b29b      	uxth	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800885a:	4413      	add	r3, r2
 800885c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	011a      	lsls	r2, r3, #4
 800886e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008872:	4413      	add	r3, r2
 8008874:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	b29a      	uxth	r2, r3
 8008882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	e001      	b.n	800888e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e03a      	b.n	8008904 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800888e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	441a      	add	r2, r3
 80088ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fe:	b29b      	uxth	r3, r3
 8008900:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800890e:	b480      	push	{r7}
 8008910:	b085      	sub	sp, #20
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d020      	beq.n	8008962 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008936:	81bb      	strh	r3, [r7, #12]
 8008938:	89bb      	ldrh	r3, [r7, #12]
 800893a:	f083 0310 	eor.w	r3, r3, #16
 800893e:	81bb      	strh	r3, [r7, #12]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	441a      	add	r2, r3
 800894a:	89bb      	ldrh	r3, [r7, #12]
 800894c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	b29b      	uxth	r3, r3
 800895e:	8013      	strh	r3, [r2, #0]
 8008960:	e01f      	b.n	80089a2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008978:	81fb      	strh	r3, [r7, #14]
 800897a:	89fb      	ldrh	r3, [r7, #14]
 800897c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008980:	81fb      	strh	r3, [r7, #14]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	89fb      	ldrh	r3, [r7, #14]
 800898e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800899a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr

080089ae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b087      	sub	sp, #28
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	7b1b      	ldrb	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 809d 	bne.w	8008afc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d04c      	beq.n	8008a64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	823b      	strh	r3, [r7, #16]
 80089d8:	8a3b      	ldrh	r3, [r7, #16]
 80089da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d01b      	beq.n	8008a1a <USB_EPClearStall+0x6c>
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f8:	81fb      	strh	r3, [r7, #14]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	441a      	add	r2, r3
 8008a04:	89fb      	ldrh	r3, [r7, #14]
 8008a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d06c      	beq.n	8008afc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a38:	81bb      	strh	r3, [r7, #12]
 8008a3a:	89bb      	ldrh	r3, [r7, #12]
 8008a3c:	f083 0320 	eor.w	r3, r3, #32
 8008a40:	81bb      	strh	r3, [r7, #12]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	441a      	add	r2, r3
 8008a4c:	89bb      	ldrh	r3, [r7, #12]
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
 8008a62:	e04b      	b.n	8008afc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	82fb      	strh	r3, [r7, #22]
 8008a72:	8afb      	ldrh	r3, [r7, #22]
 8008a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01b      	beq.n	8008ab4 <USB_EPClearStall+0x106>
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	82bb      	strh	r3, [r7, #20]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	441a      	add	r2, r3
 8008a9e:	8abb      	ldrh	r3, [r7, #20]
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	827b      	strh	r3, [r7, #18]
 8008acc:	8a7b      	ldrh	r3, [r7, #18]
 8008ace:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ad2:	827b      	strh	r3, [r7, #18]
 8008ad4:	8a7b      	ldrh	r3, [r7, #18]
 8008ad6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ada:	827b      	strh	r3, [r7, #18]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	441a      	add	r2, r3
 8008ae6:	8a7b      	ldrh	r3, [r7, #18]
 8008ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr

08008b08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d103      	bne.n	8008b22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2280      	movs	r2, #128	; 0x80
 8008b1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr

08008b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b68:	68fb      	ldr	r3, [r7, #12]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr

08008b74 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr

08008b8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b08b      	sub	sp, #44	; 0x2c
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	4611      	mov	r1, r2
 8008b96:	461a      	mov	r2, r3
 8008b98:	460b      	mov	r3, r1
 8008b9a:	80fb      	strh	r3, [r7, #6]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ba0:	88bb      	ldrh	r3, [r7, #4]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	005a      	lsls	r2, r3, #1
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc2:	e01e      	b.n	8008c02 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	b21a      	sxth	r2, r3
 8008bd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	8a7a      	ldrh	r2, [r7, #18]
 8008be2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	3302      	adds	r3, #2
 8008be8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	3302      	adds	r3, #2
 8008bee:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1dd      	bne.n	8008bc4 <USB_WritePMA+0x3a>
  }
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	372c      	adds	r7, #44	; 0x2c
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b08b      	sub	sp, #44	; 0x2c
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	461a      	mov	r2, r3
 8008c22:	460b      	mov	r3, r1
 8008c24:	80fb      	strh	r3, [r7, #6]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c2a:	88bb      	ldrh	r3, [r7, #4]
 8008c2c:	085b      	lsrs	r3, r3, #1
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	005a      	lsls	r2, r3, #1
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c46:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4c:	e01b      	b.n	8008c86 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	3302      	adds	r3, #2
 8008c5a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	3301      	adds	r3, #1
 8008c68:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	0a1b      	lsrs	r3, r3, #8
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	3b01      	subs	r3, #1
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e0      	bne.n	8008c4e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c8c:	88bb      	ldrh	r3, [r7, #4]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d007      	beq.n	8008ca8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ca8:	bf00      	nop
 8008caa:	372c      	adds	r7, #44	; 0x2c
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7c1b      	ldrb	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d115      	bne.n	8008cf6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cce:	2202      	movs	r2, #2
 8008cd0:	2181      	movs	r1, #129	; 0x81
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 fea1 	bl	800aa1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fe97 	bl	800aa1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008cf4:	e012      	b.n	8008d1c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	2181      	movs	r1, #129	; 0x81
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fe8c 	bl	800aa1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d08:	2340      	movs	r3, #64	; 0x40
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fe83 	bl	800aa1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d1c:	2308      	movs	r3, #8
 8008d1e:	2203      	movs	r2, #3
 8008d20:	2182      	movs	r1, #130	; 0x82
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fe79 	bl	800aa1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d2e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d32:	f001 ff99 	bl	800ac68 <USBD_static_malloc>
 8008d36:	4602      	mov	r2, r0
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
 8008d4c:	e026      	b.n	8008d9c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d54:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	7c1b      	ldrb	r3, [r3, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d82:	2101      	movs	r1, #1
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 ff39 	bl	800abfc <USBD_LL_PrepareReceive>
 8008d8a:	e007      	b.n	8008d9c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d92:	2340      	movs	r3, #64	; 0x40
 8008d94:	2101      	movs	r1, #1
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 ff30 	bl	800abfc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008db6:	2181      	movs	r1, #129	; 0x81
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fe54 	bl	800aa66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fe4d 	bl	800aa66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dd4:	2182      	movs	r1, #130	; 0x82
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 fe45 	bl	800aa66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 ff3f 	bl	800ac80 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e24:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d039      	beq.n	8008eb2 <USBD_CDC_Setup+0x9e>
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	d17f      	bne.n	8008f42 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d029      	beq.n	8008e9e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	b25b      	sxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	da11      	bge.n	8008e78 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	88d2      	ldrh	r2, [r2, #6]
 8008e66:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e68:	6939      	ldr	r1, [r7, #16]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fa0a 	bl	800a28a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e76:	e06b      	b.n	8008f50 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	785a      	ldrb	r2, [r3, #1]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	88db      	ldrh	r3, [r3, #6]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e8e:	6939      	ldr	r1, [r7, #16]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	88db      	ldrh	r3, [r3, #6]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fa25 	bl	800a2e6 <USBD_CtlPrepareRx>
      break;
 8008e9c:	e058      	b.n	8008f50 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	7850      	ldrb	r0, [r2, #1]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	4798      	blx	r3
      break;
 8008eb0:	e04e      	b.n	8008f50 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b0b      	cmp	r3, #11
 8008eb8:	d02e      	beq.n	8008f18 <USBD_CDC_Setup+0x104>
 8008eba:	2b0b      	cmp	r3, #11
 8008ebc:	dc38      	bgt.n	8008f30 <USBD_CDC_Setup+0x11c>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <USBD_CDC_Setup+0xb4>
 8008ec2:	2b0a      	cmp	r3, #10
 8008ec4:	d014      	beq.n	8008ef0 <USBD_CDC_Setup+0xdc>
 8008ec6:	e033      	b.n	8008f30 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d107      	bne.n	8008ee2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ed2:	f107 030c 	add.w	r3, r7, #12
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 f9d5 	bl	800a28a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee0:	e02e      	b.n	8008f40 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 f966 	bl	800a1b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eea:	2302      	movs	r3, #2
 8008eec:	75fb      	strb	r3, [r7, #23]
          break;
 8008eee:	e027      	b.n	8008f40 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d107      	bne.n	8008f0a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008efa:	f107 030f 	add.w	r3, r7, #15
 8008efe:	2201      	movs	r2, #1
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 f9c1 	bl	800a28a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f08:	e01a      	b.n	8008f40 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f952 	bl	800a1b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f12:	2302      	movs	r3, #2
 8008f14:	75fb      	strb	r3, [r7, #23]
          break;
 8008f16:	e013      	b.n	8008f40 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d00d      	beq.n	8008f3e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 f946 	bl	800a1b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f2e:	e006      	b.n	8008f3e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f001 f93f 	bl	800a1b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f3c:	e000      	b.n	8008f40 <USBD_CDC_Setup+0x12c>
          break;
 8008f3e:	bf00      	nop
      }
      break;
 8008f40:	e006      	b.n	8008f50 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 f936 	bl	800a1b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f4e:	bf00      	nop
  }

  return ret;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f74:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d03a      	beq.n	8008ff6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	6879      	ldr	r1, [r7, #4]
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	331c      	adds	r3, #28
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d029      	beq.n	8008fea <USBD_CDC_DataIn+0x90>
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	331c      	adds	r3, #28
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	78f9      	ldrb	r1, [r7, #3]
 8008faa:	68b8      	ldr	r0, [r7, #8]
 8008fac:	460b      	mov	r3, r1
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4403      	add	r3, r0
 8008fb6:	3338      	adds	r3, #56	; 0x38
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fbe:	fb01 f303 	mul.w	r3, r1, r3
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d110      	bne.n	8008fea <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	331c      	adds	r3, #28
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fdc:	78f9      	ldrb	r1, [r7, #3]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fde7 	bl	800abb6 <USBD_LL_Transmit>
 8008fe8:	e003      	b.n	8008ff2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ff6:	2302      	movs	r3, #2
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009012:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 fe12 	bl	800ac42 <USBD_LL_GetRxDataSize>
 800901e:	4602      	mov	r2, r0
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00d      	beq.n	800904c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009044:	4611      	mov	r1, r2
 8009046:	4798      	blx	r3

    return USBD_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	e000      	b.n	800904e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800904c:	2302      	movs	r3, #2
  }
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800906c:	2b00      	cmp	r3, #0
 800906e:	d015      	beq.n	800909c <USBD_CDC_EP0_RxReady+0x46>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009076:	2bff      	cmp	r3, #255	; 0xff
 8009078:	d010      	beq.n	800909c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009088:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009090:	b292      	uxth	r2, r2
 8009092:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2243      	movs	r2, #67	; 0x43
 80090b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	2000009c 	.word	0x2000009c

080090c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2243      	movs	r2, #67	; 0x43
 80090d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090d6:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000058 	.word	0x20000058

080090e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2243      	movs	r2, #67	; 0x43
 80090f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090f6:	4b03      	ldr	r3, [pc, #12]	; (8009104 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	200000e0 	.word	0x200000e0

08009108 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	220a      	movs	r2, #10
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000014 	.word	0x20000014

08009128 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009132:	2302      	movs	r3, #2
 8009134:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009168:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009172:	88fa      	ldrh	r2, [r7, #6]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009196:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr

080091ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01c      	beq.n	8009200 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d115      	bne.n	80091fc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2181      	movs	r1, #129	; 0x81
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fcdf 	bl	800abb6 <USBD_LL_Transmit>

      return USBD_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e002      	b.n	8009202 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e000      	b.n	8009202 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009200:	2302      	movs	r3, #2
  }
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009218:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d017      	beq.n	8009254 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	7c1b      	ldrb	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d109      	bne.n	8009240 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009236:	2101      	movs	r1, #1
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 fcdf 	bl	800abfc <USBD_LL_PrepareReceive>
 800923e:	e007      	b.n	8009250 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009246:	2340      	movs	r3, #64	; 0x40
 8009248:	2101      	movs	r1, #1
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 fcd6 	bl	800abfc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	e000      	b.n	8009256 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009254:	2302      	movs	r3, #2
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	4613      	mov	r3, r2
 800926a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009272:	2302      	movs	r3, #2
 8009274:	e01a      	b.n	80092ac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	79fa      	ldrb	r2, [r7, #7]
 80092a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f001 fb43 	bl	800a930 <USBD_LL_Init>

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d006      	beq.n	80092d6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]
 80092d4:	e001      	b.n	80092da <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092d6:	2302      	movs	r3, #2
 80092d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr

080092e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 fb78 	bl	800a9e4 <USBD_LL_Start>

  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800931e:	2302      	movs	r3, #2
 8009320:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00c      	beq.n	8009346 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	78fa      	ldrb	r2, [r7, #3]
 8009336:	4611      	mov	r1, r2
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009346:	7bfb      	ldrb	r3, [r7, #15]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	78fa      	ldrb	r2, [r7, #3]
 8009366:	4611      	mov	r1, r2
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fed8 	bl	800a13e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800939c:	461a      	mov	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093aa:	f003 031f 	and.w	r3, r3, #31
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d016      	beq.n	80093e0 <USBD_LL_SetupStage+0x6a>
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d81c      	bhi.n	80093f0 <USBD_LL_SetupStage+0x7a>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <USBD_LL_SetupStage+0x4a>
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d008      	beq.n	80093d0 <USBD_LL_SetupStage+0x5a>
 80093be:	e017      	b.n	80093f0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f9cb 	bl	8009764 <USBD_StdDevReq>
      break;
 80093ce:	e01a      	b.n	8009406 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa2d 	bl	8009838 <USBD_StdItfReq>
      break;
 80093de:	e012      	b.n	8009406 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa6d 	bl	80098c8 <USBD_StdEPReq>
      break;
 80093ee:	e00a      	b.n	8009406 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 fb50 	bl	800aaa4 <USBD_LL_StallEP>
      break;
 8009404:	bf00      	nop
  }

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	460b      	mov	r3, r1
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d14b      	bne.n	80094bc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800942a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009432:	2b03      	cmp	r3, #3
 8009434:	d134      	bne.n	80094a0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	429a      	cmp	r2, r3
 8009440:	d919      	bls.n	8009476 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009458:	429a      	cmp	r2, r3
 800945a:	d203      	bcs.n	8009464 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009460:	b29b      	uxth	r3, r3
 8009462:	e002      	b.n	800946a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009468:	b29b      	uxth	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 ff57 	bl	800a322 <USBD_CtlContinueRx>
 8009474:	e038      	b.n	80094e8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009488:	2b03      	cmp	r3, #3
 800948a:	d105      	bne.n	8009498 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 ff54 	bl	800a346 <USBD_CtlSendStatus>
 800949e:	e023      	b.n	80094e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094a6:	2b05      	cmp	r3, #5
 80094a8:	d11e      	bne.n	80094e8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094b2:	2100      	movs	r1, #0
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f001 faf5 	bl	800aaa4 <USBD_LL_StallEP>
 80094ba:	e015      	b.n	80094e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00d      	beq.n	80094e4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d108      	bne.n	80094e4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	7afa      	ldrb	r2, [r7, #11]
 80094dc:	4611      	mov	r1, r2
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	4798      	blx	r3
 80094e2:	e001      	b.n	80094e8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094e4:	2302      	movs	r3, #2
 80094e6:	e000      	b.n	80094ea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b086      	sub	sp, #24
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	460b      	mov	r3, r1
 80094fc:	607a      	str	r2, [r7, #4]
 80094fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009500:	7afb      	ldrb	r3, [r7, #11]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d17f      	bne.n	8009606 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3314      	adds	r3, #20
 800950a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009512:	2b02      	cmp	r3, #2
 8009514:	d15c      	bne.n	80095d0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	429a      	cmp	r2, r3
 8009520:	d915      	bls.n	800954e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	b29b      	uxth	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fec1 	bl	800a2c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009540:	2300      	movs	r3, #0
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f001 fb58 	bl	800abfc <USBD_LL_PrepareReceive>
 800954c:	e04e      	b.n	80095ec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	6912      	ldr	r2, [r2, #16]
 8009556:	fbb3 f1f2 	udiv	r1, r3, r2
 800955a:	fb01 f202 	mul.w	r2, r1, r2
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d11c      	bne.n	800959e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800956c:	429a      	cmp	r2, r3
 800956e:	d316      	bcc.n	800959e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800957a:	429a      	cmp	r2, r3
 800957c:	d20f      	bcs.n	800959e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800957e:	2200      	movs	r2, #0
 8009580:	2100      	movs	r1, #0
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 fe9d 	bl	800a2c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009590:	2300      	movs	r3, #0
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f001 fb30 	bl	800abfc <USBD_LL_PrepareReceive>
 800959c:	e026      	b.n	80095ec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d105      	bne.n	80095c0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095c0:	2180      	movs	r1, #128	; 0x80
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fa6e 	bl	800aaa4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fecf 	bl	800a36c <USBD_CtlReceiveStatus>
 80095ce:	e00d      	b.n	80095ec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d004      	beq.n	80095e4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095e4:	2180      	movs	r1, #128	; 0x80
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f001 fa5c 	bl	800aaa4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d11d      	bne.n	8009632 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff fe81 	bl	80092fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009604:	e015      	b.n	8009632 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00d      	beq.n	800962e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009618:	2b03      	cmp	r3, #3
 800961a:	d108      	bne.n	800962e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	7afa      	ldrb	r2, [r7, #11]
 8009626:	4611      	mov	r1, r2
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	4798      	blx	r3
 800962c:	e001      	b.n	8009632 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800962e:	2302      	movs	r3, #2
 8009630:	e000      	b.n	8009634 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009644:	2340      	movs	r3, #64	; 0x40
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 f9e5 	bl	800aa1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2240      	movs	r2, #64	; 0x40
 800965c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	2200      	movs	r2, #0
 8009664:	2180      	movs	r1, #128	; 0x80
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 f9d7 	bl	800aa1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2240      	movs	r2, #64	; 0x40
 8009676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d009      	beq.n	80096b4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6852      	ldr	r2, [r2, #4]
 80096ac:	b2d2      	uxtb	r2, r2
 80096ae:	4611      	mov	r1, r2
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	4798      	blx	r3
  }

  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr

080096dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2204      	movs	r2, #4
 80096f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009712:	2b04      	cmp	r3, #4
 8009714:	d105      	bne.n	8009722 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr

0800972e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800973c:	2b03      	cmp	r3, #3
 800973e:	d10b      	bne.n	8009758 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800977a:	2b40      	cmp	r3, #64	; 0x40
 800977c:	d005      	beq.n	800978a <USBD_StdDevReq+0x26>
 800977e:	2b40      	cmp	r3, #64	; 0x40
 8009780:	d84f      	bhi.n	8009822 <USBD_StdDevReq+0xbe>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d009      	beq.n	800979a <USBD_StdDevReq+0x36>
 8009786:	2b20      	cmp	r3, #32
 8009788:	d14b      	bne.n	8009822 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
      break;
 8009798:	e048      	b.n	800982c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b09      	cmp	r3, #9
 80097a0:	d839      	bhi.n	8009816 <USBD_StdDevReq+0xb2>
 80097a2:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <USBD_StdDevReq+0x44>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097f9 	.word	0x080097f9
 80097ac:	0800980d 	.word	0x0800980d
 80097b0:	08009817 	.word	0x08009817
 80097b4:	08009803 	.word	0x08009803
 80097b8:	08009817 	.word	0x08009817
 80097bc:	080097db 	.word	0x080097db
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	08009817 	.word	0x08009817
 80097c8:	080097ef 	.word	0x080097ef
 80097cc:	080097e5 	.word	0x080097e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f9dc 	bl	8009b90 <USBD_GetDescriptor>
          break;
 80097d8:	e022      	b.n	8009820 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb3f 	bl	8009e60 <USBD_SetAddress>
          break;
 80097e2:	e01d      	b.n	8009820 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fb7e 	bl	8009ee8 <USBD_SetConfig>
          break;
 80097ec:	e018      	b.n	8009820 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fc07 	bl	800a004 <USBD_GetConfig>
          break;
 80097f6:	e013      	b.n	8009820 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fc37 	bl	800a06e <USBD_GetStatus>
          break;
 8009800:	e00e      	b.n	8009820 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fc65 	bl	800a0d4 <USBD_SetFeature>
          break;
 800980a:	e009      	b.n	8009820 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fc74 	bl	800a0fc <USBD_ClrFeature>
          break;
 8009814:	e004      	b.n	8009820 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fccc 	bl	800a1b6 <USBD_CtlError>
          break;
 800981e:	bf00      	nop
      }
      break;
 8009820:	e004      	b.n	800982c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fcc6 	bl	800a1b6 <USBD_CtlError>
      break;
 800982a:	bf00      	nop
  }

  return ret;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop

08009838 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d005      	beq.n	800985e <USBD_StdItfReq+0x26>
 8009852:	2b40      	cmp	r3, #64	; 0x40
 8009854:	d82e      	bhi.n	80098b4 <USBD_StdItfReq+0x7c>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <USBD_StdItfReq+0x26>
 800985a:	2b20      	cmp	r3, #32
 800985c:	d12a      	bne.n	80098b4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009864:	3b01      	subs	r3, #1
 8009866:	2b02      	cmp	r3, #2
 8009868:	d81d      	bhi.n	80098a6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	889b      	ldrh	r3, [r3, #4]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b01      	cmp	r3, #1
 8009872:	d813      	bhi.n	800989c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	4798      	blx	r3
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	88db      	ldrh	r3, [r3, #6]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d110      	bne.n	80098b0 <USBD_StdItfReq+0x78>
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10d      	bne.n	80098b0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fd56 	bl	800a346 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800989a:	e009      	b.n	80098b0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fc89 	bl	800a1b6 <USBD_CtlError>
          break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fc84 	bl	800a1b6 <USBD_CtlError>
          break;
 80098ae:	e000      	b.n	80098b2 <USBD_StdItfReq+0x7a>
          break;
 80098b0:	bf00      	nop
      }
      break;
 80098b2:	e004      	b.n	80098be <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fc7d 	bl	800a1b6 <USBD_CtlError>
      break;
 80098bc:	bf00      	nop
  }

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	889b      	ldrh	r3, [r3, #4]
 80098da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098e4:	2b40      	cmp	r3, #64	; 0x40
 80098e6:	d007      	beq.n	80098f8 <USBD_StdEPReq+0x30>
 80098e8:	2b40      	cmp	r3, #64	; 0x40
 80098ea:	f200 8146 	bhi.w	8009b7a <USBD_StdEPReq+0x2b2>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <USBD_StdEPReq+0x40>
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	f040 8141 	bne.w	8009b7a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      break;
 8009906:	e13d      	b.n	8009b84 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009910:	2b20      	cmp	r3, #32
 8009912:	d10a      	bne.n	800992a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
 8009922:	4603      	mov	r3, r0
 8009924:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	e12d      	b.n	8009b86 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	2b03      	cmp	r3, #3
 8009930:	d007      	beq.n	8009942 <USBD_StdEPReq+0x7a>
 8009932:	2b03      	cmp	r3, #3
 8009934:	f300 811b 	bgt.w	8009b6e <USBD_StdEPReq+0x2a6>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d072      	beq.n	8009a22 <USBD_StdEPReq+0x15a>
 800993c:	2b01      	cmp	r3, #1
 800993e:	d03a      	beq.n	80099b6 <USBD_StdEPReq+0xee>
 8009940:	e115      	b.n	8009b6e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009948:	2b02      	cmp	r3, #2
 800994a:	d002      	beq.n	8009952 <USBD_StdEPReq+0x8a>
 800994c:	2b03      	cmp	r3, #3
 800994e:	d015      	beq.n	800997c <USBD_StdEPReq+0xb4>
 8009950:	e02b      	b.n	80099aa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00c      	beq.n	8009972 <USBD_StdEPReq+0xaa>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b80      	cmp	r3, #128	; 0x80
 800995c:	d009      	beq.n	8009972 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 f89e 	bl	800aaa4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009968:	2180      	movs	r1, #128	; 0x80
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 f89a 	bl	800aaa4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009970:	e020      	b.n	80099b4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fc1e 	bl	800a1b6 <USBD_CtlError>
              break;
 800997a:	e01b      	b.n	80099b4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	885b      	ldrh	r3, [r3, #2]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10e      	bne.n	80099a2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <USBD_StdEPReq+0xda>
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b80      	cmp	r3, #128	; 0x80
 800998e:	d008      	beq.n	80099a2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	88db      	ldrh	r3, [r3, #6]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d104      	bne.n	80099a2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f881 	bl	800aaa4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fccf 	bl	800a346 <USBD_CtlSendStatus>

              break;
 80099a8:	e004      	b.n	80099b4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc02 	bl	800a1b6 <USBD_CtlError>
              break;
 80099b2:	bf00      	nop
          }
          break;
 80099b4:	e0e0      	b.n	8009b78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d002      	beq.n	80099c6 <USBD_StdEPReq+0xfe>
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d015      	beq.n	80099f0 <USBD_StdEPReq+0x128>
 80099c4:	e026      	b.n	8009a14 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00c      	beq.n	80099e6 <USBD_StdEPReq+0x11e>
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d009      	beq.n	80099e6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 f864 	bl	800aaa4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099dc:	2180      	movs	r1, #128	; 0x80
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f860 	bl	800aaa4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099e4:	e01c      	b.n	8009a20 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fbe4 	bl	800a1b6 <USBD_CtlError>
              break;
 80099ee:	e017      	b.n	8009a20 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	885b      	ldrh	r3, [r3, #2]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d112      	bne.n	8009a1e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d004      	beq.n	8009a0c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 f86b 	bl	800aae2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fc9a 	bl	800a346 <USBD_CtlSendStatus>
              }
              break;
 8009a12:	e004      	b.n	8009a1e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fbcd 	bl	800a1b6 <USBD_CtlError>
              break;
 8009a1c:	e000      	b.n	8009a20 <USBD_StdEPReq+0x158>
              break;
 8009a1e:	bf00      	nop
          }
          break;
 8009a20:	e0aa      	b.n	8009b78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d002      	beq.n	8009a32 <USBD_StdEPReq+0x16a>
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d032      	beq.n	8009a96 <USBD_StdEPReq+0x1ce>
 8009a30:	e097      	b.n	8009b62 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d007      	beq.n	8009a48 <USBD_StdEPReq+0x180>
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b80      	cmp	r3, #128	; 0x80
 8009a3c:	d004      	beq.n	8009a48 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fbb8 	bl	800a1b6 <USBD_CtlError>
                break;
 8009a46:	e091      	b.n	8009b6c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da0b      	bge.n	8009a68 <USBD_StdEPReq+0x1a0>
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	3310      	adds	r3, #16
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	4413      	add	r3, r2
 8009a64:	3304      	adds	r3, #4
 8009a66:	e00b      	b.n	8009a80 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	3304      	adds	r3, #4
 8009a80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fbfb 	bl	800a28a <USBD_CtlSendData>
              break;
 8009a94:	e06a      	b.n	8009b6c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	da11      	bge.n	8009ac2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	f003 020f 	and.w	r2, r3, #15
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	3318      	adds	r3, #24
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d117      	bne.n	8009ae8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fb7b 	bl	800a1b6 <USBD_CtlError>
                  break;
 8009ac0:	e054      	b.n	8009b6c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	f003 020f 	and.w	r2, r3, #15
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	440b      	add	r3, r1
 8009ad4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fb68 	bl	800a1b6 <USBD_CtlError>
                  break;
 8009ae6:	e041      	b.n	8009b6c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	da0b      	bge.n	8009b08 <USBD_StdEPReq+0x240>
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	3310      	adds	r3, #16
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	3304      	adds	r3, #4
 8009b06:	e00b      	b.n	8009b20 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3304      	adds	r3, #4
 8009b20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <USBD_StdEPReq+0x266>
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	2b80      	cmp	r3, #128	; 0x80
 8009b2c:	d103      	bne.n	8009b36 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e00e      	b.n	8009b54 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fff0 	bl	800ab20 <USBD_LL_IsStallEP>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e002      	b.n	8009b54 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2202      	movs	r2, #2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fb95 	bl	800a28a <USBD_CtlSendData>
              break;
 8009b60:	e004      	b.n	8009b6c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fb26 	bl	800a1b6 <USBD_CtlError>
              break;
 8009b6a:	bf00      	nop
          }
          break;
 8009b6c:	e004      	b.n	8009b78 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fb20 	bl	800a1b6 <USBD_CtlError>
          break;
 8009b76:	bf00      	nop
      }
      break;
 8009b78:	e004      	b.n	8009b84 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fb1a 	bl	800a1b6 <USBD_CtlError>
      break;
 8009b82:	bf00      	nop
  }

  return ret;
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	0a1b      	lsrs	r3, r3, #8
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	2b06      	cmp	r3, #6
 8009bb2:	f200 8128 	bhi.w	8009e06 <USBD_GetDescriptor+0x276>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <USBD_GetDescriptor+0x2c>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009bf1 	.word	0x08009bf1
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009e07 	.word	0x08009e07
 8009bcc:	08009e07 	.word	0x08009e07
 8009bd0:	08009da7 	.word	0x08009da7
 8009bd4:	08009dd3 	.word	0x08009dd3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
      break;
 8009bee:	e112      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	7c1b      	ldrb	r3, [r3, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10d      	bne.n	8009c14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c00:	f107 0208 	add.w	r2, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	2202      	movs	r2, #2
 8009c10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c12:	e100      	b.n	8009e16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	f107 0208 	add.w	r2, r7, #8
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	701a      	strb	r2, [r3, #0]
      break;
 8009c2e:	e0f2      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	885b      	ldrh	r3, [r3, #2]
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b05      	cmp	r3, #5
 8009c38:	f200 80ac 	bhi.w	8009d94 <USBD_GetDescriptor+0x204>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <USBD_GetDescriptor+0xb4>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c91 	.word	0x08009c91
 8009c4c:	08009cc5 	.word	0x08009cc5
 8009c50:	08009cf9 	.word	0x08009cf9
 8009c54:	08009d2d 	.word	0x08009d2d
 8009c58:	08009d61 	.word	0x08009d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	7c12      	ldrb	r2, [r2, #16]
 8009c74:	f107 0108 	add.w	r1, r7, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
 8009c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c7e:	e091      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa97 	bl	800a1b6 <USBD_CtlError>
            err++;
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c8e:	e089      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7c12      	ldrb	r2, [r2, #16]
 8009ca8:	f107 0108 	add.w	r1, r7, #8
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
 8009cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb2:	e077      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa7d 	bl	800a1b6 <USBD_CtlError>
            err++;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc2:	e06f      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ce6:	e05d      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa63 	bl	800a1b6 <USBD_CtlError>
            err++;
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cf6:	e055      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	7c12      	ldrb	r2, [r2, #16]
 8009d10:	f107 0108 	add.w	r1, r7, #8
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1a:	e043      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fa49 	bl	800a1b6 <USBD_CtlError>
            err++;
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	3301      	adds	r3, #1
 8009d28:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2a:	e03b      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	7c12      	ldrb	r2, [r2, #16]
 8009d44:	f107 0108 	add.w	r1, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d4e:	e029      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fa2f 	bl	800a1b6 <USBD_CtlError>
            err++;
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d5e:	e021      	b.n	8009da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	7c12      	ldrb	r2, [r2, #16]
 8009d78:	f107 0108 	add.w	r1, r7, #8
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
 8009d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d82:	e00f      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa15 	bl	800a1b6 <USBD_CtlError>
            err++;
 8009d8c:	7afb      	ldrb	r3, [r7, #11]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	72fb      	strb	r3, [r7, #11]
          break;
 8009d92:	e007      	b.n	8009da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa0d 	bl	800a1b6 <USBD_CtlError>
          err++;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009da2:	e038      	b.n	8009e16 <USBD_GetDescriptor+0x286>
 8009da4:	e037      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1b      	ldrb	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	f107 0208 	add.w	r2, r7, #8
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4798      	blx	r3
 8009dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc0:	e029      	b.n	8009e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f9f6 	bl	800a1b6 <USBD_CtlError>
        err++;
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd0:	e021      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	7c1b      	ldrb	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10d      	bne.n	8009df6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de2:	f107 0208 	add.w	r2, r7, #8
 8009de6:	4610      	mov	r0, r2
 8009de8:	4798      	blx	r3
 8009dea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	2207      	movs	r2, #7
 8009df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df4:	e00f      	b.n	8009e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f9dc 	bl	800a1b6 <USBD_CtlError>
        err++;
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	3301      	adds	r3, #1
 8009e02:	72fb      	strb	r3, [r7, #11]
      break;
 8009e04:	e007      	b.n	8009e16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f9d4 	bl	800a1b6 <USBD_CtlError>
      err++;
 8009e0e:	7afb      	ldrb	r3, [r7, #11]
 8009e10:	3301      	adds	r3, #1
 8009e12:	72fb      	strb	r3, [r7, #11]
      break;
 8009e14:	bf00      	nop
  }

  if (err != 0U)
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d11c      	bne.n	8009e56 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e1c:	893b      	ldrh	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d011      	beq.n	8009e46 <USBD_GetDescriptor+0x2b6>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88db      	ldrh	r3, [r3, #6]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00d      	beq.n	8009e46 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	88da      	ldrh	r2, [r3, #6]
 8009e2e:	893b      	ldrh	r3, [r7, #8]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	bf28      	it	cs
 8009e34:	4613      	movcs	r3, r2
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e3a:	893b      	ldrh	r3, [r7, #8]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fa22 	bl	800a28a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d104      	bne.n	8009e58 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa79 	bl	800a346 <USBD_CtlSendStatus>
 8009e54:	e000      	b.n	8009e58 <USBD_GetDescriptor+0x2c8>
    return;
 8009e56:	bf00      	nop
    }
  }
}
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop

08009e60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	889b      	ldrh	r3, [r3, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d130      	bne.n	8009ed4 <USBD_SetAddress+0x74>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	88db      	ldrh	r3, [r3, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d12c      	bne.n	8009ed4 <USBD_SetAddress+0x74>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	885b      	ldrh	r3, [r3, #2]
 8009e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e80:	d828      	bhi.n	8009ed4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	885b      	ldrh	r3, [r3, #2]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d104      	bne.n	8009ea2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f98b 	bl	800a1b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea0:	e01d      	b.n	8009ede <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7bfa      	ldrb	r2, [r7, #15]
 8009ea6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fe62 	bl	800ab78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa46 	bl	800a346 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec8:	e009      	b.n	8009ede <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed2:	e004      	b.n	8009ede <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f96d 	bl	800a1b6 <USBD_CtlError>
  }
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	4b41      	ldr	r3, [pc, #260]	; (800a000 <USBD_SetConfig+0x118>)
 8009efa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009efc:	4b40      	ldr	r3, [pc, #256]	; (800a000 <USBD_SetConfig+0x118>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d904      	bls.n	8009f0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f955 	bl	800a1b6 <USBD_CtlError>
 8009f0c:	e075      	b.n	8009ffa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d002      	beq.n	8009f1e <USBD_SetConfig+0x36>
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d023      	beq.n	8009f64 <USBD_SetConfig+0x7c>
 8009f1c:	e062      	b.n	8009fe4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f1e:	4b38      	ldr	r3, [pc, #224]	; (800a000 <USBD_SetConfig+0x118>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d01a      	beq.n	8009f5c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f26:	4b36      	ldr	r3, [pc, #216]	; (800a000 <USBD_SetConfig+0x118>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2203      	movs	r2, #3
 8009f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f38:	4b31      	ldr	r3, [pc, #196]	; (800a000 <USBD_SetConfig+0x118>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff f9e7 	bl	8009312 <USBD_SetClassConfig>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d104      	bne.n	8009f54 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f932 	bl	800a1b6 <USBD_CtlError>
            return;
 8009f52:	e052      	b.n	8009ffa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f9f6 	bl	800a346 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f5a:	e04e      	b.n	8009ffa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f9f2 	bl	800a346 <USBD_CtlSendStatus>
        break;
 8009f62:	e04a      	b.n	8009ffa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f64:	4b26      	ldr	r3, [pc, #152]	; (800a000 <USBD_SetConfig+0x118>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d112      	bne.n	8009f92 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009f74:	4b22      	ldr	r3, [pc, #136]	; (800a000 <USBD_SetConfig+0x118>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f7e:	4b20      	ldr	r3, [pc, #128]	; (800a000 <USBD_SetConfig+0x118>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff f9e3 	bl	8009350 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9db 	bl	800a346 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f90:	e033      	b.n	8009ffa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f92:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <USBD_SetConfig+0x118>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d01d      	beq.n	8009fdc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff f9d1 	bl	8009350 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fae:	4b14      	ldr	r3, [pc, #80]	; (800a000 <USBD_SetConfig+0x118>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <USBD_SetConfig+0x118>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff f9a7 	bl	8009312 <USBD_SetClassConfig>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d104      	bne.n	8009fd4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f8f2 	bl	800a1b6 <USBD_CtlError>
            return;
 8009fd2:	e012      	b.n	8009ffa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f9b6 	bl	800a346 <USBD_CtlSendStatus>
        break;
 8009fda:	e00e      	b.n	8009ffa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9b2 	bl	800a346 <USBD_CtlSendStatus>
        break;
 8009fe2:	e00a      	b.n	8009ffa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f8e5 	bl	800a1b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fec:	4b04      	ldr	r3, [pc, #16]	; (800a000 <USBD_SetConfig+0x118>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff f9ac 	bl	8009350 <USBD_ClrClassConfig>
        break;
 8009ff8:	bf00      	nop
    }
  }
}
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000450 	.word	0x20000450

0800a004 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	88db      	ldrh	r3, [r3, #6]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d004      	beq.n	800a020 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f8cc 	bl	800a1b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a01e:	e022      	b.n	800a066 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a026:	2b02      	cmp	r3, #2
 800a028:	dc02      	bgt.n	800a030 <USBD_GetConfig+0x2c>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	dc03      	bgt.n	800a036 <USBD_GetConfig+0x32>
 800a02e:	e015      	b.n	800a05c <USBD_GetConfig+0x58>
 800a030:	2b03      	cmp	r3, #3
 800a032:	d00b      	beq.n	800a04c <USBD_GetConfig+0x48>
 800a034:	e012      	b.n	800a05c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3308      	adds	r3, #8
 800a040:	2201      	movs	r2, #1
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f920 	bl	800a28a <USBD_CtlSendData>
        break;
 800a04a:	e00c      	b.n	800a066 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	2201      	movs	r2, #1
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f918 	bl	800a28a <USBD_CtlSendData>
        break;
 800a05a:	e004      	b.n	800a066 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f8a9 	bl	800a1b6 <USBD_CtlError>
        break;
 800a064:	bf00      	nop
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a07e:	3b01      	subs	r3, #1
 800a080:	2b02      	cmp	r3, #2
 800a082:	d81e      	bhi.n	800a0c2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	88db      	ldrh	r3, [r3, #6]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d004      	beq.n	800a096 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f891 	bl	800a1b6 <USBD_CtlError>
        break;
 800a094:	e01a      	b.n	800a0cc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f043 0202 	orr.w	r2, r3, #2
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f8e5 	bl	800a28a <USBD_CtlSendData>
      break;
 800a0c0:	e004      	b.n	800a0cc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f876 	bl	800a1b6 <USBD_CtlError>
      break;
 800a0ca:	bf00      	nop
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	885b      	ldrh	r3, [r3, #2]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d106      	bne.n	800a0f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f929 	bl	800a346 <USBD_CtlSendStatus>
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10c:	3b01      	subs	r3, #1
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d80b      	bhi.n	800a12a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	885b      	ldrh	r3, [r3, #2]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d10c      	bne.n	800a134 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f90f 	bl	800a346 <USBD_CtlSendStatus>
      }
      break;
 800a128:	e004      	b.n	800a134 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f842 	bl	800a1b6 <USBD_CtlError>
      break;
 800a132:	e000      	b.n	800a136 <USBD_ClrFeature+0x3a>
      break;
 800a134:	bf00      	nop
  }
}
 800a136:	bf00      	nop
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	785a      	ldrb	r2, [r3, #1]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	3302      	adds	r3, #2
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	b29a      	uxth	r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	3303      	adds	r3, #3
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	3304      	adds	r3, #4
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	3305      	adds	r3, #5
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	4413      	add	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	3306      	adds	r3, #6
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	b29a      	uxth	r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	3307      	adds	r3, #7
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	80da      	strh	r2, [r3, #6]

}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr

0800a1b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1c0:	2180      	movs	r1, #128	; 0x80
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fc6e 	bl	800aaa4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fc6a 	bl	800aaa4 <USBD_LL_StallEP>
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d032      	beq.n	800a254 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 f834 	bl	800a25c <USBD_GetLen>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	005b      	lsls	r3, r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a202:	7dfb      	ldrb	r3, [r7, #23]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	75fa      	strb	r2, [r7, #23]
 800a208:	461a      	mov	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4413      	add	r3, r2
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	7812      	ldrb	r2, [r2, #0]
 800a212:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	75fa      	strb	r2, [r7, #23]
 800a21a:	461a      	mov	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4413      	add	r3, r2
 800a220:	2203      	movs	r2, #3
 800a222:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a224:	e012      	b.n	800a24c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	60fa      	str	r2, [r7, #12]
 800a22c:	7dfa      	ldrb	r2, [r7, #23]
 800a22e:	1c51      	adds	r1, r2, #1
 800a230:	75f9      	strb	r1, [r7, #23]
 800a232:	4611      	mov	r1, r2
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	440a      	add	r2, r1
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	75fa      	strb	r2, [r7, #23]
 800a242:	461a      	mov	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4413      	add	r3, r2
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e8      	bne.n	800a226 <USBD_GetString+0x4e>
    }
  }
}
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a268:	e005      	b.n	800a276 <USBD_GetLen+0x1a>
  {
    len++;
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	3301      	adds	r3, #1
 800a26e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3301      	adds	r3, #1
 800a274:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1f5      	bne.n	800a26a <USBD_GetLen+0xe>
  }

  return len;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr

0800a28a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	4613      	mov	r3, r2
 800a296:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2a0:	88fa      	ldrh	r2, [r7, #6]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2a6:	88fa      	ldrh	r2, [r7, #6]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fc7f 	bl	800abb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 fc6d 	bl	800abb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a2fc:	88fa      	ldrh	r2, [r7, #6]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	2100      	movs	r1, #0
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fc72 	bl	800abfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	60f8      	str	r0, [r7, #12]
 800a32a:	60b9      	str	r1, [r7, #8]
 800a32c:	4613      	mov	r3, r2
 800a32e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a330:	88fb      	ldrh	r3, [r7, #6]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	2100      	movs	r1, #0
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 fc60 	bl	800abfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2204      	movs	r2, #4
 800a352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a356:	2300      	movs	r3, #0
 800a358:	2200      	movs	r2, #0
 800a35a:	2100      	movs	r1, #0
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fc2a 	bl	800abb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2205      	movs	r2, #5
 800a378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a37c:	2300      	movs	r3, #0
 800a37e:	2200      	movs	r2, #0
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fc3a 	bl	800abfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a398:	2200      	movs	r2, #0
 800a39a:	4912      	ldr	r1, [pc, #72]	; (800a3e4 <MX_USB_DEVICE_Init+0x50>)
 800a39c:	4812      	ldr	r0, [pc, #72]	; (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a39e:	f7fe ff5e 	bl	800925e <USBD_Init>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3a8:	f7f7 fcd6 	bl	8001d58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3ac:	490f      	ldr	r1, [pc, #60]	; (800a3ec <MX_USB_DEVICE_Init+0x58>)
 800a3ae:	480e      	ldr	r0, [pc, #56]	; (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a3b0:	f7fe ff80 	bl	80092b4 <USBD_RegisterClass>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3ba:	f7f7 fccd 	bl	8001d58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3be:	490c      	ldr	r1, [pc, #48]	; (800a3f0 <MX_USB_DEVICE_Init+0x5c>)
 800a3c0:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a3c2:	f7fe feb1 	bl	8009128 <USBD_CDC_RegisterInterface>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3cc:	f7f7 fcc4 	bl	8001d58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3d0:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a3d2:	f7fe ff88 	bl	80092e6 <USBD_Start>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3dc:	f7f7 fcbc 	bl	8001d58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3e0:	bf00      	nop
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20000134 	.word	0x20000134
 800a3e8:	20000454 	.word	0x20000454
 800a3ec:	20000020 	.word	0x20000020
 800a3f0:	20000124 	.word	0x20000124

0800a3f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4905      	ldr	r1, [pc, #20]	; (800a410 <CDC_Init_FS+0x1c>)
 800a3fc:	4805      	ldr	r0, [pc, #20]	; (800a414 <CDC_Init_FS+0x20>)
 800a3fe:	f7fe fea9 	bl	8009154 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a402:	4905      	ldr	r1, [pc, #20]	; (800a418 <CDC_Init_FS+0x24>)
 800a404:	4803      	ldr	r0, [pc, #12]	; (800a414 <CDC_Init_FS+0x20>)
 800a406:	f7fe febe 	bl	8009186 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a40a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000b18 	.word	0x20000b18
 800a414:	20000454 	.word	0x20000454
 800a418:	20000718 	.word	0x20000718

0800a41c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a420:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a422:	4618      	mov	r0, r3
 800a424:	46bd      	mov	sp, r7
 800a426:	bc80      	pop	{r7}
 800a428:	4770      	bx	lr
	...

0800a42c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	71fb      	strb	r3, [r7, #7]
 800a438:	4613      	mov	r3, r2
 800a43a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	2b23      	cmp	r3, #35	; 0x23
 800a440:	d84a      	bhi.n	800a4d8 <CDC_Control_FS+0xac>
 800a442:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <CDC_Control_FS+0x1c>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a4d9 	.word	0x0800a4d9
 800a44c:	0800a4d9 	.word	0x0800a4d9
 800a450:	0800a4d9 	.word	0x0800a4d9
 800a454:	0800a4d9 	.word	0x0800a4d9
 800a458:	0800a4d9 	.word	0x0800a4d9
 800a45c:	0800a4d9 	.word	0x0800a4d9
 800a460:	0800a4d9 	.word	0x0800a4d9
 800a464:	0800a4d9 	.word	0x0800a4d9
 800a468:	0800a4d9 	.word	0x0800a4d9
 800a46c:	0800a4d9 	.word	0x0800a4d9
 800a470:	0800a4d9 	.word	0x0800a4d9
 800a474:	0800a4d9 	.word	0x0800a4d9
 800a478:	0800a4d9 	.word	0x0800a4d9
 800a47c:	0800a4d9 	.word	0x0800a4d9
 800a480:	0800a4d9 	.word	0x0800a4d9
 800a484:	0800a4d9 	.word	0x0800a4d9
 800a488:	0800a4d9 	.word	0x0800a4d9
 800a48c:	0800a4d9 	.word	0x0800a4d9
 800a490:	0800a4d9 	.word	0x0800a4d9
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a4d9 	.word	0x0800a4d9
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a4d9 	.word	0x0800a4d9
 800a4a4:	0800a4d9 	.word	0x0800a4d9
 800a4a8:	0800a4d9 	.word	0x0800a4d9
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	0800a4d9 	.word	0x0800a4d9
 800a4b8:	0800a4d9 	.word	0x0800a4d9
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4d9 	.word	0x0800a4d9
 800a4c4:	0800a4d9 	.word	0x0800a4d9
 800a4c8:	0800a4d9 	.word	0x0800a4d9
 800a4cc:	0800a4d9 	.word	0x0800a4d9
 800a4d0:	0800a4d9 	.word	0x0800a4d9
 800a4d4:	0800a4d9 	.word	0x0800a4d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4d8:	bf00      	nop
  }

  return (USBD_OK);
 800a4da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bc80      	pop	{r7}
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop

0800a4e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	4810      	ldr	r0, [pc, #64]	; (800a538 <CDC_Receive_FS+0x50>)
 800a4f6:	f7fe fe46 	bl	8009186 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4fa:	480f      	ldr	r0, [pc, #60]	; (800a538 <CDC_Receive_FS+0x50>)
 800a4fc:	f7fe fe85 	bl	800920a <USBD_CDC_ReceivePacket>
	  //	Agregado para copiar lo recibido del Bufer al vector rx
	  uint8_t len = (uint8_t) *Len;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	73fb      	strb	r3, [r7, #15]
	  memset (buffer_rx, '\0', 40);
 800a506:	2228      	movs	r2, #40	; 0x28
 800a508:	2100      	movs	r1, #0
 800a50a:	480c      	ldr	r0, [pc, #48]	; (800a53c <CDC_Receive_FS+0x54>)
 800a50c:	f000 fca4 	bl	800ae58 <memset>
	  memcpy (buffer_rx, Buf, len);
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	461a      	mov	r2, r3
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4809      	ldr	r0, [pc, #36]	; (800a53c <CDC_Receive_FS+0x54>)
 800a518:	f000 fcd2 	bl	800aec0 <memcpy>
	  memset (Buf, '\0', len);
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	461a      	mov	r2, r3
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fc98 	bl	800ae58 <memset>
	  flagUsb = 1;
 800a528:	4b05      	ldr	r3, [pc, #20]	; (800a540 <CDC_Receive_FS+0x58>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	701a      	strb	r2, [r3, #0]
	  //	Se termina levantando la bandera de recepción para el main
	  return (USBD_OK);
 800a52e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20000454 	.word	0x20000454
 800a53c:	200002f4 	.word	0x200002f4
 800a540:	200002f1 	.word	0x200002f1

0800a544 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a554:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <CDC_Transmit_FS+0x48>)
 800a556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a55a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a566:	2301      	movs	r3, #1
 800a568:	e00b      	b.n	800a582 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a56a:	887b      	ldrh	r3, [r7, #2]
 800a56c:	461a      	mov	r2, r3
 800a56e:	6879      	ldr	r1, [r7, #4]
 800a570:	4806      	ldr	r0, [pc, #24]	; (800a58c <CDC_Transmit_FS+0x48>)
 800a572:	f7fe fdef 	bl	8009154 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a576:	4805      	ldr	r0, [pc, #20]	; (800a58c <CDC_Transmit_FS+0x48>)
 800a578:	f7fe fe18 	bl	80091ac <USBD_CDC_TransmitPacket>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a580:	7bfb      	ldrb	r3, [r7, #15]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000454 	.word	0x20000454

0800a590 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	6039      	str	r1, [r7, #0]
 800a59a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2212      	movs	r2, #18
 800a5a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5a2:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bc80      	pop	{r7}
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20000150 	.word	0x20000150

0800a5b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	6039      	str	r1, [r7, #0]
 800a5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2204      	movs	r2, #4
 800a5c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5c6:	4b03      	ldr	r3, [pc, #12]	; (800a5d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000164 	.word	0x20000164

0800a5d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d105      	bne.n	800a5f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	4907      	ldr	r1, [pc, #28]	; (800a60c <USBD_FS_ProductStrDescriptor+0x34>)
 800a5ee:	4808      	ldr	r0, [pc, #32]	; (800a610 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5f0:	f7ff fdf2 	bl	800a1d8 <USBD_GetString>
 800a5f4:	e004      	b.n	800a600 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	4904      	ldr	r1, [pc, #16]	; (800a60c <USBD_FS_ProductStrDescriptor+0x34>)
 800a5fa:	4805      	ldr	r0, [pc, #20]	; (800a610 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5fc:	f7ff fdec 	bl	800a1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a600:	4b02      	ldr	r3, [pc, #8]	; (800a60c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000f18 	.word	0x20000f18
 800a610:	0800bf10 	.word	0x0800bf10

0800a614 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	6039      	str	r1, [r7, #0]
 800a61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	4904      	ldr	r1, [pc, #16]	; (800a634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a624:	4804      	ldr	r0, [pc, #16]	; (800a638 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a626:	f7ff fdd7 	bl	800a1d8 <USBD_GetString>
  return USBD_StrDesc;
 800a62a:	4b02      	ldr	r3, [pc, #8]	; (800a634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000f18 	.word	0x20000f18
 800a638:	0800bf28 	.word	0x0800bf28

0800a63c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	221a      	movs	r2, #26
 800a64c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a64e:	f000 f843 	bl	800a6d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a652:	4b02      	ldr	r3, [pc, #8]	; (800a65c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20000168 	.word	0x20000168

0800a660 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	6039      	str	r1, [r7, #0]
 800a66a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	4907      	ldr	r1, [pc, #28]	; (800a694 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a676:	4808      	ldr	r0, [pc, #32]	; (800a698 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a678:	f7ff fdae 	bl	800a1d8 <USBD_GetString>
 800a67c:	e004      	b.n	800a688 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	4904      	ldr	r1, [pc, #16]	; (800a694 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a682:	4805      	ldr	r0, [pc, #20]	; (800a698 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a684:	f7ff fda8 	bl	800a1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a688:	4b02      	ldr	r3, [pc, #8]	; (800a694 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000f18 	.word	0x20000f18
 800a698:	0800bf3c 	.word	0x0800bf3c

0800a69c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	6039      	str	r1, [r7, #0]
 800a6a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d105      	bne.n	800a6ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4907      	ldr	r1, [pc, #28]	; (800a6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6b2:	4808      	ldr	r0, [pc, #32]	; (800a6d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6b4:	f7ff fd90 	bl	800a1d8 <USBD_GetString>
 800a6b8:	e004      	b.n	800a6c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	4904      	ldr	r1, [pc, #16]	; (800a6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6be:	4805      	ldr	r0, [pc, #20]	; (800a6d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6c0:	f7ff fd8a 	bl	800a1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000f18 	.word	0x20000f18
 800a6d4:	0800bf48 	.word	0x0800bf48

0800a6d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <Get_SerialNum+0x44>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6e4:	4b0e      	ldr	r3, [pc, #56]	; (800a720 <Get_SerialNum+0x48>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <Get_SerialNum+0x4c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6fe:	2208      	movs	r2, #8
 800a700:	4909      	ldr	r1, [pc, #36]	; (800a728 <Get_SerialNum+0x50>)
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 f814 	bl	800a730 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a708:	2204      	movs	r2, #4
 800a70a:	4908      	ldr	r1, [pc, #32]	; (800a72c <Get_SerialNum+0x54>)
 800a70c:	68b8      	ldr	r0, [r7, #8]
 800a70e:	f000 f80f 	bl	800a730 <IntToUnicode>
  }
}
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	1ffff7e8 	.word	0x1ffff7e8
 800a720:	1ffff7ec 	.word	0x1ffff7ec
 800a724:	1ffff7f0 	.word	0x1ffff7f0
 800a728:	2000016a 	.word	0x2000016a
 800a72c:	2000017a 	.word	0x2000017a

0800a730 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
 800a746:	e027      	b.n	800a798 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	0f1b      	lsrs	r3, r3, #28
 800a74c:	2b09      	cmp	r3, #9
 800a74e:	d80b      	bhi.n	800a768 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	0f1b      	lsrs	r3, r3, #28
 800a754:	b2da      	uxtb	r2, r3
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	4619      	mov	r1, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	440b      	add	r3, r1
 800a760:	3230      	adds	r2, #48	; 0x30
 800a762:	b2d2      	uxtb	r2, r2
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	e00a      	b.n	800a77e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	0f1b      	lsrs	r3, r3, #28
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	005b      	lsls	r3, r3, #1
 800a772:	4619      	mov	r1, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	440b      	add	r3, r1
 800a778:	3237      	adds	r2, #55	; 0x37
 800a77a:	b2d2      	uxtb	r2, r2
 800a77c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a784:	7dfb      	ldrb	r3, [r7, #23]
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	3301      	adds	r3, #1
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4413      	add	r3, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	3301      	adds	r3, #1
 800a796:	75fb      	strb	r3, [r7, #23]
 800a798:	7dfa      	ldrb	r2, [r7, #23]
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d3d3      	bcc.n	800a748 <IntToUnicode+0x18>
  }
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	371c      	adds	r7, #28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bc80      	pop	{r7}
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a0d      	ldr	r2, [pc, #52]	; (800a7f0 <HAL_PCD_MspInit+0x44>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d113      	bne.n	800a7e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7be:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <HAL_PCD_MspInit+0x48>)
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	4a0c      	ldr	r2, [pc, #48]	; (800a7f4 <HAL_PCD_MspInit+0x48>)
 800a7c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7c8:	61d3      	str	r3, [r2, #28]
 800a7ca:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <HAL_PCD_MspInit+0x48>)
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2100      	movs	r1, #0
 800a7da:	2014      	movs	r0, #20
 800a7dc:	f7f7 fe91 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a7e0:	2014      	movs	r0, #20
 800a7e2:	f7f7 feaa 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	40005c00 	.word	0x40005c00
 800a7f4:	40021000 	.word	0x40021000

0800a7f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a80c:	4619      	mov	r1, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	f7fe fdb1 	bl	8009376 <USBD_LL_SetupStage>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	440b      	add	r3, r1
 800a83c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	4619      	mov	r1, r3
 800a846:	f7fe fde3 	bl	8009410 <USBD_LL_DataOutStage>
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	00db      	lsls	r3, r3, #3
 800a870:	440b      	add	r3, r1
 800a872:	333c      	adds	r3, #60	; 0x3c
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	78fb      	ldrb	r3, [r7, #3]
 800a878:	4619      	mov	r1, r3
 800a87a:	f7fe fe3a 	bl	80094f2 <USBD_LL_DataInStage>
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe ff4a 	bl	800972e <USBD_LL_SOF>
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d001      	beq.n	800a8ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a8b6:	f7f7 fa4f 	bl	8001d58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a8c0:	7bfa      	ldrb	r2, [r7, #15]
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fefa 	bl	80096be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fe feb3 	bl	800963c <USBD_LL_Reset>
}
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe fef4 	bl	80096dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d005      	beq.n	800a908 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8fc:	4b04      	ldr	r3, [pc, #16]	; (800a910 <HAL_PCD_SuspendCallback+0x30>)
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	4a03      	ldr	r2, [pc, #12]	; (800a910 <HAL_PCD_SuspendCallback+0x30>)
 800a902:	f043 0306 	orr.w	r3, r3, #6
 800a906:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	e000ed00 	.word	0xe000ed00

0800a914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe feee 	bl	8009704 <USBD_LL_Resume>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a938:	4a28      	ldr	r2, [pc, #160]	; (800a9dc <USBD_LL_Init+0xac>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a26      	ldr	r2, [pc, #152]	; (800a9dc <USBD_LL_Init+0xac>)
 800a944:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a948:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <USBD_LL_Init+0xac>)
 800a94a:	4a25      	ldr	r2, [pc, #148]	; (800a9e0 <USBD_LL_Init+0xb0>)
 800a94c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a94e:	4b23      	ldr	r3, [pc, #140]	; (800a9dc <USBD_LL_Init+0xac>)
 800a950:	2208      	movs	r2, #8
 800a952:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a954:	4b21      	ldr	r3, [pc, #132]	; (800a9dc <USBD_LL_Init+0xac>)
 800a956:	2202      	movs	r2, #2
 800a958:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a95a:	4b20      	ldr	r3, [pc, #128]	; (800a9dc <USBD_LL_Init+0xac>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a960:	4b1e      	ldr	r3, [pc, #120]	; (800a9dc <USBD_LL_Init+0xac>)
 800a962:	2200      	movs	r2, #0
 800a964:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a966:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <USBD_LL_Init+0xac>)
 800a968:	2200      	movs	r2, #0
 800a96a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a96c:	481b      	ldr	r0, [pc, #108]	; (800a9dc <USBD_LL_Init+0xac>)
 800a96e:	f7f8 fc51 	bl	8003214 <HAL_PCD_Init>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a978:	f7f7 f9ee 	bl	8001d58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a982:	2318      	movs	r3, #24
 800a984:	2200      	movs	r2, #0
 800a986:	2100      	movs	r1, #0
 800a988:	f7fa f970 	bl	8004c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a992:	2358      	movs	r3, #88	; 0x58
 800a994:	2200      	movs	r2, #0
 800a996:	2180      	movs	r1, #128	; 0x80
 800a998:	f7fa f968 	bl	8004c6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9a2:	23c0      	movs	r3, #192	; 0xc0
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2181      	movs	r1, #129	; 0x81
 800a9a8:	f7fa f960 	bl	8004c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	f7fa f957 	bl	8004c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2182      	movs	r1, #130	; 0x82
 800a9cc:	f7fa f94e 	bl	8004c6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20001118 	.word	0x20001118
 800a9e0:	40005c00 	.word	0x40005c00

0800a9e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f8 fd09 	bl	8003412 <HAL_PCD_Start>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 f94e 	bl	800aca8 <USBD_Get_USB_Status>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa10:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	461a      	mov	r2, r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	70fb      	strb	r3, [r7, #3]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70bb      	strb	r3, [r7, #2]
 800aa30:	4613      	mov	r3, r2
 800aa32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa42:	78bb      	ldrb	r3, [r7, #2]
 800aa44:	883a      	ldrh	r2, [r7, #0]
 800aa46:	78f9      	ldrb	r1, [r7, #3]
 800aa48:	f7f8 fe5e 	bl	8003708 <HAL_PCD_EP_Open>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 f928 	bl	800aca8 <USBD_Get_USB_Status>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	4611      	mov	r1, r2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7f8 fe9c 	bl	80037c2 <HAL_PCD_EP_Close>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 f909 	bl	800aca8 <USBD_Get_USB_Status>
 800aa96:	4603      	mov	r3, r0
 800aa98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f8 ff44 	bl	8003950 <HAL_PCD_EP_SetStall>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f8ea 	bl	800aca8 <USBD_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	460b      	mov	r3, r1
 800aaec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7f8 ff85 	bl	8003a10 <HAL_PCD_EP_ClrStall>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 f8cb 	bl	800aca8 <USBD_Get_USB_Status>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da0c      	bge.n	800ab56 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	1c5a      	adds	r2, r3, #1
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	440b      	add	r3, r1
 800ab50:	3302      	adds	r3, #2
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	e00b      	b.n	800ab6e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab56:	78fb      	ldrb	r3, [r7, #3]
 800ab58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab5c:	68f9      	ldr	r1, [r7, #12]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	00db      	lsls	r3, r3, #3
 800ab66:	440b      	add	r3, r1
 800ab68:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ab6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bc80      	pop	{r7}
 800ab76:	4770      	bx	lr

0800ab78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab92:	78fa      	ldrb	r2, [r7, #3]
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f8 fd91 	bl	80036be <HAL_PCD_SetAddress>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 f880 	bl	800aca8 <USBD_Get_USB_Status>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abac:	7bbb      	ldrb	r3, [r7, #14]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b086      	sub	sp, #24
 800abba:	af00      	add	r7, sp, #0
 800abbc:	60f8      	str	r0, [r7, #12]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	461a      	mov	r2, r3
 800abc2:	460b      	mov	r3, r1
 800abc4:	72fb      	strb	r3, [r7, #11]
 800abc6:	4613      	mov	r3, r2
 800abc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abd8:	893b      	ldrh	r3, [r7, #8]
 800abda:	7af9      	ldrb	r1, [r7, #11]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	f7f8 fe80 	bl	80038e2 <HAL_PCD_EP_Transmit>
 800abe2:	4603      	mov	r3, r0
 800abe4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 f85d 	bl	800aca8 <USBD_Get_USB_Status>
 800abee:	4603      	mov	r3, r0
 800abf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	461a      	mov	r2, r3
 800ac08:	460b      	mov	r3, r1
 800ac0a:	72fb      	strb	r3, [r7, #11]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac1e:	893b      	ldrh	r3, [r7, #8]
 800ac20:	7af9      	ldrb	r1, [r7, #11]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	f7f8 fe15 	bl	8003852 <HAL_PCD_EP_Receive>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f83a 	bl	800aca8 <USBD_Get_USB_Status>
 800ac34:	4603      	mov	r3, r0
 800ac36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac38:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac54:	78fa      	ldrb	r2, [r7, #3]
 800ac56:	4611      	mov	r1, r2
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f8 fe2b 	bl	80038b4 <HAL_PCD_EP_GetRxCount>
 800ac5e:	4603      	mov	r3, r0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac70:	4b02      	ldr	r3, [pc, #8]	; (800ac7c <USBD_static_malloc+0x14>)
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bc80      	pop	{r7}
 800ac7a:	4770      	bx	lr
 800ac7c:	20001408 	.word	0x20001408

0800ac80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]

}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr

0800ac92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bc80      	pop	{r7}
 800aca6:	4770      	bx	lr

0800aca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	4603      	mov	r3, r0
 800acb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d817      	bhi.n	800acec <USBD_Get_USB_Status+0x44>
 800acbc:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <USBD_Get_USB_Status+0x1c>)
 800acbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc2:	bf00      	nop
 800acc4:	0800acd5 	.word	0x0800acd5
 800acc8:	0800acdb 	.word	0x0800acdb
 800accc:	0800ace1 	.word	0x0800ace1
 800acd0:	0800ace7 	.word	0x0800ace7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
    break;
 800acd8:	e00b      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acda:	2302      	movs	r3, #2
 800acdc:	73fb      	strb	r3, [r7, #15]
    break;
 800acde:	e008      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ace0:	2301      	movs	r3, #1
 800ace2:	73fb      	strb	r3, [r7, #15]
    break;
 800ace4:	e005      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ace6:	2302      	movs	r3, #2
 800ace8:	73fb      	strb	r3, [r7, #15]
    break;
 800acea:	e002      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acec:	2302      	movs	r3, #2
 800acee:	73fb      	strb	r3, [r7, #15]
    break;
 800acf0:	bf00      	nop
  }
  return usb_status;
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bc80      	pop	{r7}
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop

0800ad00 <atoi>:
 800ad00:	220a      	movs	r2, #10
 800ad02:	2100      	movs	r1, #0
 800ad04:	f000 b87e 	b.w	800ae04 <strtol>

0800ad08 <_strtol_l.constprop.0>:
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0e:	4686      	mov	lr, r0
 800ad10:	4690      	mov	r8, r2
 800ad12:	d001      	beq.n	800ad18 <_strtol_l.constprop.0+0x10>
 800ad14:	2b24      	cmp	r3, #36	; 0x24
 800ad16:	d906      	bls.n	800ad26 <_strtol_l.constprop.0+0x1e>
 800ad18:	f000 f8a6 	bl	800ae68 <__errno>
 800ad1c:	2316      	movs	r3, #22
 800ad1e:	6003      	str	r3, [r0, #0]
 800ad20:	2000      	movs	r0, #0
 800ad22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad26:	460d      	mov	r5, r1
 800ad28:	4835      	ldr	r0, [pc, #212]	; (800ae00 <_strtol_l.constprop.0+0xf8>)
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad30:	5d06      	ldrb	r6, [r0, r4]
 800ad32:	f016 0608 	ands.w	r6, r6, #8
 800ad36:	d1f8      	bne.n	800ad2a <_strtol_l.constprop.0+0x22>
 800ad38:	2c2d      	cmp	r4, #45	; 0x2d
 800ad3a:	d12e      	bne.n	800ad9a <_strtol_l.constprop.0+0x92>
 800ad3c:	2601      	movs	r6, #1
 800ad3e:	782c      	ldrb	r4, [r5, #0]
 800ad40:	1c95      	adds	r5, r2, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d057      	beq.n	800adf6 <_strtol_l.constprop.0+0xee>
 800ad46:	2b10      	cmp	r3, #16
 800ad48:	d109      	bne.n	800ad5e <_strtol_l.constprop.0+0x56>
 800ad4a:	2c30      	cmp	r4, #48	; 0x30
 800ad4c:	d107      	bne.n	800ad5e <_strtol_l.constprop.0+0x56>
 800ad4e:	782a      	ldrb	r2, [r5, #0]
 800ad50:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ad54:	2a58      	cmp	r2, #88	; 0x58
 800ad56:	d149      	bne.n	800adec <_strtol_l.constprop.0+0xe4>
 800ad58:	2310      	movs	r3, #16
 800ad5a:	786c      	ldrb	r4, [r5, #1]
 800ad5c:	3502      	adds	r5, #2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800ad64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad68:	fbbc f9f3 	udiv	r9, ip, r3
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ad76:	2f09      	cmp	r7, #9
 800ad78:	d814      	bhi.n	800ada4 <_strtol_l.constprop.0+0x9c>
 800ad7a:	463c      	mov	r4, r7
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	dd20      	ble.n	800adc2 <_strtol_l.constprop.0+0xba>
 800ad80:	1c57      	adds	r7, r2, #1
 800ad82:	d007      	beq.n	800ad94 <_strtol_l.constprop.0+0x8c>
 800ad84:	4581      	cmp	r9, r0
 800ad86:	d319      	bcc.n	800adbc <_strtol_l.constprop.0+0xb4>
 800ad88:	d101      	bne.n	800ad8e <_strtol_l.constprop.0+0x86>
 800ad8a:	45a2      	cmp	sl, r4
 800ad8c:	db16      	blt.n	800adbc <_strtol_l.constprop.0+0xb4>
 800ad8e:	2201      	movs	r2, #1
 800ad90:	fb00 4003 	mla	r0, r0, r3, r4
 800ad94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad98:	e7eb      	b.n	800ad72 <_strtol_l.constprop.0+0x6a>
 800ad9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ad9c:	bf04      	itt	eq
 800ad9e:	782c      	ldrbeq	r4, [r5, #0]
 800ada0:	1c95      	addeq	r5, r2, #2
 800ada2:	e7ce      	b.n	800ad42 <_strtol_l.constprop.0+0x3a>
 800ada4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ada8:	2f19      	cmp	r7, #25
 800adaa:	d801      	bhi.n	800adb0 <_strtol_l.constprop.0+0xa8>
 800adac:	3c37      	subs	r4, #55	; 0x37
 800adae:	e7e5      	b.n	800ad7c <_strtol_l.constprop.0+0x74>
 800adb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800adb4:	2f19      	cmp	r7, #25
 800adb6:	d804      	bhi.n	800adc2 <_strtol_l.constprop.0+0xba>
 800adb8:	3c57      	subs	r4, #87	; 0x57
 800adba:	e7df      	b.n	800ad7c <_strtol_l.constprop.0+0x74>
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	e7e8      	b.n	800ad94 <_strtol_l.constprop.0+0x8c>
 800adc2:	1c53      	adds	r3, r2, #1
 800adc4:	d108      	bne.n	800add8 <_strtol_l.constprop.0+0xd0>
 800adc6:	2322      	movs	r3, #34	; 0x22
 800adc8:	4660      	mov	r0, ip
 800adca:	f8ce 3000 	str.w	r3, [lr]
 800adce:	f1b8 0f00 	cmp.w	r8, #0
 800add2:	d0a6      	beq.n	800ad22 <_strtol_l.constprop.0+0x1a>
 800add4:	1e69      	subs	r1, r5, #1
 800add6:	e006      	b.n	800ade6 <_strtol_l.constprop.0+0xde>
 800add8:	b106      	cbz	r6, 800addc <_strtol_l.constprop.0+0xd4>
 800adda:	4240      	negs	r0, r0
 800addc:	f1b8 0f00 	cmp.w	r8, #0
 800ade0:	d09f      	beq.n	800ad22 <_strtol_l.constprop.0+0x1a>
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	d1f6      	bne.n	800add4 <_strtol_l.constprop.0+0xcc>
 800ade6:	f8c8 1000 	str.w	r1, [r8]
 800adea:	e79a      	b.n	800ad22 <_strtol_l.constprop.0+0x1a>
 800adec:	2430      	movs	r4, #48	; 0x30
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1b5      	bne.n	800ad5e <_strtol_l.constprop.0+0x56>
 800adf2:	2308      	movs	r3, #8
 800adf4:	e7b3      	b.n	800ad5e <_strtol_l.constprop.0+0x56>
 800adf6:	2c30      	cmp	r4, #48	; 0x30
 800adf8:	d0a9      	beq.n	800ad4e <_strtol_l.constprop.0+0x46>
 800adfa:	230a      	movs	r3, #10
 800adfc:	e7af      	b.n	800ad5e <_strtol_l.constprop.0+0x56>
 800adfe:	bf00      	nop
 800ae00:	0800bf83 	.word	0x0800bf83

0800ae04 <strtol>:
 800ae04:	4613      	mov	r3, r2
 800ae06:	460a      	mov	r2, r1
 800ae08:	4601      	mov	r1, r0
 800ae0a:	4802      	ldr	r0, [pc, #8]	; (800ae14 <strtol+0x10>)
 800ae0c:	6800      	ldr	r0, [r0, #0]
 800ae0e:	f7ff bf7b 	b.w	800ad08 <_strtol_l.constprop.0>
 800ae12:	bf00      	nop
 800ae14:	200001d0 	.word	0x200001d0

0800ae18 <siprintf>:
 800ae18:	b40e      	push	{r1, r2, r3}
 800ae1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae1e:	b500      	push	{lr}
 800ae20:	b09c      	sub	sp, #112	; 0x70
 800ae22:	ab1d      	add	r3, sp, #116	; 0x74
 800ae24:	9002      	str	r0, [sp, #8]
 800ae26:	9006      	str	r0, [sp, #24]
 800ae28:	9107      	str	r1, [sp, #28]
 800ae2a:	9104      	str	r1, [sp, #16]
 800ae2c:	4808      	ldr	r0, [pc, #32]	; (800ae50 <siprintf+0x38>)
 800ae2e:	4909      	ldr	r1, [pc, #36]	; (800ae54 <siprintf+0x3c>)
 800ae30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae34:	9105      	str	r1, [sp, #20]
 800ae36:	6800      	ldr	r0, [r0, #0]
 800ae38:	a902      	add	r1, sp, #8
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	f000 f99c 	bl	800b178 <_svfiprintf_r>
 800ae40:	2200      	movs	r2, #0
 800ae42:	9b02      	ldr	r3, [sp, #8]
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	b01c      	add	sp, #112	; 0x70
 800ae48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae4c:	b003      	add	sp, #12
 800ae4e:	4770      	bx	lr
 800ae50:	200001d0 	.word	0x200001d0
 800ae54:	ffff0208 	.word	0xffff0208

0800ae58 <memset>:
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4402      	add	r2, r0
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d100      	bne.n	800ae62 <memset+0xa>
 800ae60:	4770      	bx	lr
 800ae62:	f803 1b01 	strb.w	r1, [r3], #1
 800ae66:	e7f9      	b.n	800ae5c <memset+0x4>

0800ae68 <__errno>:
 800ae68:	4b01      	ldr	r3, [pc, #4]	; (800ae70 <__errno+0x8>)
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	200001d0 	.word	0x200001d0

0800ae74 <__libc_init_array>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	2600      	movs	r6, #0
 800ae78:	4d0c      	ldr	r5, [pc, #48]	; (800aeac <__libc_init_array+0x38>)
 800ae7a:	4c0d      	ldr	r4, [pc, #52]	; (800aeb0 <__libc_init_array+0x3c>)
 800ae7c:	1b64      	subs	r4, r4, r5
 800ae7e:	10a4      	asrs	r4, r4, #2
 800ae80:	42a6      	cmp	r6, r4
 800ae82:	d109      	bne.n	800ae98 <__libc_init_array+0x24>
 800ae84:	f000 fc7a 	bl	800b77c <_init>
 800ae88:	2600      	movs	r6, #0
 800ae8a:	4d0a      	ldr	r5, [pc, #40]	; (800aeb4 <__libc_init_array+0x40>)
 800ae8c:	4c0a      	ldr	r4, [pc, #40]	; (800aeb8 <__libc_init_array+0x44>)
 800ae8e:	1b64      	subs	r4, r4, r5
 800ae90:	10a4      	asrs	r4, r4, #2
 800ae92:	42a6      	cmp	r6, r4
 800ae94:	d105      	bne.n	800aea2 <__libc_init_array+0x2e>
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9c:	4798      	blx	r3
 800ae9e:	3601      	adds	r6, #1
 800aea0:	e7ee      	b.n	800ae80 <__libc_init_array+0xc>
 800aea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea6:	4798      	blx	r3
 800aea8:	3601      	adds	r6, #1
 800aeaa:	e7f2      	b.n	800ae92 <__libc_init_array+0x1e>
 800aeac:	0800c0b8 	.word	0x0800c0b8
 800aeb0:	0800c0b8 	.word	0x0800c0b8
 800aeb4:	0800c0b8 	.word	0x0800c0b8
 800aeb8:	0800c0bc 	.word	0x0800c0bc

0800aebc <__retarget_lock_acquire_recursive>:
 800aebc:	4770      	bx	lr

0800aebe <__retarget_lock_release_recursive>:
 800aebe:	4770      	bx	lr

0800aec0 <memcpy>:
 800aec0:	440a      	add	r2, r1
 800aec2:	4291      	cmp	r1, r2
 800aec4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aec8:	d100      	bne.n	800aecc <memcpy+0xc>
 800aeca:	4770      	bx	lr
 800aecc:	b510      	push	{r4, lr}
 800aece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aed2:	4291      	cmp	r1, r2
 800aed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aed8:	d1f9      	bne.n	800aece <memcpy+0xe>
 800aeda:	bd10      	pop	{r4, pc}

0800aedc <_free_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4605      	mov	r5, r0
 800aee0:	2900      	cmp	r1, #0
 800aee2:	d040      	beq.n	800af66 <_free_r+0x8a>
 800aee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee8:	1f0c      	subs	r4, r1, #4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bfb8      	it	lt
 800aeee:	18e4      	addlt	r4, r4, r3
 800aef0:	f000 f8dc 	bl	800b0ac <__malloc_lock>
 800aef4:	4a1c      	ldr	r2, [pc, #112]	; (800af68 <_free_r+0x8c>)
 800aef6:	6813      	ldr	r3, [r2, #0]
 800aef8:	b933      	cbnz	r3, 800af08 <_free_r+0x2c>
 800aefa:	6063      	str	r3, [r4, #4]
 800aefc:	6014      	str	r4, [r2, #0]
 800aefe:	4628      	mov	r0, r5
 800af00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af04:	f000 b8d8 	b.w	800b0b8 <__malloc_unlock>
 800af08:	42a3      	cmp	r3, r4
 800af0a:	d908      	bls.n	800af1e <_free_r+0x42>
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	1821      	adds	r1, r4, r0
 800af10:	428b      	cmp	r3, r1
 800af12:	bf01      	itttt	eq
 800af14:	6819      	ldreq	r1, [r3, #0]
 800af16:	685b      	ldreq	r3, [r3, #4]
 800af18:	1809      	addeq	r1, r1, r0
 800af1a:	6021      	streq	r1, [r4, #0]
 800af1c:	e7ed      	b.n	800aefa <_free_r+0x1e>
 800af1e:	461a      	mov	r2, r3
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	b10b      	cbz	r3, 800af28 <_free_r+0x4c>
 800af24:	42a3      	cmp	r3, r4
 800af26:	d9fa      	bls.n	800af1e <_free_r+0x42>
 800af28:	6811      	ldr	r1, [r2, #0]
 800af2a:	1850      	adds	r0, r2, r1
 800af2c:	42a0      	cmp	r0, r4
 800af2e:	d10b      	bne.n	800af48 <_free_r+0x6c>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	4401      	add	r1, r0
 800af34:	1850      	adds	r0, r2, r1
 800af36:	4283      	cmp	r3, r0
 800af38:	6011      	str	r1, [r2, #0]
 800af3a:	d1e0      	bne.n	800aefe <_free_r+0x22>
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4408      	add	r0, r1
 800af42:	6010      	str	r0, [r2, #0]
 800af44:	6053      	str	r3, [r2, #4]
 800af46:	e7da      	b.n	800aefe <_free_r+0x22>
 800af48:	d902      	bls.n	800af50 <_free_r+0x74>
 800af4a:	230c      	movs	r3, #12
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	e7d6      	b.n	800aefe <_free_r+0x22>
 800af50:	6820      	ldr	r0, [r4, #0]
 800af52:	1821      	adds	r1, r4, r0
 800af54:	428b      	cmp	r3, r1
 800af56:	bf01      	itttt	eq
 800af58:	6819      	ldreq	r1, [r3, #0]
 800af5a:	685b      	ldreq	r3, [r3, #4]
 800af5c:	1809      	addeq	r1, r1, r0
 800af5e:	6021      	streq	r1, [r4, #0]
 800af60:	6063      	str	r3, [r4, #4]
 800af62:	6054      	str	r4, [r2, #4]
 800af64:	e7cb      	b.n	800aefe <_free_r+0x22>
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	20001768 	.word	0x20001768

0800af6c <sbrk_aligned>:
 800af6c:	b570      	push	{r4, r5, r6, lr}
 800af6e:	4e0e      	ldr	r6, [pc, #56]	; (800afa8 <sbrk_aligned+0x3c>)
 800af70:	460c      	mov	r4, r1
 800af72:	6831      	ldr	r1, [r6, #0]
 800af74:	4605      	mov	r5, r0
 800af76:	b911      	cbnz	r1, 800af7e <sbrk_aligned+0x12>
 800af78:	f000 fbaa 	bl	800b6d0 <_sbrk_r>
 800af7c:	6030      	str	r0, [r6, #0]
 800af7e:	4621      	mov	r1, r4
 800af80:	4628      	mov	r0, r5
 800af82:	f000 fba5 	bl	800b6d0 <_sbrk_r>
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	d00a      	beq.n	800afa0 <sbrk_aligned+0x34>
 800af8a:	1cc4      	adds	r4, r0, #3
 800af8c:	f024 0403 	bic.w	r4, r4, #3
 800af90:	42a0      	cmp	r0, r4
 800af92:	d007      	beq.n	800afa4 <sbrk_aligned+0x38>
 800af94:	1a21      	subs	r1, r4, r0
 800af96:	4628      	mov	r0, r5
 800af98:	f000 fb9a 	bl	800b6d0 <_sbrk_r>
 800af9c:	3001      	adds	r0, #1
 800af9e:	d101      	bne.n	800afa4 <sbrk_aligned+0x38>
 800afa0:	f04f 34ff 	mov.w	r4, #4294967295
 800afa4:	4620      	mov	r0, r4
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	2000176c 	.word	0x2000176c

0800afac <_malloc_r>:
 800afac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb0:	1ccd      	adds	r5, r1, #3
 800afb2:	f025 0503 	bic.w	r5, r5, #3
 800afb6:	3508      	adds	r5, #8
 800afb8:	2d0c      	cmp	r5, #12
 800afba:	bf38      	it	cc
 800afbc:	250c      	movcc	r5, #12
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	4607      	mov	r7, r0
 800afc2:	db01      	blt.n	800afc8 <_malloc_r+0x1c>
 800afc4:	42a9      	cmp	r1, r5
 800afc6:	d905      	bls.n	800afd4 <_malloc_r+0x28>
 800afc8:	230c      	movs	r3, #12
 800afca:	2600      	movs	r6, #0
 800afcc:	603b      	str	r3, [r7, #0]
 800afce:	4630      	mov	r0, r6
 800afd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0a8 <_malloc_r+0xfc>
 800afd8:	f000 f868 	bl	800b0ac <__malloc_lock>
 800afdc:	f8d8 3000 	ldr.w	r3, [r8]
 800afe0:	461c      	mov	r4, r3
 800afe2:	bb5c      	cbnz	r4, 800b03c <_malloc_r+0x90>
 800afe4:	4629      	mov	r1, r5
 800afe6:	4638      	mov	r0, r7
 800afe8:	f7ff ffc0 	bl	800af6c <sbrk_aligned>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	4604      	mov	r4, r0
 800aff0:	d155      	bne.n	800b09e <_malloc_r+0xf2>
 800aff2:	f8d8 4000 	ldr.w	r4, [r8]
 800aff6:	4626      	mov	r6, r4
 800aff8:	2e00      	cmp	r6, #0
 800affa:	d145      	bne.n	800b088 <_malloc_r+0xdc>
 800affc:	2c00      	cmp	r4, #0
 800affe:	d048      	beq.n	800b092 <_malloc_r+0xe6>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	4631      	mov	r1, r6
 800b004:	4638      	mov	r0, r7
 800b006:	eb04 0903 	add.w	r9, r4, r3
 800b00a:	f000 fb61 	bl	800b6d0 <_sbrk_r>
 800b00e:	4581      	cmp	r9, r0
 800b010:	d13f      	bne.n	800b092 <_malloc_r+0xe6>
 800b012:	6821      	ldr	r1, [r4, #0]
 800b014:	4638      	mov	r0, r7
 800b016:	1a6d      	subs	r5, r5, r1
 800b018:	4629      	mov	r1, r5
 800b01a:	f7ff ffa7 	bl	800af6c <sbrk_aligned>
 800b01e:	3001      	adds	r0, #1
 800b020:	d037      	beq.n	800b092 <_malloc_r+0xe6>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	442b      	add	r3, r5
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	f8d8 3000 	ldr.w	r3, [r8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d038      	beq.n	800b0a2 <_malloc_r+0xf6>
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	42a2      	cmp	r2, r4
 800b034:	d12b      	bne.n	800b08e <_malloc_r+0xe2>
 800b036:	2200      	movs	r2, #0
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	e00f      	b.n	800b05c <_malloc_r+0xb0>
 800b03c:	6822      	ldr	r2, [r4, #0]
 800b03e:	1b52      	subs	r2, r2, r5
 800b040:	d41f      	bmi.n	800b082 <_malloc_r+0xd6>
 800b042:	2a0b      	cmp	r2, #11
 800b044:	d917      	bls.n	800b076 <_malloc_r+0xca>
 800b046:	1961      	adds	r1, r4, r5
 800b048:	42a3      	cmp	r3, r4
 800b04a:	6025      	str	r5, [r4, #0]
 800b04c:	bf18      	it	ne
 800b04e:	6059      	strne	r1, [r3, #4]
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	bf08      	it	eq
 800b054:	f8c8 1000 	streq.w	r1, [r8]
 800b058:	5162      	str	r2, [r4, r5]
 800b05a:	604b      	str	r3, [r1, #4]
 800b05c:	4638      	mov	r0, r7
 800b05e:	f104 060b 	add.w	r6, r4, #11
 800b062:	f000 f829 	bl	800b0b8 <__malloc_unlock>
 800b066:	f026 0607 	bic.w	r6, r6, #7
 800b06a:	1d23      	adds	r3, r4, #4
 800b06c:	1af2      	subs	r2, r6, r3
 800b06e:	d0ae      	beq.n	800afce <_malloc_r+0x22>
 800b070:	1b9b      	subs	r3, r3, r6
 800b072:	50a3      	str	r3, [r4, r2]
 800b074:	e7ab      	b.n	800afce <_malloc_r+0x22>
 800b076:	42a3      	cmp	r3, r4
 800b078:	6862      	ldr	r2, [r4, #4]
 800b07a:	d1dd      	bne.n	800b038 <_malloc_r+0x8c>
 800b07c:	f8c8 2000 	str.w	r2, [r8]
 800b080:	e7ec      	b.n	800b05c <_malloc_r+0xb0>
 800b082:	4623      	mov	r3, r4
 800b084:	6864      	ldr	r4, [r4, #4]
 800b086:	e7ac      	b.n	800afe2 <_malloc_r+0x36>
 800b088:	4634      	mov	r4, r6
 800b08a:	6876      	ldr	r6, [r6, #4]
 800b08c:	e7b4      	b.n	800aff8 <_malloc_r+0x4c>
 800b08e:	4613      	mov	r3, r2
 800b090:	e7cc      	b.n	800b02c <_malloc_r+0x80>
 800b092:	230c      	movs	r3, #12
 800b094:	4638      	mov	r0, r7
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	f000 f80e 	bl	800b0b8 <__malloc_unlock>
 800b09c:	e797      	b.n	800afce <_malloc_r+0x22>
 800b09e:	6025      	str	r5, [r4, #0]
 800b0a0:	e7dc      	b.n	800b05c <_malloc_r+0xb0>
 800b0a2:	605b      	str	r3, [r3, #4]
 800b0a4:	deff      	udf	#255	; 0xff
 800b0a6:	bf00      	nop
 800b0a8:	20001768 	.word	0x20001768

0800b0ac <__malloc_lock>:
 800b0ac:	4801      	ldr	r0, [pc, #4]	; (800b0b4 <__malloc_lock+0x8>)
 800b0ae:	f7ff bf05 	b.w	800aebc <__retarget_lock_acquire_recursive>
 800b0b2:	bf00      	nop
 800b0b4:	20001764 	.word	0x20001764

0800b0b8 <__malloc_unlock>:
 800b0b8:	4801      	ldr	r0, [pc, #4]	; (800b0c0 <__malloc_unlock+0x8>)
 800b0ba:	f7ff bf00 	b.w	800aebe <__retarget_lock_release_recursive>
 800b0be:	bf00      	nop
 800b0c0:	20001764 	.word	0x20001764

0800b0c4 <__ssputs_r>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	461f      	mov	r7, r3
 800b0ca:	688e      	ldr	r6, [r1, #8]
 800b0cc:	4682      	mov	sl, r0
 800b0ce:	42be      	cmp	r6, r7
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	4690      	mov	r8, r2
 800b0d4:	680b      	ldr	r3, [r1, #0]
 800b0d6:	d82c      	bhi.n	800b132 <__ssputs_r+0x6e>
 800b0d8:	898a      	ldrh	r2, [r1, #12]
 800b0da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0de:	d026      	beq.n	800b12e <__ssputs_r+0x6a>
 800b0e0:	6965      	ldr	r5, [r4, #20]
 800b0e2:	6909      	ldr	r1, [r1, #16]
 800b0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e8:	eba3 0901 	sub.w	r9, r3, r1
 800b0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0f0:	1c7b      	adds	r3, r7, #1
 800b0f2:	444b      	add	r3, r9
 800b0f4:	106d      	asrs	r5, r5, #1
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	bf38      	it	cc
 800b0fa:	461d      	movcc	r5, r3
 800b0fc:	0553      	lsls	r3, r2, #21
 800b0fe:	d527      	bpl.n	800b150 <__ssputs_r+0x8c>
 800b100:	4629      	mov	r1, r5
 800b102:	f7ff ff53 	bl	800afac <_malloc_r>
 800b106:	4606      	mov	r6, r0
 800b108:	b360      	cbz	r0, 800b164 <__ssputs_r+0xa0>
 800b10a:	464a      	mov	r2, r9
 800b10c:	6921      	ldr	r1, [r4, #16]
 800b10e:	f7ff fed7 	bl	800aec0 <memcpy>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	6126      	str	r6, [r4, #16]
 800b120:	444e      	add	r6, r9
 800b122:	6026      	str	r6, [r4, #0]
 800b124:	463e      	mov	r6, r7
 800b126:	6165      	str	r5, [r4, #20]
 800b128:	eba5 0509 	sub.w	r5, r5, r9
 800b12c:	60a5      	str	r5, [r4, #8]
 800b12e:	42be      	cmp	r6, r7
 800b130:	d900      	bls.n	800b134 <__ssputs_r+0x70>
 800b132:	463e      	mov	r6, r7
 800b134:	4632      	mov	r2, r6
 800b136:	4641      	mov	r1, r8
 800b138:	6820      	ldr	r0, [r4, #0]
 800b13a:	f000 faaf 	bl	800b69c <memmove>
 800b13e:	2000      	movs	r0, #0
 800b140:	68a3      	ldr	r3, [r4, #8]
 800b142:	1b9b      	subs	r3, r3, r6
 800b144:	60a3      	str	r3, [r4, #8]
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	4433      	add	r3, r6
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b150:	462a      	mov	r2, r5
 800b152:	f000 fadb 	bl	800b70c <_realloc_r>
 800b156:	4606      	mov	r6, r0
 800b158:	2800      	cmp	r0, #0
 800b15a:	d1e0      	bne.n	800b11e <__ssputs_r+0x5a>
 800b15c:	4650      	mov	r0, sl
 800b15e:	6921      	ldr	r1, [r4, #16]
 800b160:	f7ff febc 	bl	800aedc <_free_r>
 800b164:	230c      	movs	r3, #12
 800b166:	f8ca 3000 	str.w	r3, [sl]
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f04f 30ff 	mov.w	r0, #4294967295
 800b170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	e7e9      	b.n	800b14c <__ssputs_r+0x88>

0800b178 <_svfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4698      	mov	r8, r3
 800b17e:	898b      	ldrh	r3, [r1, #12]
 800b180:	4607      	mov	r7, r0
 800b182:	061b      	lsls	r3, r3, #24
 800b184:	460d      	mov	r5, r1
 800b186:	4614      	mov	r4, r2
 800b188:	b09d      	sub	sp, #116	; 0x74
 800b18a:	d50e      	bpl.n	800b1aa <_svfiprintf_r+0x32>
 800b18c:	690b      	ldr	r3, [r1, #16]
 800b18e:	b963      	cbnz	r3, 800b1aa <_svfiprintf_r+0x32>
 800b190:	2140      	movs	r1, #64	; 0x40
 800b192:	f7ff ff0b 	bl	800afac <_malloc_r>
 800b196:	6028      	str	r0, [r5, #0]
 800b198:	6128      	str	r0, [r5, #16]
 800b19a:	b920      	cbnz	r0, 800b1a6 <_svfiprintf_r+0x2e>
 800b19c:	230c      	movs	r3, #12
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e0d0      	b.n	800b348 <_svfiprintf_r+0x1d0>
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	616b      	str	r3, [r5, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b4:	2330      	movs	r3, #48	; 0x30
 800b1b6:	f04f 0901 	mov.w	r9, #1
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b360 <_svfiprintf_r+0x1e8>
 800b1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ce:	b10a      	cbz	r2, 800b1d4 <_svfiprintf_r+0x5c>
 800b1d0:	2a25      	cmp	r2, #37	; 0x25
 800b1d2:	d1f9      	bne.n	800b1c8 <_svfiprintf_r+0x50>
 800b1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d8:	d00b      	beq.n	800b1f2 <_svfiprintf_r+0x7a>
 800b1da:	465b      	mov	r3, fp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ff6f 	bl	800b0c4 <__ssputs_r>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f000 80a9 	beq.w	800b33e <_svfiprintf_r+0x1c6>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ee:	445a      	add	r2, fp
 800b1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80a1 	beq.w	800b33e <_svfiprintf_r+0x1c6>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b206:	f10a 0a01 	add.w	sl, sl, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b212:	931a      	str	r3, [sp, #104]	; 0x68
 800b214:	4654      	mov	r4, sl
 800b216:	2205      	movs	r2, #5
 800b218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21c:	4850      	ldr	r0, [pc, #320]	; (800b360 <_svfiprintf_r+0x1e8>)
 800b21e:	f000 fa67 	bl	800b6f0 <memchr>
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	b9d8      	cbnz	r0, 800b25e <_svfiprintf_r+0xe6>
 800b226:	06d0      	lsls	r0, r2, #27
 800b228:	bf44      	itt	mi
 800b22a:	2320      	movmi	r3, #32
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b230:	0711      	lsls	r1, r2, #28
 800b232:	bf44      	itt	mi
 800b234:	232b      	movmi	r3, #43	; 0x2b
 800b236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b2a      	cmp	r3, #42	; 0x2a
 800b240:	d015      	beq.n	800b26e <_svfiprintf_r+0xf6>
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	9a07      	ldr	r2, [sp, #28]
 800b24c:	4621      	mov	r1, r4
 800b24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b252:	3b30      	subs	r3, #48	; 0x30
 800b254:	2b09      	cmp	r3, #9
 800b256:	d94d      	bls.n	800b2f4 <_svfiprintf_r+0x17c>
 800b258:	b1b0      	cbz	r0, 800b288 <_svfiprintf_r+0x110>
 800b25a:	9207      	str	r2, [sp, #28]
 800b25c:	e014      	b.n	800b288 <_svfiprintf_r+0x110>
 800b25e:	eba0 0308 	sub.w	r3, r0, r8
 800b262:	fa09 f303 	lsl.w	r3, r9, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	46a2      	mov	sl, r4
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	e7d2      	b.n	800b214 <_svfiprintf_r+0x9c>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9103      	str	r1, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbb      	ittet	lt
 800b27a:	425b      	neglt	r3, r3
 800b27c:	f042 0202 	orrlt.w	r2, r2, #2
 800b280:	9307      	strge	r3, [sp, #28]
 800b282:	9307      	strlt	r3, [sp, #28]
 800b284:	bfb8      	it	lt
 800b286:	9204      	strlt	r2, [sp, #16]
 800b288:	7823      	ldrb	r3, [r4, #0]
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d10c      	bne.n	800b2a8 <_svfiprintf_r+0x130>
 800b28e:	7863      	ldrb	r3, [r4, #1]
 800b290:	2b2a      	cmp	r3, #42	; 0x2a
 800b292:	d134      	bne.n	800b2fe <_svfiprintf_r+0x186>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	3402      	adds	r4, #2
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9203      	str	r2, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfb8      	it	lt
 800b2a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b364 <_svfiprintf_r+0x1ec>
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	7821      	ldrb	r1, [r4, #0]
 800b2b2:	f000 fa1d 	bl	800b6f0 <memchr>
 800b2b6:	b138      	cbz	r0, 800b2c8 <_svfiprintf_r+0x150>
 800b2b8:	2240      	movs	r2, #64	; 0x40
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	eba0 000a 	sub.w	r0, r0, sl
 800b2c0:	4082      	lsls	r2, r0
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2cc:	2206      	movs	r2, #6
 800b2ce:	4826      	ldr	r0, [pc, #152]	; (800b368 <_svfiprintf_r+0x1f0>)
 800b2d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d4:	f000 fa0c 	bl	800b6f0 <memchr>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d038      	beq.n	800b34e <_svfiprintf_r+0x1d6>
 800b2dc:	4b23      	ldr	r3, [pc, #140]	; (800b36c <_svfiprintf_r+0x1f4>)
 800b2de:	bb1b      	cbnz	r3, 800b328 <_svfiprintf_r+0x1b0>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	3307      	adds	r3, #7
 800b2e4:	f023 0307 	bic.w	r3, r3, #7
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	4433      	add	r3, r6
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	e768      	b.n	800b1c6 <_svfiprintf_r+0x4e>
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fc:	e7a6      	b.n	800b24c <_svfiprintf_r+0xd4>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f04f 0c0a 	mov.w	ip, #10
 800b304:	4619      	mov	r1, r3
 800b306:	3401      	adds	r4, #1
 800b308:	9305      	str	r3, [sp, #20]
 800b30a:	4620      	mov	r0, r4
 800b30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b310:	3a30      	subs	r2, #48	; 0x30
 800b312:	2a09      	cmp	r2, #9
 800b314:	d903      	bls.n	800b31e <_svfiprintf_r+0x1a6>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0c6      	beq.n	800b2a8 <_svfiprintf_r+0x130>
 800b31a:	9105      	str	r1, [sp, #20]
 800b31c:	e7c4      	b.n	800b2a8 <_svfiprintf_r+0x130>
 800b31e:	4604      	mov	r4, r0
 800b320:	2301      	movs	r3, #1
 800b322:	fb0c 2101 	mla	r1, ip, r1, r2
 800b326:	e7f0      	b.n	800b30a <_svfiprintf_r+0x192>
 800b328:	ab03      	add	r3, sp, #12
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	462a      	mov	r2, r5
 800b32e:	4638      	mov	r0, r7
 800b330:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b332:	a904      	add	r1, sp, #16
 800b334:	f3af 8000 	nop.w
 800b338:	1c42      	adds	r2, r0, #1
 800b33a:	4606      	mov	r6, r0
 800b33c:	d1d6      	bne.n	800b2ec <_svfiprintf_r+0x174>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	065b      	lsls	r3, r3, #25
 800b342:	f53f af2d 	bmi.w	800b1a0 <_svfiprintf_r+0x28>
 800b346:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b348:	b01d      	add	sp, #116	; 0x74
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	ab03      	add	r3, sp, #12
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	462a      	mov	r2, r5
 800b354:	4638      	mov	r0, r7
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b358:	a904      	add	r1, sp, #16
 800b35a:	f000 f87d 	bl	800b458 <_printf_i>
 800b35e:	e7eb      	b.n	800b338 <_svfiprintf_r+0x1c0>
 800b360:	0800c083 	.word	0x0800c083
 800b364:	0800c089 	.word	0x0800c089
 800b368:	0800c08d 	.word	0x0800c08d
 800b36c:	00000000 	.word	0x00000000
 800b370:	0800b0c5 	.word	0x0800b0c5

0800b374 <_printf_common>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	4616      	mov	r6, r2
 800b37a:	4699      	mov	r9, r3
 800b37c:	688a      	ldr	r2, [r1, #8]
 800b37e:	690b      	ldr	r3, [r1, #16]
 800b380:	4607      	mov	r7, r0
 800b382:	4293      	cmp	r3, r2
 800b384:	bfb8      	it	lt
 800b386:	4613      	movlt	r3, r2
 800b388:	6033      	str	r3, [r6, #0]
 800b38a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b38e:	460c      	mov	r4, r1
 800b390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b394:	b10a      	cbz	r2, 800b39a <_printf_common+0x26>
 800b396:	3301      	adds	r3, #1
 800b398:	6033      	str	r3, [r6, #0]
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	0699      	lsls	r1, r3, #26
 800b39e:	bf42      	ittt	mi
 800b3a0:	6833      	ldrmi	r3, [r6, #0]
 800b3a2:	3302      	addmi	r3, #2
 800b3a4:	6033      	strmi	r3, [r6, #0]
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	f015 0506 	ands.w	r5, r5, #6
 800b3ac:	d106      	bne.n	800b3bc <_printf_common+0x48>
 800b3ae:	f104 0a19 	add.w	sl, r4, #25
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	6832      	ldr	r2, [r6, #0]
 800b3b6:	1a9b      	subs	r3, r3, r2
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dc2b      	bgt.n	800b414 <_printf_common+0xa0>
 800b3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3c0:	1e13      	subs	r3, r2, #0
 800b3c2:	6822      	ldr	r2, [r4, #0]
 800b3c4:	bf18      	it	ne
 800b3c6:	2301      	movne	r3, #1
 800b3c8:	0692      	lsls	r2, r2, #26
 800b3ca:	d430      	bmi.n	800b42e <_printf_common+0xba>
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3d4:	47c0      	blx	r8
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d023      	beq.n	800b422 <_printf_common+0xae>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	6922      	ldr	r2, [r4, #16]
 800b3de:	f003 0306 	and.w	r3, r3, #6
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	bf14      	ite	ne
 800b3e6:	2500      	movne	r5, #0
 800b3e8:	6833      	ldreq	r3, [r6, #0]
 800b3ea:	f04f 0600 	mov.w	r6, #0
 800b3ee:	bf08      	it	eq
 800b3f0:	68e5      	ldreq	r5, [r4, #12]
 800b3f2:	f104 041a 	add.w	r4, r4, #26
 800b3f6:	bf08      	it	eq
 800b3f8:	1aed      	subeq	r5, r5, r3
 800b3fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b3fe:	bf08      	it	eq
 800b400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b404:	4293      	cmp	r3, r2
 800b406:	bfc4      	itt	gt
 800b408:	1a9b      	subgt	r3, r3, r2
 800b40a:	18ed      	addgt	r5, r5, r3
 800b40c:	42b5      	cmp	r5, r6
 800b40e:	d11a      	bne.n	800b446 <_printf_common+0xd2>
 800b410:	2000      	movs	r0, #0
 800b412:	e008      	b.n	800b426 <_printf_common+0xb2>
 800b414:	2301      	movs	r3, #1
 800b416:	4652      	mov	r2, sl
 800b418:	4649      	mov	r1, r9
 800b41a:	4638      	mov	r0, r7
 800b41c:	47c0      	blx	r8
 800b41e:	3001      	adds	r0, #1
 800b420:	d103      	bne.n	800b42a <_printf_common+0xb6>
 800b422:	f04f 30ff 	mov.w	r0, #4294967295
 800b426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b42a:	3501      	adds	r5, #1
 800b42c:	e7c1      	b.n	800b3b2 <_printf_common+0x3e>
 800b42e:	2030      	movs	r0, #48	; 0x30
 800b430:	18e1      	adds	r1, r4, r3
 800b432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b43c:	4422      	add	r2, r4
 800b43e:	3302      	adds	r3, #2
 800b440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b444:	e7c2      	b.n	800b3cc <_printf_common+0x58>
 800b446:	2301      	movs	r3, #1
 800b448:	4622      	mov	r2, r4
 800b44a:	4649      	mov	r1, r9
 800b44c:	4638      	mov	r0, r7
 800b44e:	47c0      	blx	r8
 800b450:	3001      	adds	r0, #1
 800b452:	d0e6      	beq.n	800b422 <_printf_common+0xae>
 800b454:	3601      	adds	r6, #1
 800b456:	e7d9      	b.n	800b40c <_printf_common+0x98>

0800b458 <_printf_i>:
 800b458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	7e0f      	ldrb	r7, [r1, #24]
 800b45e:	4691      	mov	r9, r2
 800b460:	2f78      	cmp	r7, #120	; 0x78
 800b462:	4680      	mov	r8, r0
 800b464:	460c      	mov	r4, r1
 800b466:	469a      	mov	sl, r3
 800b468:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b46a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b46e:	d807      	bhi.n	800b480 <_printf_i+0x28>
 800b470:	2f62      	cmp	r7, #98	; 0x62
 800b472:	d80a      	bhi.n	800b48a <_printf_i+0x32>
 800b474:	2f00      	cmp	r7, #0
 800b476:	f000 80d5 	beq.w	800b624 <_printf_i+0x1cc>
 800b47a:	2f58      	cmp	r7, #88	; 0x58
 800b47c:	f000 80c1 	beq.w	800b602 <_printf_i+0x1aa>
 800b480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b488:	e03a      	b.n	800b500 <_printf_i+0xa8>
 800b48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b48e:	2b15      	cmp	r3, #21
 800b490:	d8f6      	bhi.n	800b480 <_printf_i+0x28>
 800b492:	a101      	add	r1, pc, #4	; (adr r1, 800b498 <_printf_i+0x40>)
 800b494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b498:	0800b4f1 	.word	0x0800b4f1
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b481 	.word	0x0800b481
 800b4a4:	0800b481 	.word	0x0800b481
 800b4a8:	0800b481 	.word	0x0800b481
 800b4ac:	0800b481 	.word	0x0800b481
 800b4b0:	0800b505 	.word	0x0800b505
 800b4b4:	0800b481 	.word	0x0800b481
 800b4b8:	0800b481 	.word	0x0800b481
 800b4bc:	0800b481 	.word	0x0800b481
 800b4c0:	0800b481 	.word	0x0800b481
 800b4c4:	0800b60b 	.word	0x0800b60b
 800b4c8:	0800b531 	.word	0x0800b531
 800b4cc:	0800b5c5 	.word	0x0800b5c5
 800b4d0:	0800b481 	.word	0x0800b481
 800b4d4:	0800b481 	.word	0x0800b481
 800b4d8:	0800b62d 	.word	0x0800b62d
 800b4dc:	0800b481 	.word	0x0800b481
 800b4e0:	0800b531 	.word	0x0800b531
 800b4e4:	0800b481 	.word	0x0800b481
 800b4e8:	0800b481 	.word	0x0800b481
 800b4ec:	0800b5cd 	.word	0x0800b5cd
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	602a      	str	r2, [r5, #0]
 800b4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b500:	2301      	movs	r3, #1
 800b502:	e0a0      	b.n	800b646 <_printf_i+0x1ee>
 800b504:	6820      	ldr	r0, [r4, #0]
 800b506:	682b      	ldr	r3, [r5, #0]
 800b508:	0607      	lsls	r7, r0, #24
 800b50a:	f103 0104 	add.w	r1, r3, #4
 800b50e:	6029      	str	r1, [r5, #0]
 800b510:	d501      	bpl.n	800b516 <_printf_i+0xbe>
 800b512:	681e      	ldr	r6, [r3, #0]
 800b514:	e003      	b.n	800b51e <_printf_i+0xc6>
 800b516:	0646      	lsls	r6, r0, #25
 800b518:	d5fb      	bpl.n	800b512 <_printf_i+0xba>
 800b51a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b51e:	2e00      	cmp	r6, #0
 800b520:	da03      	bge.n	800b52a <_printf_i+0xd2>
 800b522:	232d      	movs	r3, #45	; 0x2d
 800b524:	4276      	negs	r6, r6
 800b526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52a:	230a      	movs	r3, #10
 800b52c:	4859      	ldr	r0, [pc, #356]	; (800b694 <_printf_i+0x23c>)
 800b52e:	e012      	b.n	800b556 <_printf_i+0xfe>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	6820      	ldr	r0, [r4, #0]
 800b534:	1d19      	adds	r1, r3, #4
 800b536:	6029      	str	r1, [r5, #0]
 800b538:	0605      	lsls	r5, r0, #24
 800b53a:	d501      	bpl.n	800b540 <_printf_i+0xe8>
 800b53c:	681e      	ldr	r6, [r3, #0]
 800b53e:	e002      	b.n	800b546 <_printf_i+0xee>
 800b540:	0641      	lsls	r1, r0, #25
 800b542:	d5fb      	bpl.n	800b53c <_printf_i+0xe4>
 800b544:	881e      	ldrh	r6, [r3, #0]
 800b546:	2f6f      	cmp	r7, #111	; 0x6f
 800b548:	bf0c      	ite	eq
 800b54a:	2308      	moveq	r3, #8
 800b54c:	230a      	movne	r3, #10
 800b54e:	4851      	ldr	r0, [pc, #324]	; (800b694 <_printf_i+0x23c>)
 800b550:	2100      	movs	r1, #0
 800b552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b556:	6865      	ldr	r5, [r4, #4]
 800b558:	2d00      	cmp	r5, #0
 800b55a:	bfa8      	it	ge
 800b55c:	6821      	ldrge	r1, [r4, #0]
 800b55e:	60a5      	str	r5, [r4, #8]
 800b560:	bfa4      	itt	ge
 800b562:	f021 0104 	bicge.w	r1, r1, #4
 800b566:	6021      	strge	r1, [r4, #0]
 800b568:	b90e      	cbnz	r6, 800b56e <_printf_i+0x116>
 800b56a:	2d00      	cmp	r5, #0
 800b56c:	d04b      	beq.n	800b606 <_printf_i+0x1ae>
 800b56e:	4615      	mov	r5, r2
 800b570:	fbb6 f1f3 	udiv	r1, r6, r3
 800b574:	fb03 6711 	mls	r7, r3, r1, r6
 800b578:	5dc7      	ldrb	r7, [r0, r7]
 800b57a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b57e:	4637      	mov	r7, r6
 800b580:	42bb      	cmp	r3, r7
 800b582:	460e      	mov	r6, r1
 800b584:	d9f4      	bls.n	800b570 <_printf_i+0x118>
 800b586:	2b08      	cmp	r3, #8
 800b588:	d10b      	bne.n	800b5a2 <_printf_i+0x14a>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	07de      	lsls	r6, r3, #31
 800b58e:	d508      	bpl.n	800b5a2 <_printf_i+0x14a>
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	6861      	ldr	r1, [r4, #4]
 800b594:	4299      	cmp	r1, r3
 800b596:	bfde      	ittt	le
 800b598:	2330      	movle	r3, #48	; 0x30
 800b59a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b59e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5a2:	1b52      	subs	r2, r2, r5
 800b5a4:	6122      	str	r2, [r4, #16]
 800b5a6:	464b      	mov	r3, r9
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	f8cd a000 	str.w	sl, [sp]
 800b5b0:	aa03      	add	r2, sp, #12
 800b5b2:	f7ff fedf 	bl	800b374 <_printf_common>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d14a      	bne.n	800b650 <_printf_i+0x1f8>
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b5be:	b004      	add	sp, #16
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	f043 0320 	orr.w	r3, r3, #32
 800b5ca:	6023      	str	r3, [r4, #0]
 800b5cc:	2778      	movs	r7, #120	; 0x78
 800b5ce:	4832      	ldr	r0, [pc, #200]	; (800b698 <_printf_i+0x240>)
 800b5d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	6829      	ldr	r1, [r5, #0]
 800b5d8:	061f      	lsls	r7, r3, #24
 800b5da:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5de:	d402      	bmi.n	800b5e6 <_printf_i+0x18e>
 800b5e0:	065f      	lsls	r7, r3, #25
 800b5e2:	bf48      	it	mi
 800b5e4:	b2b6      	uxthmi	r6, r6
 800b5e6:	07df      	lsls	r7, r3, #31
 800b5e8:	bf48      	it	mi
 800b5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ee:	6029      	str	r1, [r5, #0]
 800b5f0:	bf48      	it	mi
 800b5f2:	6023      	strmi	r3, [r4, #0]
 800b5f4:	b91e      	cbnz	r6, 800b5fe <_printf_i+0x1a6>
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	f023 0320 	bic.w	r3, r3, #32
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	2310      	movs	r3, #16
 800b600:	e7a6      	b.n	800b550 <_printf_i+0xf8>
 800b602:	4824      	ldr	r0, [pc, #144]	; (800b694 <_printf_i+0x23c>)
 800b604:	e7e4      	b.n	800b5d0 <_printf_i+0x178>
 800b606:	4615      	mov	r5, r2
 800b608:	e7bd      	b.n	800b586 <_printf_i+0x12e>
 800b60a:	682b      	ldr	r3, [r5, #0]
 800b60c:	6826      	ldr	r6, [r4, #0]
 800b60e:	1d18      	adds	r0, r3, #4
 800b610:	6961      	ldr	r1, [r4, #20]
 800b612:	6028      	str	r0, [r5, #0]
 800b614:	0635      	lsls	r5, r6, #24
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	d501      	bpl.n	800b61e <_printf_i+0x1c6>
 800b61a:	6019      	str	r1, [r3, #0]
 800b61c:	e002      	b.n	800b624 <_printf_i+0x1cc>
 800b61e:	0670      	lsls	r0, r6, #25
 800b620:	d5fb      	bpl.n	800b61a <_printf_i+0x1c2>
 800b622:	8019      	strh	r1, [r3, #0]
 800b624:	2300      	movs	r3, #0
 800b626:	4615      	mov	r5, r2
 800b628:	6123      	str	r3, [r4, #16]
 800b62a:	e7bc      	b.n	800b5a6 <_printf_i+0x14e>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	2100      	movs	r1, #0
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	602a      	str	r2, [r5, #0]
 800b634:	681d      	ldr	r5, [r3, #0]
 800b636:	6862      	ldr	r2, [r4, #4]
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 f859 	bl	800b6f0 <memchr>
 800b63e:	b108      	cbz	r0, 800b644 <_printf_i+0x1ec>
 800b640:	1b40      	subs	r0, r0, r5
 800b642:	6060      	str	r0, [r4, #4]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	6123      	str	r3, [r4, #16]
 800b648:	2300      	movs	r3, #0
 800b64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b64e:	e7aa      	b.n	800b5a6 <_printf_i+0x14e>
 800b650:	462a      	mov	r2, r5
 800b652:	4649      	mov	r1, r9
 800b654:	4640      	mov	r0, r8
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	47d0      	blx	sl
 800b65a:	3001      	adds	r0, #1
 800b65c:	d0ad      	beq.n	800b5ba <_printf_i+0x162>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	079b      	lsls	r3, r3, #30
 800b662:	d413      	bmi.n	800b68c <_printf_i+0x234>
 800b664:	68e0      	ldr	r0, [r4, #12]
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	4298      	cmp	r0, r3
 800b66a:	bfb8      	it	lt
 800b66c:	4618      	movlt	r0, r3
 800b66e:	e7a6      	b.n	800b5be <_printf_i+0x166>
 800b670:	2301      	movs	r3, #1
 800b672:	4632      	mov	r2, r6
 800b674:	4649      	mov	r1, r9
 800b676:	4640      	mov	r0, r8
 800b678:	47d0      	blx	sl
 800b67a:	3001      	adds	r0, #1
 800b67c:	d09d      	beq.n	800b5ba <_printf_i+0x162>
 800b67e:	3501      	adds	r5, #1
 800b680:	68e3      	ldr	r3, [r4, #12]
 800b682:	9903      	ldr	r1, [sp, #12]
 800b684:	1a5b      	subs	r3, r3, r1
 800b686:	42ab      	cmp	r3, r5
 800b688:	dcf2      	bgt.n	800b670 <_printf_i+0x218>
 800b68a:	e7eb      	b.n	800b664 <_printf_i+0x20c>
 800b68c:	2500      	movs	r5, #0
 800b68e:	f104 0619 	add.w	r6, r4, #25
 800b692:	e7f5      	b.n	800b680 <_printf_i+0x228>
 800b694:	0800c094 	.word	0x0800c094
 800b698:	0800c0a5 	.word	0x0800c0a5

0800b69c <memmove>:
 800b69c:	4288      	cmp	r0, r1
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	eb01 0402 	add.w	r4, r1, r2
 800b6a4:	d902      	bls.n	800b6ac <memmove+0x10>
 800b6a6:	4284      	cmp	r4, r0
 800b6a8:	4623      	mov	r3, r4
 800b6aa:	d807      	bhi.n	800b6bc <memmove+0x20>
 800b6ac:	1e43      	subs	r3, r0, #1
 800b6ae:	42a1      	cmp	r1, r4
 800b6b0:	d008      	beq.n	800b6c4 <memmove+0x28>
 800b6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ba:	e7f8      	b.n	800b6ae <memmove+0x12>
 800b6bc:	4601      	mov	r1, r0
 800b6be:	4402      	add	r2, r0
 800b6c0:	428a      	cmp	r2, r1
 800b6c2:	d100      	bne.n	800b6c6 <memmove+0x2a>
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ce:	e7f7      	b.n	800b6c0 <memmove+0x24>

0800b6d0 <_sbrk_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4d05      	ldr	r5, [pc, #20]	; (800b6ec <_sbrk_r+0x1c>)
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4608      	mov	r0, r1
 800b6da:	602b      	str	r3, [r5, #0]
 800b6dc:	f7f6 fbba 	bl	8001e54 <_sbrk>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_sbrk_r+0x1a>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_sbrk_r+0x1a>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	20001760 	.word	0x20001760

0800b6f0 <memchr>:
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	b2c9      	uxtb	r1, r1
 800b6f6:	4402      	add	r2, r0
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	d101      	bne.n	800b702 <memchr+0x12>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e003      	b.n	800b70a <memchr+0x1a>
 800b702:	7804      	ldrb	r4, [r0, #0]
 800b704:	3301      	adds	r3, #1
 800b706:	428c      	cmp	r4, r1
 800b708:	d1f6      	bne.n	800b6f8 <memchr+0x8>
 800b70a:	bd10      	pop	{r4, pc}

0800b70c <_realloc_r>:
 800b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b710:	4680      	mov	r8, r0
 800b712:	4614      	mov	r4, r2
 800b714:	460e      	mov	r6, r1
 800b716:	b921      	cbnz	r1, 800b722 <_realloc_r+0x16>
 800b718:	4611      	mov	r1, r2
 800b71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b71e:	f7ff bc45 	b.w	800afac <_malloc_r>
 800b722:	b92a      	cbnz	r2, 800b730 <_realloc_r+0x24>
 800b724:	f7ff fbda 	bl	800aedc <_free_r>
 800b728:	4625      	mov	r5, r4
 800b72a:	4628      	mov	r0, r5
 800b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b730:	f000 f81b 	bl	800b76a <_malloc_usable_size_r>
 800b734:	4284      	cmp	r4, r0
 800b736:	4607      	mov	r7, r0
 800b738:	d802      	bhi.n	800b740 <_realloc_r+0x34>
 800b73a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b73e:	d812      	bhi.n	800b766 <_realloc_r+0x5a>
 800b740:	4621      	mov	r1, r4
 800b742:	4640      	mov	r0, r8
 800b744:	f7ff fc32 	bl	800afac <_malloc_r>
 800b748:	4605      	mov	r5, r0
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0ed      	beq.n	800b72a <_realloc_r+0x1e>
 800b74e:	42bc      	cmp	r4, r7
 800b750:	4622      	mov	r2, r4
 800b752:	4631      	mov	r1, r6
 800b754:	bf28      	it	cs
 800b756:	463a      	movcs	r2, r7
 800b758:	f7ff fbb2 	bl	800aec0 <memcpy>
 800b75c:	4631      	mov	r1, r6
 800b75e:	4640      	mov	r0, r8
 800b760:	f7ff fbbc 	bl	800aedc <_free_r>
 800b764:	e7e1      	b.n	800b72a <_realloc_r+0x1e>
 800b766:	4635      	mov	r5, r6
 800b768:	e7df      	b.n	800b72a <_realloc_r+0x1e>

0800b76a <_malloc_usable_size_r>:
 800b76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76e:	1f18      	subs	r0, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	bfbc      	itt	lt
 800b774:	580b      	ldrlt	r3, [r1, r0]
 800b776:	18c0      	addlt	r0, r0, r3
 800b778:	4770      	bx	lr
	...

0800b77c <_init>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	bf00      	nop
 800b780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b782:	bc08      	pop	{r3}
 800b784:	469e      	mov	lr, r3
 800b786:	4770      	bx	lr

0800b788 <_fini>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	bf00      	nop
 800b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78e:	bc08      	pop	{r3}
 800b790:	469e      	mov	lr, r3
 800b792:	4770      	bx	lr
