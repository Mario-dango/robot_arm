
USB-Eje-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6ac  0800b6ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b6ac  0800b6ac  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b6ac  0800b6ac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6ac  0800b6ac  0001b6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b0  0800b6b0  0001b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200001d4  0800b888  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  0800b888  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154bb  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a30  00000000  00000000  000356fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00039130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2c  00000000  00000000  0003a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b268  00000000  00000000  0003b434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ffc  00000000  00000000  0005669c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009062e  00000000  00000000  00070698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005768  00000000  00000000  00100cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00106430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b1ac 	.word	0x0800b1ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	0800b1ac 	.word	0x0800b1ac

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b43      	ldr	r3, [pc, #268]	; (8000294 <MX_GPIO_Init+0x124>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a42      	ldr	r2, [pc, #264]	; (8000294 <MX_GPIO_Init+0x124>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b40      	ldr	r3, [pc, #256]	; (8000294 <MX_GPIO_Init+0x124>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b3d      	ldr	r3, [pc, #244]	; (8000294 <MX_GPIO_Init+0x124>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a3c      	ldr	r2, [pc, #240]	; (8000294 <MX_GPIO_Init+0x124>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b3a      	ldr	r3, [pc, #232]	; (8000294 <MX_GPIO_Init+0x124>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b37      	ldr	r3, [pc, #220]	; (8000294 <MX_GPIO_Init+0x124>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a36      	ldr	r2, [pc, #216]	; (8000294 <MX_GPIO_Init+0x124>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b34      	ldr	r3, [pc, #208]	; (8000294 <MX_GPIO_Init+0x124>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b31      	ldr	r3, [pc, #196]	; (8000294 <MX_GPIO_Init+0x124>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a30      	ldr	r2, [pc, #192]	; (8000294 <MX_GPIO_Init+0x124>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <MX_GPIO_Init+0x124>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPcb_GPIO_Port, LedPcb_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	482b      	ldr	r0, [pc, #172]	; (8000298 <MX_GPIO_Init+0x128>)
 80001ec:	f002 f844 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, StepM_Z_Pin|PinRoto1_Pin|StepM_X_Pin|DirM_Z_Pin
 80001f0:	2200      	movs	r2, #0
 80001f2:	f240 11bf 	movw	r1, #447	; 0x1bf
 80001f6:	4829      	ldr	r0, [pc, #164]	; (800029c <MX_GPIO_Init+0x12c>)
 80001f8:	f002 f83e 	bl	8002278 <HAL_GPIO_WritePin>
                          |DirM_Y_Pin|DirM_X_Pin|azul_Pin|StepM_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ResetMotors_Pin|SleepMotors_Pin|PinRoto2_Pin|EnableMotors_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f248 1130 	movw	r1, #33072	; 0x8130
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <MX_GPIO_Init+0x130>)
 8000204:	f002 f838 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedPcb_Pin;
 8000208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800020c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020e:	2301      	movs	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000216:	2302      	movs	r3, #2
 8000218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedPcb_GPIO_Port, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	481d      	ldr	r0, [pc, #116]	; (8000298 <MX_GPIO_Init+0x128>)
 8000222:	f001 fea5 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = StepM_Z_Pin|PinRoto1_Pin|StepM_X_Pin|DirM_Z_Pin
 8000226:	f240 13bf 	movw	r3, #447	; 0x1bf
 800022a:	613b      	str	r3, [r7, #16]
                          |DirM_Y_Pin|DirM_X_Pin|azul_Pin|StepM_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022c:	2301      	movs	r3, #1
 800022e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	2302      	movs	r3, #2
 8000236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000238:	f107 0310 	add.w	r3, r7, #16
 800023c:	4619      	mov	r1, r3
 800023e:	4817      	ldr	r0, [pc, #92]	; (800029c <MX_GPIO_Init+0x12c>)
 8000240:	f001 fe96 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = StopM_Z_Pin|StopM_Y_Pin|StopM_X_Pin;
 8000244:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800024a:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <MX_GPIO_Init+0x134>)
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	4619      	mov	r1, r3
 8000258:	4811      	ldr	r0, [pc, #68]	; (80002a0 <MX_GPIO_Init+0x130>)
 800025a:	f001 fe89 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ResetMotors_Pin|SleepMotors_Pin|PinRoto2_Pin|EnableMotors_Pin;
 800025e:	f248 1330 	movw	r3, #33072	; 0x8130
 8000262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	2301      	movs	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2302      	movs	r3, #2
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	4619      	mov	r1, r3
 8000276:	480a      	ldr	r0, [pc, #40]	; (80002a0 <MX_GPIO_Init+0x130>)
 8000278:	f001 fe7a 	bl	8001f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2100      	movs	r1, #0
 8000280:	2028      	movs	r0, #40	; 0x28
 8000282:	f001 fe3e 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000286:	2028      	movs	r0, #40	; 0x28
 8000288:	f001 fe57 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	40011000 	.word	0x40011000
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	10110000 	.word	0x10110000

080002a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002ae:	4a13      	ldr	r2, [pc, #76]	; (80002fc <MX_I2C2_Init+0x54>)
 80002b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <MX_I2C2_Init+0x58>)
 80002b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_I2C2_Init+0x50>)
 80002e6:	f002 f811 	bl	800230c <HAL_I2C_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002f0:	f001 fa22 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200001f0 	.word	0x200001f0
 80002fc:	40005800 	.word	0x40005800
 8000300:	000186a0 	.word	0x000186a0

08000304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a16      	ldr	r2, [pc, #88]	; (8000378 <HAL_I2C_MspInit+0x74>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d124      	bne.n	800036e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <HAL_I2C_MspInit+0x78>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <HAL_I2C_MspInit+0x78>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <HAL_I2C_MspInit+0x78>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800033c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000342:	2312      	movs	r3, #18
 8000344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000346:	2303      	movs	r3, #3
 8000348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <HAL_I2C_MspInit+0x7c>)
 8000352:	f001 fe0d 	bl	8001f70 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_I2C_MspInit+0x78>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a08      	ldr	r2, [pc, #32]	; (800037c <HAL_I2C_MspInit+0x78>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000360:	61d3      	str	r3, [r2, #28]
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <HAL_I2C_MspInit+0x78>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40005800 	.word	0x40005800
 800037c:	40021000 	.word	0x40021000
 8000380:	40010c00 	.word	0x40010c00

08000384 <Lcd_Send_Cmd>:
#include "i2c.h"
#include "lcd_i2c.h"

void Lcd_Send_Cmd(char cmd)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af02      	add	r7, sp, #8
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f023 030f 	bic.w	r3, r3, #15
 8000394:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xF0);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	f043 030c 	orr.w	r3, r3, #12
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	f043 0308 	orr.w	r3, r3, #8
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;
 80003b0:	7bbb      	ldrb	r3, [r7, #14]
 80003b2:	f043 030c 	orr.w	r3, r3, #12
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;
 80003ba:	7bbb      	ldrb	r3, [r7, #14]
 80003bc:	f043 0308 	orr.w	r3, r3, #8
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS,(uint8_t*) data_t, 4, 100);
 80003c4:	f107 0208 	add.w	r2, r7, #8
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2304      	movs	r3, #4
 80003ce:	214e      	movs	r1, #78	; 0x4e
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <Lcd_Send_Cmd+0x5c>)
 80003d2:	f002 f8df 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200001f0 	.word	0x200001f0

080003e4 <Lcd_Send_Char>:

void Lcd_Send_Char(char data)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af02      	add	r7, sp, #8
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f023 030f 	bic.w	r3, r3, #15
 80003f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4) & 0xF0);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	f043 030d 	orr.w	r3, r3, #13
 8000402:	b2db      	uxtb	r3, r3
 8000404:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	f043 0309 	orr.w	r3, r3, #9
 800040c:	b2db      	uxtb	r3, r3
 800040e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 8000410:	7bbb      	ldrb	r3, [r7, #14]
 8000412:	f043 030d 	orr.w	r3, r3, #13
 8000416:	b2db      	uxtb	r3, r3
 8000418:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	f043 0309 	orr.w	r3, r3, #9
 8000420:	b2db      	uxtb	r3, r3
 8000422:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS,(uint8_t*) data_t, 4, 100);
 8000424:	f107 0208 	add.w	r2, r7, #8
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2304      	movs	r3, #4
 800042e:	214e      	movs	r1, #78	; 0x4e
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <Lcd_Send_Char+0x5c>)
 8000432:	f002 f8af 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200001f0 	.word	0x200001f0

08000444 <Lcd_Init>:

void Lcd_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	HAL_Delay(60);
 8000448:	203c      	movs	r0, #60	; 0x3c
 800044a:	f001 fc5f 	bl	8001d0c <HAL_Delay>
	Lcd_Send_Cmd(0x02);
 800044e:	2002      	movs	r0, #2
 8000450:	f7ff ff98 	bl	8000384 <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x28);
 8000454:	2028      	movs	r0, #40	; 0x28
 8000456:	f7ff ff95 	bl	8000384 <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x0C);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff92 	bl	8000384 <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x80);
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	f7ff ff8f 	bl	8000384 <Lcd_Send_Cmd>
	Lcd_Send_Cmd(0x01);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff8c 	bl	8000384 <Lcd_Send_Cmd>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <Lcd_Clear>:

void Lcd_Clear(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd(0x01);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff85 	bl	8000384 <Lcd_Send_Cmd>
	HAL_Delay(2);
 800047a:	2002      	movs	r0, #2
 800047c:	f001 fc46 	bl	8001d0c <HAL_Delay>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <Lcd_Set_Cursor>:

void Lcd_Set_Cursor(int row, int col)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
	uint8_t address;
	switch(row)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3b01      	subs	r3, #1
 8000492:	2b03      	cmp	r3, #3
 8000494:	d816      	bhi.n	80004c4 <Lcd_Set_Cursor+0x40>
 8000496:	a201      	add	r2, pc, #4	; (adr r2, 800049c <Lcd_Set_Cursor+0x18>)
 8000498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049c:	080004ad 	.word	0x080004ad
 80004a0:	080004b3 	.word	0x080004b3
 80004a4:	080004b9 	.word	0x080004b9
 80004a8:	080004bf 	.word	0x080004bf
	{
		case 1:
			address = 0x00;
 80004ac:	2300      	movs	r3, #0
 80004ae:	73fb      	strb	r3, [r7, #15]
			break;
 80004b0:	e008      	b.n	80004c4 <Lcd_Set_Cursor+0x40>
		case 2:
			address = 0x40;
 80004b2:	2340      	movs	r3, #64	; 0x40
 80004b4:	73fb      	strb	r3, [r7, #15]
			break;
 80004b6:	e005      	b.n	80004c4 <Lcd_Set_Cursor+0x40>
		case 3:
			address = 0x14;
 80004b8:	2314      	movs	r3, #20
 80004ba:	73fb      	strb	r3, [r7, #15]
			break;
 80004bc:	e002      	b.n	80004c4 <Lcd_Set_Cursor+0x40>
		case 4:
			address = 0x54;
 80004be:	2354      	movs	r3, #84	; 0x54
 80004c0:	73fb      	strb	r3, [r7, #15]
			break;
 80004c2:	bf00      	nop
	}
	address += col - 1;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	4413      	add	r3, r2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	3b01      	subs	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
	Lcd_Send_Cmd(0x80 | address);
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff52 	bl	8000384 <Lcd_Send_Cmd>

}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Lcd_Send_String>:

void Lcd_Send_String(char *str)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	while(*str) Lcd_Send_Char(*str++);
 80004f0:	e006      	b.n	8000500 <Lcd_Send_String+0x18>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff72 	bl	80003e4 <Lcd_Send_Char>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1f4      	bne.n	80004f2 <Lcd_Send_String+0xa>
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <Lcd_Blink>:
{
	Lcd_Send_Cmd(0x18);
}

void Lcd_Blink(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd(0x0F);
 8000516:	200f      	movs	r0, #15
 8000518:	f7ff ff34 	bl	8000384 <Lcd_Send_Cmd>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b0c4      	sub	sp, #272	; 0x110
 8000524:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f001 fb8f 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 fdb9 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f7ff fe1f 	bl	8000170 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000532:	f001 f9cb 	bl	80018cc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000536:	f009 fc45 	bl	8009dc4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800053a:	f001 fa61 	bl	8001a00 <MX_TIM4_Init>
  MX_TIM3_Init();
 800053e:	f001 fa11 	bl	8001964 <MX_TIM3_Init>
  MX_I2C2_Init();
 8000542:	f7ff feb1 	bl	80002a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Apartado para inicializar el LCD
  Lcd_Init();
 8000546:	f7ff ff7d 	bl	8000444 <Lcd_Init>


  ///// Configurar los Buses Reset, Sleep y Enable
  HAL_GPIO_WritePin(ResetMotors_GPIO_Port, ResetMotors_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000550:	489e      	ldr	r0, [pc, #632]	; (80007cc <main+0x2ac>)
 8000552:	f001 fe91 	bl	8002278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SleepMotors_GPIO_Port, SleepMotors_Pin, RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2110      	movs	r1, #16
 800055a:	489c      	ldr	r0, [pc, #624]	; (80007cc <main+0x2ac>)
 800055c:	f001 fe8c 	bl	8002278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000566:	4899      	ldr	r0, [pc, #612]	; (80007cc <main+0x2ac>)
 8000568:	f001 fe86 	bl	8002278 <HAL_GPIO_WritePin>

  // Inicialización de cada motor
  motors[0] = (StepperMotor){StepM_X_GPIO_Port, StepM_X_Pin, DirM_X_GPIO_Port, DirM_X_Pin, DirM_X, velMotor_X, microSteppingM_X, 0, 0, 0, 0, flagStopM_X};
 800056c:	4b98      	ldr	r3, [pc, #608]	; (80007d0 <main+0x2b0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461d      	mov	r5, r3
 8000572:	4b98      	ldr	r3, [pc, #608]	; (80007d4 <main+0x2b4>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	461c      	mov	r4, r3
 8000578:	4b97      	ldr	r3, [pc, #604]	; (80007d8 <main+0x2b8>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	4b97      	ldr	r3, [pc, #604]	; (80007dc <main+0x2bc>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	4b96      	ldr	r3, [pc, #600]	; (80007e0 <main+0x2c0>)
 8000586:	4a97      	ldr	r2, [pc, #604]	; (80007e4 <main+0x2c4>)
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	4b95      	ldr	r3, [pc, #596]	; (80007e0 <main+0x2c0>)
 800058c:	2204      	movs	r2, #4
 800058e:	809a      	strh	r2, [r3, #4]
 8000590:	4b93      	ldr	r3, [pc, #588]	; (80007e0 <main+0x2c0>)
 8000592:	4a94      	ldr	r2, [pc, #592]	; (80007e4 <main+0x2c4>)
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	4b92      	ldr	r3, [pc, #584]	; (80007e0 <main+0x2c0>)
 8000598:	2220      	movs	r2, #32
 800059a:	819a      	strh	r2, [r3, #12]
 800059c:	4b90      	ldr	r3, [pc, #576]	; (80007e0 <main+0x2c0>)
 800059e:	611d      	str	r5, [r3, #16]
 80005a0:	4b8f      	ldr	r3, [pc, #572]	; (80007e0 <main+0x2c0>)
 80005a2:	615c      	str	r4, [r3, #20]
 80005a4:	4b8e      	ldr	r3, [pc, #568]	; (80007e0 <main+0x2c0>)
 80005a6:	6198      	str	r0, [r3, #24]
 80005a8:	4b8d      	ldr	r3, [pc, #564]	; (80007e0 <main+0x2c0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
 80005ae:	4b8c      	ldr	r3, [pc, #560]	; (80007e0 <main+0x2c0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
 80005b4:	4b8a      	ldr	r3, [pc, #552]	; (80007e0 <main+0x2c0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
 80005ba:	4b89      	ldr	r3, [pc, #548]	; (80007e0 <main+0x2c0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
 80005c0:	4b87      	ldr	r3, [pc, #540]	; (80007e0 <main+0x2c0>)
 80005c2:	62d9      	str	r1, [r3, #44]	; 0x2c
  motors[1] = (StepperMotor){StepM_Y_GPIO_Port, StepM_Y_Pin, DirM_Y_GPIO_Port, DirM_Y_Pin, DirM_Y, velMotor_Y, microSteppingM_Y, 0, 0, 0, 0, flagStopM_Y};
 80005c4:	4b88      	ldr	r3, [pc, #544]	; (80007e8 <main+0x2c8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461d      	mov	r5, r3
 80005ca:	4b88      	ldr	r3, [pc, #544]	; (80007ec <main+0x2cc>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	461c      	mov	r4, r3
 80005d0:	4b87      	ldr	r3, [pc, #540]	; (80007f0 <main+0x2d0>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	4b87      	ldr	r3, [pc, #540]	; (80007f4 <main+0x2d4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	4b80      	ldr	r3, [pc, #512]	; (80007e0 <main+0x2c0>)
 80005de:	4a81      	ldr	r2, [pc, #516]	; (80007e4 <main+0x2c4>)
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	4b7f      	ldr	r3, [pc, #508]	; (80007e0 <main+0x2c0>)
 80005e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e8:	869a      	strh	r2, [r3, #52]	; 0x34
 80005ea:	4b7d      	ldr	r3, [pc, #500]	; (80007e0 <main+0x2c0>)
 80005ec:	4a7d      	ldr	r2, [pc, #500]	; (80007e4 <main+0x2c4>)
 80005ee:	639a      	str	r2, [r3, #56]	; 0x38
 80005f0:	4b7b      	ldr	r3, [pc, #492]	; (80007e0 <main+0x2c0>)
 80005f2:	2210      	movs	r2, #16
 80005f4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80005f6:	4b7a      	ldr	r3, [pc, #488]	; (80007e0 <main+0x2c0>)
 80005f8:	641d      	str	r5, [r3, #64]	; 0x40
 80005fa:	4b79      	ldr	r3, [pc, #484]	; (80007e0 <main+0x2c0>)
 80005fc:	645c      	str	r4, [r3, #68]	; 0x44
 80005fe:	4b78      	ldr	r3, [pc, #480]	; (80007e0 <main+0x2c0>)
 8000600:	6498      	str	r0, [r3, #72]	; 0x48
 8000602:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <main+0x2c0>)
 8000604:	2200      	movs	r2, #0
 8000606:	64da      	str	r2, [r3, #76]	; 0x4c
 8000608:	4b75      	ldr	r3, [pc, #468]	; (80007e0 <main+0x2c0>)
 800060a:	2200      	movs	r2, #0
 800060c:	651a      	str	r2, [r3, #80]	; 0x50
 800060e:	4b74      	ldr	r3, [pc, #464]	; (80007e0 <main+0x2c0>)
 8000610:	2200      	movs	r2, #0
 8000612:	655a      	str	r2, [r3, #84]	; 0x54
 8000614:	4b72      	ldr	r3, [pc, #456]	; (80007e0 <main+0x2c0>)
 8000616:	2200      	movs	r2, #0
 8000618:	659a      	str	r2, [r3, #88]	; 0x58
 800061a:	4b71      	ldr	r3, [pc, #452]	; (80007e0 <main+0x2c0>)
 800061c:	65d9      	str	r1, [r3, #92]	; 0x5c
  motors[2] = (StepperMotor){StepM_Z_GPIO_Port, StepM_Z_Pin, DirM_Z_GPIO_Port, DirM_Z_Pin, DirM_Z, velMotor_Z, microSteppingM_Z, 0, 0, 0, 0, flagStopM_Z};
 800061e:	4b76      	ldr	r3, [pc, #472]	; (80007f8 <main+0x2d8>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461d      	mov	r5, r3
 8000624:	4b75      	ldr	r3, [pc, #468]	; (80007fc <main+0x2dc>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461c      	mov	r4, r3
 800062a:	4b75      	ldr	r3, [pc, #468]	; (8000800 <main+0x2e0>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	4b74      	ldr	r3, [pc, #464]	; (8000804 <main+0x2e4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <main+0x2c0>)
 8000638:	4a6a      	ldr	r2, [pc, #424]	; (80007e4 <main+0x2c4>)
 800063a:	661a      	str	r2, [r3, #96]	; 0x60
 800063c:	4b68      	ldr	r3, [pc, #416]	; (80007e0 <main+0x2c0>)
 800063e:	2201      	movs	r2, #1
 8000640:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8000644:	4b66      	ldr	r3, [pc, #408]	; (80007e0 <main+0x2c0>)
 8000646:	4a67      	ldr	r2, [pc, #412]	; (80007e4 <main+0x2c4>)
 8000648:	669a      	str	r2, [r3, #104]	; 0x68
 800064a:	4b65      	ldr	r3, [pc, #404]	; (80007e0 <main+0x2c0>)
 800064c:	2208      	movs	r2, #8
 800064e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8000652:	4b63      	ldr	r3, [pc, #396]	; (80007e0 <main+0x2c0>)
 8000654:	671d      	str	r5, [r3, #112]	; 0x70
 8000656:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <main+0x2c0>)
 8000658:	675c      	str	r4, [r3, #116]	; 0x74
 800065a:	4b61      	ldr	r3, [pc, #388]	; (80007e0 <main+0x2c0>)
 800065c:	6798      	str	r0, [r3, #120]	; 0x78
 800065e:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <main+0x2c0>)
 8000660:	2200      	movs	r2, #0
 8000662:	67da      	str	r2, [r3, #124]	; 0x7c
 8000664:	4b5e      	ldr	r3, [pc, #376]	; (80007e0 <main+0x2c0>)
 8000666:	2200      	movs	r2, #0
 8000668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800066c:	4b5c      	ldr	r3, [pc, #368]	; (80007e0 <main+0x2c0>)
 800066e:	2200      	movs	r2, #0
 8000670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000674:	4b5a      	ldr	r3, [pc, #360]	; (80007e0 <main+0x2c0>)
 8000676:	2200      	movs	r2, #0
 8000678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800067c:	4b58      	ldr	r3, [pc, #352]	; (80007e0 <main+0x2c0>)
 800067e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c

  HAL_TIM_Base_Start_IT(&htim2);			// Iniciar el temporizador con interrupción
 8000682:	4861      	ldr	r0, [pc, #388]	; (8000808 <main+0x2e8>)
 8000684:	f004 fd4e 	bl	8005124 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000688:	210c      	movs	r1, #12
 800068a:	4860      	ldr	r0, [pc, #384]	; (800080c <main+0x2ec>)
 800068c:	f004 fe22 	bl	80052d4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);			// Iniciar el temporizador con interrupción
 8000690:	485e      	ldr	r0, [pc, #376]	; (800080c <main+0x2ec>)
 8000692:	f004 fd47 	bl	8005124 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000696:	485e      	ldr	r0, [pc, #376]	; (8000810 <main+0x2f0>)
 8000698:	f004 fd44 	bl	8005124 <HAL_TIM_Base_Start_IT>


  // Envio datos al puerto USB
  CDC_Transmit_FS((uint8_t *) data, strlen (data));
 800069c:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <main+0x2f4>)
 800069e:	681c      	ldr	r4, [r3, #0]
 80006a0:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <main+0x2f4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd5b 	bl	8000160 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	4620      	mov	r0, r4
 80006b2:	f009 fc57 	bl	8009f64 <CDC_Transmit_FS>

  Lcd_Clear();
 80006b6:	f7ff fedb 	bl	8000470 <Lcd_Clear>
  Lcd_Set_Cursor(1,1);
 80006ba:	2101      	movs	r1, #1
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fee1 	bl	8000484 <Lcd_Set_Cursor>
  Lcd_Send_String("La Gaaarra!");
 80006c2:	4855      	ldr	r0, [pc, #340]	; (8000818 <main+0x2f8>)
 80006c4:	f7ff ff10 	bl	80004e8 <Lcd_Send_String>
  Lcd_Set_Cursor(2,1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	2002      	movs	r0, #2
 80006cc:	f7ff feda 	bl	8000484 <Lcd_Set_Cursor>
  Lcd_Send_String("By: Mario uwu");
 80006d0:	4852      	ldr	r0, [pc, #328]	; (800081c <main+0x2fc>)
 80006d2:	f7ff ff09 	bl	80004e8 <Lcd_Send_String>
  Lcd_Set_Cursor(2,14);
 80006d6:	210e      	movs	r1, #14
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff fed3 	bl	8000484 <Lcd_Set_Cursor>
  Lcd_Blink();
 80006de:	f7ff ff18 	bl	8000512 <Lcd_Blink>
  HAL_Delay(2000);
 80006e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e6:	f001 fb11 	bl	8001d0c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flagUsb == 1){
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <main+0x300>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	f040 837b 	bne.w	8000dea <main+0x8ca>
		  HAL_GPIO_TogglePin(LedPcb_GPIO_Port, LedPcb_Pin);
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	484a      	ldr	r0, [pc, #296]	; (8000824 <main+0x304>)
 80006fa:	f001 fdd5 	bl	80022a8 <HAL_GPIO_TogglePin>
		  CDC_FS_Substring(1, 1, buffer_rx, buffer_data[0]);
 80006fe:	4b4a      	ldr	r3, [pc, #296]	; (8000828 <main+0x308>)
 8000700:	4a4a      	ldr	r2, [pc, #296]	; (800082c <main+0x30c>)
 8000702:	2101      	movs	r1, #1
 8000704:	2001      	movs	r0, #1
 8000706:	f000 ff69 	bl	80015dc <CDC_FS_Substring>
//		  buffer_data[0] -> opcion
//		  if (*buffer_data[0] == 'H'){
		  if (buffer_data[0][0] == 'H'){
 800070a:	4b47      	ldr	r3, [pc, #284]	; (8000828 <main+0x308>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b48      	cmp	r3, #72	; 0x48
 8000710:	f040 8145 	bne.w	800099e <main+0x47e>
			  // Recordar poner ne homming el sevomotor también cerrado
			  Servo_Write_angle(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 ff3f 	bl	8001598 <Servo_Write_angle>
			  estadoGarra = 0;
 800071a:	4b45      	ldr	r3, [pc, #276]	; (8000830 <main+0x310>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
			  int homeStatus = HomingMotors(&homeMotor_X, &homeMotor_Y, &homeMotor_Z);
 8000720:	4a44      	ldr	r2, [pc, #272]	; (8000834 <main+0x314>)
 8000722:	4945      	ldr	r1, [pc, #276]	; (8000838 <main+0x318>)
 8000724:	4845      	ldr	r0, [pc, #276]	; (800083c <main+0x31c>)
 8000726:	f000 fd15 	bl	8001154 <HomingMotors>
 800072a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
//			  HAL_Delay(500);
			  if (homeStatus == 0){
 800072e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000732:	2b00      	cmp	r3, #0
 8000734:	d122      	bne.n	800077c <main+0x25c>
				  sprintf(buffer_tx, "Home Status: %u\nHome exitoso!\r\n", homeStatus);
 8000736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800073a:	4941      	ldr	r1, [pc, #260]	; (8000840 <main+0x320>)
 800073c:	4841      	ldr	r0, [pc, #260]	; (8000844 <main+0x324>)
 800073e:	f00a f87b 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000742:	4840      	ldr	r0, [pc, #256]	; (8000844 <main+0x324>)
 8000744:	f7ff fd0c 	bl	8000160 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29b      	uxth	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	483d      	ldr	r0, [pc, #244]	; (8000844 <main+0x324>)
 8000750:	f009 fc08 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Clear();
 8000754:	f7ff fe8c 	bl	8000470 <Lcd_Clear>
				  Lcd_Set_Cursor(1,1);
 8000758:	2101      	movs	r1, #1
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff fe92 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("Home Status: OK");
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <main+0x328>)
 8000762:	f7ff fec1 	bl	80004e8 <Lcd_Send_String>
	 			  Lcd_Set_Cursor(2,1);
 8000766:	2101      	movs	r1, #1
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fe8b 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("X000|Y000|Z000|C");
 800076e:	4837      	ldr	r0, [pc, #220]	; (800084c <main+0x32c>)
 8000770:	f7ff feba 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 8000774:	2096      	movs	r0, #150	; 0x96
 8000776:	f001 fac9 	bl	8001d0c <HAL_Delay>
 800077a:	e10b      	b.n	8000994 <main+0x474>
			  } else if (homeStatus == -1){
 800077c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d168      	bne.n	8000858 <main+0x338>
				  sprintf(buffer_tx, "Home Status: %u\nHome exitoso!\r\n", homeStatus);
 8000786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800078a:	492d      	ldr	r1, [pc, #180]	; (8000840 <main+0x320>)
 800078c:	482d      	ldr	r0, [pc, #180]	; (8000844 <main+0x324>)
 800078e:	f00a f853 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000792:	482c      	ldr	r0, [pc, #176]	; (8000844 <main+0x324>)
 8000794:	f7ff fce4 	bl	8000160 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29b      	uxth	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	4829      	ldr	r0, [pc, #164]	; (8000844 <main+0x324>)
 80007a0:	f009 fbe0 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Clear();
 80007a4:	f7ff fe64 	bl	8000470 <Lcd_Clear>
				  Lcd_Set_Cursor(1,1);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fe6a 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("Home Error: ejeX");
 80007b0:	4827      	ldr	r0, [pc, #156]	; (8000850 <main+0x330>)
 80007b2:	f7ff fe99 	bl	80004e8 <Lcd_Send_String>
	 			  Lcd_Set_Cursor(2,1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff fe63 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("X???|Y000|Z000|C");
 80007be:	4825      	ldr	r0, [pc, #148]	; (8000854 <main+0x334>)
 80007c0:	f7ff fe92 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 80007c4:	2096      	movs	r0, #150	; 0x96
 80007c6:	f001 faa1 	bl	8001d0c <HAL_Delay>
 80007ca:	e0e3      	b.n	8000994 <main+0x474>
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	200002dc 	.word	0x200002dc
 80007d4:	200002d6 	.word	0x200002d6
 80007d8:	20000000 	.word	0x20000000
 80007dc:	200002df 	.word	0x200002df
 80007e0:	20000244 	.word	0x20000244
 80007e4:	40010800 	.word	0x40010800
 80007e8:	200002dd 	.word	0x200002dd
 80007ec:	200002d8 	.word	0x200002d8
 80007f0:	20000001 	.word	0x20000001
 80007f4:	200002e0 	.word	0x200002e0
 80007f8:	200002de 	.word	0x200002de
 80007fc:	200002da 	.word	0x200002da
 8000800:	20000002 	.word	0x20000002
 8000804:	200002e1 	.word	0x200002e1
 8000808:	20000350 	.word	0x20000350
 800080c:	200003e0 	.word	0x200003e0
 8000810:	20000398 	.word	0x20000398
 8000814:	20000004 	.word	0x20000004
 8000818:	0800b1d4 	.word	0x0800b1d4
 800081c:	0800b1e0 	.word	0x0800b1e0
 8000820:	200002ed 	.word	0x200002ed
 8000824:	40011000 	.word	0x40011000
 8000828:	2000032c 	.word	0x2000032c
 800082c:	200002f0 	.word	0x200002f0
 8000830:	200002d4 	.word	0x200002d4
 8000834:	200002e4 	.word	0x200002e4
 8000838:	200002e3 	.word	0x200002e3
 800083c:	200002e2 	.word	0x200002e2
 8000840:	0800b1f0 	.word	0x0800b1f0
 8000844:	20000304 	.word	0x20000304
 8000848:	0800b210 	.word	0x0800b210
 800084c:	0800b220 	.word	0x0800b220
 8000850:	0800b234 	.word	0x0800b234
 8000854:	0800b248 	.word	0x0800b248
			  } else if (homeStatus == -1){
 8000858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d122      	bne.n	80008a8 <main+0x388>
				  sprintf(buffer_tx, "Home Status: %u\nFalla Home X!\r\n", homeStatus);
 8000862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000866:	49c0      	ldr	r1, [pc, #768]	; (8000b68 <main+0x648>)
 8000868:	48c0      	ldr	r0, [pc, #768]	; (8000b6c <main+0x64c>)
 800086a:	f009 ffe5 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 800086e:	48bf      	ldr	r0, [pc, #764]	; (8000b6c <main+0x64c>)
 8000870:	f7ff fc76 	bl	8000160 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b29b      	uxth	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	48bc      	ldr	r0, [pc, #752]	; (8000b6c <main+0x64c>)
 800087c:	f009 fb72 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Clear();
 8000880:	f7ff fdf6 	bl	8000470 <Lcd_Clear>
				  Lcd_Set_Cursor(1,1);
 8000884:	2101      	movs	r1, #1
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff fdfc 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("Home Error: ejeX");
 800088c:	48b8      	ldr	r0, [pc, #736]	; (8000b70 <main+0x650>)
 800088e:	f7ff fe2b 	bl	80004e8 <Lcd_Send_String>
	 			  Lcd_Set_Cursor(2,1);
 8000892:	2101      	movs	r1, #1
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff fdf5 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("X???|Y000|Z000|C");
 800089a:	48b6      	ldr	r0, [pc, #728]	; (8000b74 <main+0x654>)
 800089c:	f7ff fe24 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 80008a0:	2096      	movs	r0, #150	; 0x96
 80008a2:	f001 fa33 	bl	8001d0c <HAL_Delay>
 80008a6:	e075      	b.n	8000994 <main+0x474>
			  } else if (homeStatus == -2){
 80008a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80008ac:	f113 0f02 	cmn.w	r3, #2
 80008b0:	d122      	bne.n	80008f8 <main+0x3d8>
				  sprintf(buffer_tx, "Home Status: %u\nFalla Home Y!\r\n", homeStatus);
 80008b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <main+0x658>)
 80008b8:	48ac      	ldr	r0, [pc, #688]	; (8000b6c <main+0x64c>)
 80008ba:	f009 ffbd 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80008be:	48ab      	ldr	r0, [pc, #684]	; (8000b6c <main+0x64c>)
 80008c0:	f7ff fc4e 	bl	8000160 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	48a8      	ldr	r0, [pc, #672]	; (8000b6c <main+0x64c>)
 80008cc:	f009 fb4a 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Clear();
 80008d0:	f7ff fdce 	bl	8000470 <Lcd_Clear>
				  Lcd_Set_Cursor(1,1);
 80008d4:	2101      	movs	r1, #1
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fdd4 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("Home Error: ejeX");
 80008dc:	48a4      	ldr	r0, [pc, #656]	; (8000b70 <main+0x650>)
 80008de:	f7ff fe03 	bl	80004e8 <Lcd_Send_String>
	 			  Lcd_Set_Cursor(2,1);
 80008e2:	2101      	movs	r1, #1
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fdcd 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("X000|Y???|Z000|C");
 80008ea:	48a4      	ldr	r0, [pc, #656]	; (8000b7c <main+0x65c>)
 80008ec:	f7ff fdfc 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 80008f0:	2096      	movs	r0, #150	; 0x96
 80008f2:	f001 fa0b 	bl	8001d0c <HAL_Delay>
 80008f6:	e04d      	b.n	8000994 <main+0x474>
			  } else if (homeStatus == -3){
 80008f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80008fc:	f113 0f03 	cmn.w	r3, #3
 8000900:	d122      	bne.n	8000948 <main+0x428>
				  sprintf(buffer_tx, "Home Status: %u\nFalla Home Z!\r\n", homeStatus);
 8000902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000906:	499e      	ldr	r1, [pc, #632]	; (8000b80 <main+0x660>)
 8000908:	4898      	ldr	r0, [pc, #608]	; (8000b6c <main+0x64c>)
 800090a:	f009 ff95 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 800090e:	4897      	ldr	r0, [pc, #604]	; (8000b6c <main+0x64c>)
 8000910:	f7ff fc26 	bl	8000160 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29b      	uxth	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	4894      	ldr	r0, [pc, #592]	; (8000b6c <main+0x64c>)
 800091c:	f009 fb22 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Clear();
 8000920:	f7ff fda6 	bl	8000470 <Lcd_Clear>
				  Lcd_Set_Cursor(1,1);
 8000924:	2101      	movs	r1, #1
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fdac 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("Home Error: ejeX");
 800092c:	4890      	ldr	r0, [pc, #576]	; (8000b70 <main+0x650>)
 800092e:	f7ff fddb 	bl	80004e8 <Lcd_Send_String>
	 			  Lcd_Set_Cursor(2,1);
 8000932:	2101      	movs	r1, #1
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff fda5 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("X000|Y000|Z???|C");
 800093a:	4892      	ldr	r0, [pc, #584]	; (8000b84 <main+0x664>)
 800093c:	f7ff fdd4 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 8000940:	2096      	movs	r0, #150	; 0x96
 8000942:	f001 f9e3 	bl	8001d0c <HAL_Delay>
 8000946:	e025      	b.n	8000994 <main+0x474>
			  } else if (homeStatus == 1){
 8000948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800094c:	2b01      	cmp	r3, #1
 800094e:	d121      	bne.n	8000994 <main+0x474>
				  sprintf(buffer_tx, "Home Status: %u\nFalla en funcHome!\r\n", homeStatus);
 8000950:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000954:	498c      	ldr	r1, [pc, #560]	; (8000b88 <main+0x668>)
 8000956:	4885      	ldr	r0, [pc, #532]	; (8000b6c <main+0x64c>)
 8000958:	f009 ff6e 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 800095c:	4883      	ldr	r0, [pc, #524]	; (8000b6c <main+0x64c>)
 800095e:	f7ff fbff 	bl	8000160 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29b      	uxth	r3, r3
 8000966:	4619      	mov	r1, r3
 8000968:	4880      	ldr	r0, [pc, #512]	; (8000b6c <main+0x64c>)
 800096a:	f009 fafb 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Clear();
 800096e:	f7ff fd7f 	bl	8000470 <Lcd_Clear>
				  Lcd_Set_Cursor(1,1);
 8000972:	2101      	movs	r1, #1
 8000974:	2001      	movs	r0, #1
 8000976:	f7ff fd85 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("ERROR Home: all!");
 800097a:	4884      	ldr	r0, [pc, #528]	; (8000b8c <main+0x66c>)
 800097c:	f7ff fdb4 	bl	80004e8 <Lcd_Send_String>
	 			  Lcd_Set_Cursor(2,1);
 8000980:	2101      	movs	r1, #1
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff fd7e 	bl	8000484 <Lcd_Set_Cursor>
	 			  Lcd_Send_String("X???|Y???|Z???|?");
 8000988:	4881      	ldr	r0, [pc, #516]	; (8000b90 <main+0x670>)
 800098a:	f7ff fdad 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 800098e:	2096      	movs	r0, #150	; 0x96
 8000990:	f001 f9bc 	bl	8001d0c <HAL_Delay>
			  }
			  HAL_Delay(1500);
 8000994:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000998:	f001 f9b8 	bl	8001d0c <HAL_Delay>
 800099c:	e221      	b.n	8000de2 <main+0x8c2>
		  }
		  //	CASO DE SETEO PARA VELOCIDADES GLOBALES
		  else if (buffer_data[0][0] == 'V'){
 800099e:	4b7d      	ldr	r3, [pc, #500]	; (8000b94 <main+0x674>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b56      	cmp	r3, #86	; 0x56
 80009a4:	d137      	bne.n	8000a16 <main+0x4f6>
			  CDC_FS_Substring(2, 4, buffer_rx, buffer_data[2]);
 80009a6:	4b7c      	ldr	r3, [pc, #496]	; (8000b98 <main+0x678>)
 80009a8:	4a7c      	ldr	r2, [pc, #496]	; (8000b9c <main+0x67c>)
 80009aa:	2104      	movs	r1, #4
 80009ac:	2002      	movs	r0, #2
 80009ae:	f000 fe15 	bl	80015dc <CDC_FS_Substring>
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80009b8:	e014      	b.n	80009e4 <main+0x4c4>
				  motors[i].velocity = (uint8_t)atoi(buffer_data[2]);
 80009ba:	4877      	ldr	r0, [pc, #476]	; (8000b98 <main+0x678>)
 80009bc:	f009 feb0 	bl	800a720 <atoi>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	4976      	ldr	r1, [pc, #472]	; (8000ba0 <main+0x680>)
 80009c8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	440b      	add	r3, r1
 80009d6:	3314      	adds	r3, #20
 80009d8:	6018      	str	r0, [r3, #0]
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 80009da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009de:	3301      	adds	r3, #1
 80009e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80009e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dde6      	ble.n	80009ba <main+0x49a>
			  }
			  Lcd_Set_Cursor(1,1);
 80009ec:	2101      	movs	r1, #1
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fd48 	bl	8000484 <Lcd_Set_Cursor>
//			  char v[4];
//			  sprintf(v, "%u", (uint8_t)atoi(buffer_data[2]));
// 			  Lcd_Send_String("Velocidades: %u", (uint8_t)atoi(buffer_data[2]));
			  sprintf(buffer_tx, "Velocidad globales seteadas.\r\n");
 80009f4:	496b      	ldr	r1, [pc, #428]	; (8000ba4 <main+0x684>)
 80009f6:	485d      	ldr	r0, [pc, #372]	; (8000b6c <main+0x64c>)
 80009f8:	f009 ff1e 	bl	800a838 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 80009fc:	485b      	ldr	r0, [pc, #364]	; (8000b6c <main+0x64c>)
 80009fe:	f7ff fbaf 	bl	8000160 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	4619      	mov	r1, r3
 8000a08:	4858      	ldr	r0, [pc, #352]	; (8000b6c <main+0x64c>)
 8000a0a:	f009 faab 	bl	8009f64 <CDC_Transmit_FS>
			  HAL_Delay(150);
 8000a0e:	2096      	movs	r0, #150	; 0x96
 8000a10:	f001 f97c 	bl	8001d0c <HAL_Delay>
 8000a14:	e1e5      	b.n	8000de2 <main+0x8c2>
		  }
		  //	CASO DE SETEO PARA VELOCIDADES POR EJES
		  else if (buffer_data[0][0] == 'v'){
 8000a16:	4b5f      	ldr	r3, [pc, #380]	; (8000b94 <main+0x674>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b76      	cmp	r3, #118	; 0x76
 8000a1c:	d163      	bne.n	8000ae6 <main+0x5c6>
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a24:	e014      	b.n	8000a50 <main+0x530>
				  motors[i].velocity = (uint8_t)atoi(buffer_data[2]);
 8000a26:	485c      	ldr	r0, [pc, #368]	; (8000b98 <main+0x678>)
 8000a28:	f009 fe7a 	bl	800a720 <atoi>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	495b      	ldr	r1, [pc, #364]	; (8000ba0 <main+0x680>)
 8000a34:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	440b      	add	r3, r1
 8000a42:	3314      	adds	r3, #20
 8000a44:	6018      	str	r0, [r3, #0]
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	dde6      	ble.n	8000a26 <main+0x506>
			  }
			  CDC_FS_Substring(3, 5, buffer_rx, buffer_data[2]);
 8000a58:	4b4f      	ldr	r3, [pc, #316]	; (8000b98 <main+0x678>)
 8000a5a:	4a50      	ldr	r2, [pc, #320]	; (8000b9c <main+0x67c>)
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f000 fdbc 	bl	80015dc <CDC_FS_Substring>
			  if (strcmp(buffer_data[1],"X")){
 8000a64:	4950      	ldr	r1, [pc, #320]	; (8000ba8 <main+0x688>)
 8000a66:	4851      	ldr	r0, [pc, #324]	; (8000bac <main+0x68c>)
 8000a68:	f7ff fb70 	bl	800014c <strcmp>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d008      	beq.n	8000a84 <main+0x564>
				  motors[0].velocity = (uint8_t)atoi(buffer_data[2]);
 8000a72:	4849      	ldr	r0, [pc, #292]	; (8000b98 <main+0x678>)
 8000a74:	f009 fe54 	bl	800a720 <atoi>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <main+0x680>)
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	e1ae      	b.n	8000de2 <main+0x8c2>
			  } else if (strcmp(buffer_data[1],"Y")){
 8000a84:	494a      	ldr	r1, [pc, #296]	; (8000bb0 <main+0x690>)
 8000a86:	4849      	ldr	r0, [pc, #292]	; (8000bac <main+0x68c>)
 8000a88:	f7ff fb60 	bl	800014c <strcmp>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <main+0x584>
				  motors[1].velocity = (uint8_t)atoi(buffer_data[2]);
 8000a92:	4841      	ldr	r0, [pc, #260]	; (8000b98 <main+0x678>)
 8000a94:	f009 fe44 	bl	800a720 <atoi>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <main+0x680>)
 8000aa0:	645a      	str	r2, [r3, #68]	; 0x44
 8000aa2:	e19e      	b.n	8000de2 <main+0x8c2>
			  } else if (strcmp(buffer_data[1],"Z")){
 8000aa4:	4943      	ldr	r1, [pc, #268]	; (8000bb4 <main+0x694>)
 8000aa6:	4841      	ldr	r0, [pc, #260]	; (8000bac <main+0x68c>)
 8000aa8:	f7ff fb50 	bl	800014c <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d008      	beq.n	8000ac4 <main+0x5a4>
				  motors[2].velocity = (uint8_t)atoi(buffer_data[2]);
 8000ab2:	4839      	ldr	r0, [pc, #228]	; (8000b98 <main+0x678>)
 8000ab4:	f009 fe34 	bl	800a720 <atoi>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <main+0x680>)
 8000ac0:	675a      	str	r2, [r3, #116]	; 0x74
 8000ac2:	e18e      	b.n	8000de2 <main+0x8c2>
			  } else {
				  sprintf(buffer_tx, "Error en setear velocidades\r\n");
 8000ac4:	493c      	ldr	r1, [pc, #240]	; (8000bb8 <main+0x698>)
 8000ac6:	4829      	ldr	r0, [pc, #164]	; (8000b6c <main+0x64c>)
 8000ac8:	f009 feb6 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000acc:	4827      	ldr	r0, [pc, #156]	; (8000b6c <main+0x64c>)
 8000ace:	f7ff fb47 	bl	8000160 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <main+0x64c>)
 8000ada:	f009 fa43 	bl	8009f64 <CDC_Transmit_FS>
				  HAL_Delay(150);
 8000ade:	2096      	movs	r0, #150	; 0x96
 8000ae0:	f001 f914 	bl	8001d0c <HAL_Delay>
 8000ae4:	e17d      	b.n	8000de2 <main+0x8c2>
			  }
		  }
		  //	CASO DE SETEO DE POSICIONES
		  else if (buffer_data[0][0] == 'D'){
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <main+0x674>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b44      	cmp	r3, #68	; 0x44
 8000aec:	d166      	bne.n	8000bbc <main+0x69c>
			  char posiciones[3][5];
			  CDC_FS_Substring(2, 4, buffer_rx, posiciones[0]);
 8000aee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <main+0x67c>)
 8000af4:	2104      	movs	r1, #4
 8000af6:	2002      	movs	r0, #2
 8000af8:	f000 fd70 	bl	80015dc <CDC_FS_Substring>
			  CDC_FS_Substring(6, 8, buffer_rx, posiciones[1]);
 8000afc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b00:	3305      	adds	r3, #5
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <main+0x67c>)
 8000b04:	2108      	movs	r1, #8
 8000b06:	2006      	movs	r0, #6
 8000b08:	f000 fd68 	bl	80015dc <CDC_FS_Substring>
			  CDC_FS_Substring(9, 11, buffer_rx, posiciones[2]);
 8000b0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b10:	330a      	adds	r3, #10
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <main+0x67c>)
 8000b14:	210b      	movs	r1, #11
 8000b16:	2009      	movs	r0, #9
 8000b18:	f000 fd60 	bl	80015dc <CDC_FS_Substring>
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b22:	e01c      	b.n	8000b5e <main+0x63e>
				  motors[i].newPosition = (uint8_t)atoi(buffer_data[i]);
 8000b24:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <main+0x674>)
 8000b32:	4413      	add	r3, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f009 fdf3 	bl	800a720 <atoi>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	4917      	ldr	r1, [pc, #92]	; (8000ba0 <main+0x680>)
 8000b42:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000b46:	4613      	mov	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	440b      	add	r3, r1
 8000b50:	3320      	adds	r3, #32
 8000b52:	6018      	str	r0, [r3, #0]
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b58:	3301      	adds	r3, #1
 8000b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	ddde      	ble.n	8000b24 <main+0x604>
 8000b66:	e13c      	b.n	8000de2 <main+0x8c2>
 8000b68:	0800b25c 	.word	0x0800b25c
 8000b6c:	20000304 	.word	0x20000304
 8000b70:	0800b234 	.word	0x0800b234
 8000b74:	0800b248 	.word	0x0800b248
 8000b78:	0800b27c 	.word	0x0800b27c
 8000b7c:	0800b29c 	.word	0x0800b29c
 8000b80:	0800b2b0 	.word	0x0800b2b0
 8000b84:	0800b2d0 	.word	0x0800b2d0
 8000b88:	0800b2e4 	.word	0x0800b2e4
 8000b8c:	0800b30c 	.word	0x0800b30c
 8000b90:	0800b320 	.word	0x0800b320
 8000b94:	2000032c 	.word	0x2000032c
 8000b98:	20000338 	.word	0x20000338
 8000b9c:	200002f0 	.word	0x200002f0
 8000ba0:	20000244 	.word	0x20000244
 8000ba4:	0800b334 	.word	0x0800b334
 8000ba8:	0800b354 	.word	0x0800b354
 8000bac:	20000332 	.word	0x20000332
 8000bb0:	0800b358 	.word	0x0800b358
 8000bb4:	0800b35c 	.word	0x0800b35c
 8000bb8:	0800b360 	.word	0x0800b360
			  }
		  }
		  //	CASO DE CONTROL DEL GRIPPER
		  else if (buffer_data[0][0] == 'P'){
 8000bbc:	4bbe      	ldr	r3, [pc, #760]	; (8000eb8 <main+0x998>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b50      	cmp	r3, #80	; 0x50
 8000bc2:	f040 8082 	bne.w	8000cca <main+0x7aa>
			  CDC_FS_Substring(2, 4, buffer_rx, buffer_data[2]);
 8000bc6:	4bbd      	ldr	r3, [pc, #756]	; (8000ebc <main+0x99c>)
 8000bc8:	4abd      	ldr	r2, [pc, #756]	; (8000ec0 <main+0x9a0>)
 8000bca:	2104      	movs	r1, #4
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f000 fd05 	bl	80015dc <CDC_FS_Substring>
			  if (((uint8_t)atoi(buffer_data[2]) < 90) && ((uint8_t)atoi(buffer_data[2]) > 0)){
 8000bd2:	48ba      	ldr	r0, [pc, #744]	; (8000ebc <main+0x99c>)
 8000bd4:	f009 fda4 	bl	800a720 <atoi>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b59      	cmp	r3, #89	; 0x59
 8000bde:	d82a      	bhi.n	8000c36 <main+0x716>
 8000be0:	48b6      	ldr	r0, [pc, #728]	; (8000ebc <main+0x99c>)
 8000be2:	f009 fd9d 	bl	800a720 <atoi>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d023      	beq.n	8000c36 <main+0x716>
				  Servo_Write_angle((uint8_t)atoi(buffer_data[2]));
 8000bee:	48b3      	ldr	r0, [pc, #716]	; (8000ebc <main+0x99c>)
 8000bf0:	f009 fd96 	bl	800a720 <atoi>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fccc 	bl	8001598 <Servo_Write_angle>
				  estadoGarra = 0;
 8000c00:	4bb0      	ldr	r3, [pc, #704]	; (8000ec4 <main+0x9a4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
				  sprintf(buffer_tx, "La Garra ha sido cerrada.\r\n");
 8000c06:	49b0      	ldr	r1, [pc, #704]	; (8000ec8 <main+0x9a8>)
 8000c08:	48b0      	ldr	r0, [pc, #704]	; (8000ecc <main+0x9ac>)
 8000c0a:	f009 fe15 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000c0e:	48af      	ldr	r0, [pc, #700]	; (8000ecc <main+0x9ac>)
 8000c10:	f7ff faa6 	bl	8000160 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	48ac      	ldr	r0, [pc, #688]	; (8000ecc <main+0x9ac>)
 8000c1c:	f009 f9a2 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Set_Cursor(2, 16);
 8000c20:	2110      	movs	r1, #16
 8000c22:	2002      	movs	r0, #2
 8000c24:	f7ff fc2e 	bl	8000484 <Lcd_Set_Cursor>
				  Lcd_Send_Char('C');
 8000c28:	2043      	movs	r0, #67	; 0x43
 8000c2a:	f7ff fbdb 	bl	80003e4 <Lcd_Send_Char>
				  HAL_Delay(150);
 8000c2e:	2096      	movs	r0, #150	; 0x96
 8000c30:	f001 f86c 	bl	8001d0c <HAL_Delay>
 8000c34:	e0d5      	b.n	8000de2 <main+0x8c2>
			  } else if (((uint8_t)atoi(buffer_data[2]) >= 90)&& ((uint8_t)atoi(buffer_data[2]) > 0)){
 8000c36:	48a1      	ldr	r0, [pc, #644]	; (8000ebc <main+0x99c>)
 8000c38:	f009 fd72 	bl	800a720 <atoi>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b59      	cmp	r3, #89	; 0x59
 8000c42:	d92a      	bls.n	8000c9a <main+0x77a>
 8000c44:	489d      	ldr	r0, [pc, #628]	; (8000ebc <main+0x99c>)
 8000c46:	f009 fd6b 	bl	800a720 <atoi>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d023      	beq.n	8000c9a <main+0x77a>
				  Servo_Write_angle((uint8_t)atoi(buffer_data[2]));
 8000c52:	489a      	ldr	r0, [pc, #616]	; (8000ebc <main+0x99c>)
 8000c54:	f009 fd64 	bl	800a720 <atoi>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fc9a 	bl	8001598 <Servo_Write_angle>
				  estadoGarra = 1;
 8000c64:	4b97      	ldr	r3, [pc, #604]	; (8000ec4 <main+0x9a4>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
				  sprintf(buffer_tx, "La Garra ha sido abierta.\r\n");
 8000c6a:	4999      	ldr	r1, [pc, #612]	; (8000ed0 <main+0x9b0>)
 8000c6c:	4897      	ldr	r0, [pc, #604]	; (8000ecc <main+0x9ac>)
 8000c6e:	f009 fde3 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000c72:	4896      	ldr	r0, [pc, #600]	; (8000ecc <main+0x9ac>)
 8000c74:	f7ff fa74 	bl	8000160 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4893      	ldr	r0, [pc, #588]	; (8000ecc <main+0x9ac>)
 8000c80:	f009 f970 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Set_Cursor(2, 16);
 8000c84:	2110      	movs	r1, #16
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fbfc 	bl	8000484 <Lcd_Set_Cursor>
				  Lcd_Send_Char('A');
 8000c8c:	2041      	movs	r0, #65	; 0x41
 8000c8e:	f7ff fba9 	bl	80003e4 <Lcd_Send_Char>
				  HAL_Delay(150);
 8000c92:	2096      	movs	r0, #150	; 0x96
 8000c94:	f001 f83a 	bl	8001d0c <HAL_Delay>
 8000c98:	e0a3      	b.n	8000de2 <main+0x8c2>
			  } else {
				  sprintf(buffer_tx, "Error, valor invalido Gripper! \r\n");
 8000c9a:	498e      	ldr	r1, [pc, #568]	; (8000ed4 <main+0x9b4>)
 8000c9c:	488b      	ldr	r0, [pc, #556]	; (8000ecc <main+0x9ac>)
 8000c9e:	f009 fdcb 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000ca2:	488a      	ldr	r0, [pc, #552]	; (8000ecc <main+0x9ac>)
 8000ca4:	f7ff fa5c 	bl	8000160 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	4887      	ldr	r0, [pc, #540]	; (8000ecc <main+0x9ac>)
 8000cb0:	f009 f958 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Set_Cursor(2, 16);
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fbe4 	bl	8000484 <Lcd_Set_Cursor>
				  Lcd_Send_Char('?');
 8000cbc:	203f      	movs	r0, #63	; 0x3f
 8000cbe:	f7ff fb91 	bl	80003e4 <Lcd_Send_Char>
				  HAL_Delay(150);
 8000cc2:	2096      	movs	r0, #150	; 0x96
 8000cc4:	f001 f822 	bl	8001d0c <HAL_Delay>
 8000cc8:	e08b      	b.n	8000de2 <main+0x8c2>
			  }
		  }
		  //	CASO DE HABILITACION DE MOTORES
		  else if (buffer_data[0][0] == 'E'){
 8000cca:	4b7b      	ldr	r3, [pc, #492]	; (8000eb8 <main+0x998>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b45      	cmp	r3, #69	; 0x45
 8000cd0:	d171      	bne.n	8000db6 <main+0x896>
			  CDC_FS_Substring(2, 2, buffer_rx, buffer_data[2]);
 8000cd2:	4b7a      	ldr	r3, [pc, #488]	; (8000ebc <main+0x99c>)
 8000cd4:	4a7a      	ldr	r2, [pc, #488]	; (8000ec0 <main+0x9a0>)
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f000 fc7f 	bl	80015dc <CDC_FS_Substring>
			  if (((uint8_t)atoi(buffer_data[2]) == 1) && !((uint8_t)atoi(buffer_data[2]) < 0)){
 8000cde:	4877      	ldr	r0, [pc, #476]	; (8000ebc <main+0x99c>)
 8000ce0:	f009 fd1e 	bl	800a720 <atoi>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d122      	bne.n	8000d32 <main+0x812>
 8000cec:	4873      	ldr	r0, [pc, #460]	; (8000ebc <main+0x99c>)
 8000cee:	f009 fd17 	bl	800a720 <atoi>
				  ActivatedAll((uint8_t)atoi(buffer_data[2]));
 8000cf2:	4872      	ldr	r0, [pc, #456]	; (8000ebc <main+0x99c>)
 8000cf4:	f009 fd14 	bl	800a720 <atoi>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb1d 	bl	800133c <ActivatedAll>
				  sprintf(buffer_tx, "Se habilitaron los Motores.\r\n");
 8000d02:	4975      	ldr	r1, [pc, #468]	; (8000ed8 <main+0x9b8>)
 8000d04:	4871      	ldr	r0, [pc, #452]	; (8000ecc <main+0x9ac>)
 8000d06:	f009 fd97 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d0a:	4870      	ldr	r0, [pc, #448]	; (8000ecc <main+0x9ac>)
 8000d0c:	f7ff fa28 	bl	8000160 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	486d      	ldr	r0, [pc, #436]	; (8000ecc <main+0x9ac>)
 8000d18:	f009 f924 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Set_Cursor(1, 1);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fbb0 	bl	8000484 <Lcd_Set_Cursor>
				  Lcd_Send_String("Motores Enables!");
 8000d24:	486d      	ldr	r0, [pc, #436]	; (8000edc <main+0x9bc>)
 8000d26:	f7ff fbdf 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 8000d2a:	2096      	movs	r0, #150	; 0x96
 8000d2c:	f000 ffee 	bl	8001d0c <HAL_Delay>
 8000d30:	e057      	b.n	8000de2 <main+0x8c2>
			  } else if (((uint8_t)atoi(buffer_data[2]) == 0)&& !((uint8_t)atoi(buffer_data[2]) < 0)){
 8000d32:	4862      	ldr	r0, [pc, #392]	; (8000ebc <main+0x99c>)
 8000d34:	f009 fcf4 	bl	800a720 <atoi>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d122      	bne.n	8000d86 <main+0x866>
 8000d40:	485e      	ldr	r0, [pc, #376]	; (8000ebc <main+0x99c>)
 8000d42:	f009 fced 	bl	800a720 <atoi>
				  ActivatedAll((uint8_t)atoi(buffer_data[2]));
 8000d46:	485d      	ldr	r0, [pc, #372]	; (8000ebc <main+0x99c>)
 8000d48:	f009 fcea 	bl	800a720 <atoi>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 faf3 	bl	800133c <ActivatedAll>
				  sprintf(buffer_tx, "Se deshabilitaron los Motores.\r\n");
 8000d56:	4962      	ldr	r1, [pc, #392]	; (8000ee0 <main+0x9c0>)
 8000d58:	485c      	ldr	r0, [pc, #368]	; (8000ecc <main+0x9ac>)
 8000d5a:	f009 fd6d 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d5e:	485b      	ldr	r0, [pc, #364]	; (8000ecc <main+0x9ac>)
 8000d60:	f7ff f9fe 	bl	8000160 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4858      	ldr	r0, [pc, #352]	; (8000ecc <main+0x9ac>)
 8000d6c:	f009 f8fa 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Set_Cursor(1, 1);
 8000d70:	2101      	movs	r1, #1
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff fb86 	bl	8000484 <Lcd_Set_Cursor>
				  Lcd_Send_String("Motores Disables");
 8000d78:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <main+0x9c4>)
 8000d7a:	f7ff fbb5 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 8000d7e:	2096      	movs	r0, #150	; 0x96
 8000d80:	f000 ffc4 	bl	8001d0c <HAL_Delay>
 8000d84:	e02d      	b.n	8000de2 <main+0x8c2>
			  } else {
				  sprintf(buffer_tx, "Error, ON/OFF motores! \r\n");
 8000d86:	4958      	ldr	r1, [pc, #352]	; (8000ee8 <main+0x9c8>)
 8000d88:	4850      	ldr	r0, [pc, #320]	; (8000ecc <main+0x9ac>)
 8000d8a:	f009 fd55 	bl	800a838 <siprintf>
				  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000d8e:	484f      	ldr	r0, [pc, #316]	; (8000ecc <main+0x9ac>)
 8000d90:	f7ff f9e6 	bl	8000160 <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	484c      	ldr	r0, [pc, #304]	; (8000ecc <main+0x9ac>)
 8000d9c:	f009 f8e2 	bl	8009f64 <CDC_Transmit_FS>
				  Lcd_Set_Cursor(1, 1);
 8000da0:	2101      	movs	r1, #1
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fb6e 	bl	8000484 <Lcd_Set_Cursor>
				  Lcd_Send_String("<E ? Motores>");
 8000da8:	4850      	ldr	r0, [pc, #320]	; (8000eec <main+0x9cc>)
 8000daa:	f7ff fb9d 	bl	80004e8 <Lcd_Send_String>
				  HAL_Delay(150);
 8000dae:	2096      	movs	r0, #150	; 0x96
 8000db0:	f000 ffac 	bl	8001d0c <HAL_Delay>
 8000db4:	e015      	b.n	8000de2 <main+0x8c2>
			  }
		  }
		  //	CASO DE HABILITACION DE MOTORES
		  else if (buffer_data[0][0] == 'S'){
 8000db6:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <main+0x998>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b53      	cmp	r3, #83	; 0x53
 8000dbc:	d111      	bne.n	8000de2 <main+0x8c2>
			  ActivatedAll(-1);
 8000dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc2:	f000 fabb 	bl	800133c <ActivatedAll>
			  sprintf(buffer_tx, "Se han detenido los Motores.\r\n");
 8000dc6:	494a      	ldr	r1, [pc, #296]	; (8000ef0 <main+0x9d0>)
 8000dc8:	4840      	ldr	r0, [pc, #256]	; (8000ecc <main+0x9ac>)
 8000dca:	f009 fd35 	bl	800a838 <siprintf>
			  Lcd_Set_Cursor(1, 1);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fb57 	bl	8000484 <Lcd_Set_Cursor>
			  Lcd_Send_String("Motores Detenidos!");
 8000dd6:	4847      	ldr	r0, [pc, #284]	; (8000ef4 <main+0x9d4>)
 8000dd8:	f7ff fb86 	bl	80004e8 <Lcd_Send_String>
			  HAL_Delay(150);
 8000ddc:	2096      	movs	r0, #150	; 0x96
 8000dde:	f000 ff95 	bl	8001d0c <HAL_Delay>
		  }
		  flagUsb = 0;
 8000de2:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <main+0x9d8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e47f      	b.n	80006ea <main+0x1ca>
	  }
	  else {
		  if (countHome == 0){
 8000dea:	4b44      	ldr	r3, [pc, #272]	; (8000efc <main+0x9dc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d11f      	bne.n	8000e32 <main+0x912>
			  Lcd_Set_Cursor(1,1);
 8000df2:	2101      	movs	r1, #1
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff fb45 	bl	8000484 <Lcd_Set_Cursor>
			  Lcd_Send_String("Estado Global");
 8000dfa:	4841      	ldr	r0, [pc, #260]	; (8000f00 <main+0x9e0>)
 8000dfc:	f7ff fb74 	bl	80004e8 <Lcd_Send_String>
			  Lcd_Set_Cursor(2,1);
 8000e00:	2101      	movs	r1, #1
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fb3e 	bl	8000484 <Lcd_Set_Cursor>
			  Lcd_Send_String("X???|Y???|Z???|?");
 8000e08:	483e      	ldr	r0, [pc, #248]	; (8000f04 <main+0x9e4>)
 8000e0a:	f7ff fb6d 	bl	80004e8 <Lcd_Send_String>
			  sprintf(buffer_tx, "Estado no definido\r\n");
 8000e0e:	493e      	ldr	r1, [pc, #248]	; (8000f08 <main+0x9e8>)
 8000e10:	482e      	ldr	r0, [pc, #184]	; (8000ecc <main+0x9ac>)
 8000e12:	f009 fd11 	bl	800a838 <siprintf>
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e16:	482d      	ldr	r0, [pc, #180]	; (8000ecc <main+0x9ac>)
 8000e18:	f7ff f9a2 	bl	8000160 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	482a      	ldr	r0, [pc, #168]	; (8000ecc <main+0x9ac>)
 8000e24:	f009 f89e 	bl	8009f64 <CDC_Transmit_FS>
			  HAL_Delay(750);
 8000e28:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000e2c:	f000 ff6e 	bl	8001d0c <HAL_Delay>
 8000e30:	e45b      	b.n	80006ea <main+0x1ca>
		  } else {
			  sprintf(buffer_tx, "Estado definido\r\n");
 8000e32:	4936      	ldr	r1, [pc, #216]	; (8000f0c <main+0x9ec>)
 8000e34:	4825      	ldr	r0, [pc, #148]	; (8000ecc <main+0x9ac>)
 8000e36:	f009 fcff 	bl	800a838 <siprintf>
			  //	MOVER MOTORES
			  for (int k = 0; k < NUM_MOTORS; ++k) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000e40:	e022      	b.n	8000e88 <main+0x968>
				  moveMotors(&motors[k], &motors[k].newPosition, &motors[k].velocity);
 8000e42:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	4a30      	ldr	r2, [pc, #192]	; (8000f10 <main+0x9f0>)
 8000e50:	1898      	adds	r0, r3, r2
 8000e52:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	3320      	adds	r3, #32
 8000e60:	4a2b      	ldr	r2, [pc, #172]	; (8000f10 <main+0x9f0>)
 8000e62:	1899      	adds	r1, r3, r2
 8000e64:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	3310      	adds	r3, #16
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <main+0x9f0>)
 8000e74:	4413      	add	r3, r2
 8000e76:	3304      	adds	r3, #4
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f000 fac1 	bl	8001400 <moveMotors>
			  for (int k = 0; k < NUM_MOTORS; ++k) {
 8000e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e82:	3301      	adds	r3, #1
 8000e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000e88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	ddd8      	ble.n	8000e42 <main+0x922>
			  }
			  CDC_Transmit_FS((uint8_t*)buffer_tx, strlen(buffer_tx));
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <main+0x9ac>)
 8000e92:	f7ff f965 	bl	8000160 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <main+0x9ac>)
 8000e9e:	f009 f861 	bl	8009f64 <CDC_Transmit_FS>
			  //	Actualizar LCD con datos
			  char posicionMotores[16];
			  char charGarra = '?';
 8000ea2:	233f      	movs	r3, #63	; 0x3f
 8000ea4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			  if (estadoGarra == 0){
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0x9a4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d131      	bne.n	8000f14 <main+0x9f4>
				  charGarra = 'C';
 8000eb0:	2343      	movs	r3, #67	; 0x43
 8000eb2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8000eb6:	e034      	b.n	8000f22 <main+0xa02>
 8000eb8:	2000032c 	.word	0x2000032c
 8000ebc:	20000338 	.word	0x20000338
 8000ec0:	200002f0 	.word	0x200002f0
 8000ec4:	200002d4 	.word	0x200002d4
 8000ec8:	0800b380 	.word	0x0800b380
 8000ecc:	20000304 	.word	0x20000304
 8000ed0:	0800b39c 	.word	0x0800b39c
 8000ed4:	0800b3b8 	.word	0x0800b3b8
 8000ed8:	0800b3dc 	.word	0x0800b3dc
 8000edc:	0800b3fc 	.word	0x0800b3fc
 8000ee0:	0800b410 	.word	0x0800b410
 8000ee4:	0800b434 	.word	0x0800b434
 8000ee8:	0800b448 	.word	0x0800b448
 8000eec:	0800b464 	.word	0x0800b464
 8000ef0:	0800b474 	.word	0x0800b474
 8000ef4:	0800b494 	.word	0x0800b494
 8000ef8:	200002ed 	.word	0x200002ed
 8000efc:	200002e8 	.word	0x200002e8
 8000f00:	0800b4a8 	.word	0x0800b4a8
 8000f04:	0800b320 	.word	0x0800b320
 8000f08:	0800b4b8 	.word	0x0800b4b8
 8000f0c:	0800b4d0 	.word	0x0800b4d0
 8000f10:	20000244 	.word	0x20000244
			  } else if (estadoGarra == 1){
 8000f14:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <main+0xb68>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d102      	bne.n	8000f22 <main+0xa02>
				  charGarra = 'A';
 8000f1c:	2341      	movs	r3, #65	; 0x41
 8000f1e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			  }
			  char* position[3][4];
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000f28:	e01e      	b.n	8000f68 <main+0xa48>
				  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000f30:	e011      	b.n	8000f56 <main+0xa36>
					  position[i][j] = '\0';
 8000f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f3a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000f3e:	0091      	lsls	r1, r2, #2
 8000f40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000f44:	440a      	add	r2, r1
 8000f46:	2100      	movs	r1, #0
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000f4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000f56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	dde9      	ble.n	8000f32 <main+0xa12>
			  for (int i = 0; i < NUM_MOTORS; ++i) {
 8000f5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000f62:	3301      	adds	r3, #1
 8000f64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000f68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	dddc      	ble.n	8000f2a <main+0xa0a>
				  }
			  }
			  for (int j = 0; j < NUM_MOTORS; ++j) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f76:	e063      	b.n	8001040 <main+0xb20>
				  if (motors[j].currentPosition < 10){
 8000f78:	4944      	ldr	r1, [pc, #272]	; (800108c <main+0xb6c>)
 8000f7a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	331c      	adds	r3, #28
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	dc17      	bgt.n	8000fc0 <main+0xaa0>
					  //Agrego dos 0
					  sprintf(*position[j], "00%u", motors[j].currentPosition);
 8000f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f94:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8000f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	493a      	ldr	r1, [pc, #232]	; (800108c <main+0xb6c>)
 8000fa4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	440b      	add	r3, r1
 8000fb2:	331c      	adds	r3, #28
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4935      	ldr	r1, [pc, #212]	; (8001090 <main+0xb70>)
 8000fba:	f009 fc3d 	bl	800a838 <siprintf>
 8000fbe:	e03a      	b.n	8001036 <main+0xb16>
				  } else if (motors[j].currentPosition < 100){
 8000fc0:	4932      	ldr	r1, [pc, #200]	; (800108c <main+0xb6c>)
 8000fc2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	440b      	add	r3, r1
 8000fd0:	331c      	adds	r3, #28
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b63      	cmp	r3, #99	; 0x63
 8000fd6:	dc17      	bgt.n	8001008 <main+0xae8>
					  //Agrego 1 cero
					  sprintf(*position[j], "0%u", motors[j].currentPosition);
 8000fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000fdc:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8000fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	4928      	ldr	r1, [pc, #160]	; (800108c <main+0xb6c>)
 8000fec:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	440b      	add	r3, r1
 8000ffa:	331c      	adds	r3, #28
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4924      	ldr	r1, [pc, #144]	; (8001094 <main+0xb74>)
 8001002:	f009 fc19 	bl	800a838 <siprintf>
 8001006:	e016      	b.n	8001036 <main+0xb16>
				  } else {
					  //No agrego 0
					  sprintf(*position[j], "%u", motors[j].currentPosition);
 8001008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800100c:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	491c      	ldr	r1, [pc, #112]	; (800108c <main+0xb6c>)
 800101c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	440b      	add	r3, r1
 800102a:	331c      	adds	r3, #28
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4919      	ldr	r1, [pc, #100]	; (8001098 <main+0xb78>)
 8001032:	f009 fc01 	bl	800a838 <siprintf>
			  for (int j = 0; j < NUM_MOTORS; ++j) {
 8001036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800103a:	3301      	adds	r3, #1
 800103c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001044:	2b02      	cmp	r3, #2
 8001046:	dd97      	ble.n	8000f78 <main+0xa58>
				  }
			  }
			  sprintf(posicionMotores, "X%s|Y%s|Z%s|%c", position[0], position[1], position[2], charGarra);
 8001048:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800104c:	1d3a      	adds	r2, r7, #4
 800104e:	f102 0110 	add.w	r1, r2, #16
 8001052:	1d3a      	adds	r2, r7, #4
 8001054:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	3320      	adds	r3, #32
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	460b      	mov	r3, r1
 8001062:	490e      	ldr	r1, [pc, #56]	; (800109c <main+0xb7c>)
 8001064:	f009 fbe8 	bl	800a838 <siprintf>
			  Lcd_Set_Cursor(2, 1);
 8001068:	2101      	movs	r1, #1
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff fa0a 	bl	8000484 <Lcd_Set_Cursor>
			  Lcd_Send_String(posicionMotores);
 8001070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa37 	bl	80004e8 <Lcd_Send_String>
			  HAL_Delay(750);
 800107a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800107e:	f000 fe45 	bl	8001d0c <HAL_Delay>
	  if(flagUsb == 1){
 8001082:	f7ff bb32 	b.w	80006ea <main+0x1ca>
 8001086:	bf00      	nop
 8001088:	200002d4 	.word	0x200002d4
 800108c:	20000244 	.word	0x20000244
 8001090:	0800b4e4 	.word	0x0800b4e4
 8001094:	0800b4ec 	.word	0x0800b4ec
 8001098:	0800b4f0 	.word	0x0800b4f0
 800109c:	0800b4f4 	.word	0x0800b4f4

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010aa:	2228      	movs	r2, #40	; 0x28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f009 fbe2 	bl	800a878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010de:	2301      	movs	r3, #1
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fb12 	bl	8004720 <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001102:	f000 fb19 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001116:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2102      	movs	r1, #2
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fd7e 	bl	8004c24 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800112e:	f000 fb03 	bl	8001738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001132:	2310      	movs	r3, #16
 8001134:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f003 feeb 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001148:	f000 faf6 	bl	8001738 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	; 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HomingMotors>:

/* USER CODE BEGIN 4 */

int HomingMotors(uint8_t* hmX, uint8_t* hmY, uint8_t* hmZ) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	ActivatedAll(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f000 f8eb 	bl	800133c <ActivatedAll>
    // Activar todos los motores y configurar velocidades
    for (int i = 0; i < NUM_MOTORS; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e025      	b.n	80011b8 <HomingMotors+0x64>
		motors[i].stepInterval = TIMER_FREQUENCY / (50 * motors[i].microStepping);
 800116c:	496f      	ldr	r1, [pc, #444]	; (800132c <HomingMotors+0x1d8>)
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	440b      	add	r3, r1
 800117a:	3318      	adds	r3, #24
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2232      	movs	r2, #50	; 0x32
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001188:	fb92 f1f3 	sdiv	r1, r2, r3
 800118c:	4867      	ldr	r0, [pc, #412]	; (800132c <HomingMotors+0x1d8>)
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4403      	add	r3, r0
 800119a:	3328      	adds	r3, #40	; 0x28
 800119c:	6019      	str	r1, [r3, #0]
        motors[i].stopFlag = 1;   // Deshabilitar el movimiento
 800119e:	4963      	ldr	r1, [pc, #396]	; (800132c <HomingMotors+0x1d8>)
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	332c      	adds	r3, #44	; 0x2c
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	ddd6      	ble.n	800116c <HomingMotors+0x18>
    }

    // Verificar el home de cada motor
    motors[0].stopFlag = 0;
 80011be:	4b5b      	ldr	r3, [pc, #364]	; (800132c <HomingMotors+0x1d8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
    motors[1].stopFlag = 1;
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <HomingMotors+0x1d8>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	65da      	str	r2, [r3, #92]	; 0x5c
    motors[2].stopFlag = 1;
 80011ca:	4b58      	ldr	r3, [pc, #352]	; (800132c <HomingMotors+0x1d8>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	contSeconds = 0;
 80011d2:	4b57      	ldr	r3, [pc, #348]	; (8001330 <HomingMotors+0x1dc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim3);
 80011d8:	4856      	ldr	r0, [pc, #344]	; (8001334 <HomingMotors+0x1e0>)
 80011da:	f003 ffa3 	bl	8005124 <HAL_TIM_Base_Start_IT>
    while ((*hmX == 0 )&&(contSeconds < 3)){
 80011de:	e004      	b.n	80011ea <HomingMotors+0x96>
        *hmX = motors[0].stopFlag;
 80011e0:	4b52      	ldr	r3, [pc, #328]	; (800132c <HomingMotors+0x1d8>)
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	701a      	strb	r2, [r3, #0]
    while ((*hmX == 0 )&&(contSeconds < 3)){
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <HomingMotors+0xa6>
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <HomingMotors+0x1dc>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d9f2      	bls.n	80011e0 <HomingMotors+0x8c>
    }
	motors[0].stopFlag = 1;
 80011fa:	4b4c      	ldr	r3, [pc, #304]	; (800132c <HomingMotors+0x1d8>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
	motors[1].stopFlag = 0;
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <HomingMotors+0x1d8>)
 8001202:	2200      	movs	r2, #0
 8001204:	65da      	str	r2, [r3, #92]	; 0x5c
	motors[2].stopFlag = 1;
 8001206:	4b49      	ldr	r3, [pc, #292]	; (800132c <HomingMotors+0x1d8>)
 8001208:	2201      	movs	r2, #1
 800120a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	contSeconds = 0;
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <HomingMotors+0x1dc>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
    while ((*hmY == 0 )&&(contSeconds < 3)){
 8001214:	e004      	b.n	8001220 <HomingMotors+0xcc>
        *hmY = motors[1].stopFlag;
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <HomingMotors+0x1d8>)
 8001218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121a:	b2da      	uxtb	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	701a      	strb	r2, [r3, #0]
    while ((*hmY == 0 )&&(contSeconds < 3)){
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HomingMotors+0xdc>
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HomingMotors+0x1dc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d9f2      	bls.n	8001216 <HomingMotors+0xc2>
    }
    motors[0].stopFlag = 1;
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <HomingMotors+0x1d8>)
 8001232:	2201      	movs	r2, #1
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
    motors[1].stopFlag = 1;
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HomingMotors+0x1d8>)
 8001238:	2201      	movs	r2, #1
 800123a:	65da      	str	r2, [r3, #92]	; 0x5c
    motors[2].stopFlag = 0;
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HomingMotors+0x1d8>)
 800123e:	2200      	movs	r2, #0
 8001240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	contSeconds = 0;
 8001244:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <HomingMotors+0x1dc>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    while ((*hmZ == 0 )&&(contSeconds < 3)){
 800124a:	e005      	b.n	8001258 <HomingMotors+0x104>
        *hmZ = motors[2].stopFlag;
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <HomingMotors+0x1d8>)
 800124e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001252:	b2da      	uxtb	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	701a      	strb	r2, [r3, #0]
    while ((*hmZ == 0 )&&(contSeconds < 3)){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <HomingMotors+0x114>
 8001260:	4b33      	ldr	r3, [pc, #204]	; (8001330 <HomingMotors+0x1dc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d9f1      	bls.n	800124c <HomingMotors+0xf8>
    }
    HAL_TIM_Base_Stop_IT(&htim3);
 8001268:	4832      	ldr	r0, [pc, #200]	; (8001334 <HomingMotors+0x1e0>)
 800126a:	f003 ffad 	bl	80051c8 <HAL_TIM_Base_Stop_IT>
    for (int i = 0; i < NUM_MOTORS; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e02a      	b.n	80012ca <HomingMotors+0x176>
        motors[i].velocity = 0; // Detener el motor
 8001274:	492d      	ldr	r1, [pc, #180]	; (800132c <HomingMotors+0x1d8>)
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	440b      	add	r3, r1
 8001282:	3314      	adds	r3, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
        motors[i].stepInterval = 0; // Detener el motor
 8001288:	4928      	ldr	r1, [pc, #160]	; (800132c <HomingMotors+0x1d8>)
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	440b      	add	r3, r1
 8001296:	3328      	adds	r3, #40	; 0x28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
        motors[i].currentPosition = 0; // Reiniciar la posición actual
 800129c:	4923      	ldr	r1, [pc, #140]	; (800132c <HomingMotors+0x1d8>)
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	440b      	add	r3, r1
 80012aa:	331c      	adds	r3, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
        motors[i].stopFlag = 0;   // Habilitar el movimiento
 80012b0:	491e      	ldr	r1, [pc, #120]	; (800132c <HomingMotors+0x1d8>)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	440b      	add	r3, r1
 80012be:	332c      	adds	r3, #44	; 0x2c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3301      	adds	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	ddd1      	ble.n	8001274 <HomingMotors+0x120>
    }
    if ((*hmX == 1 )&&(*hmY == 1 )&&(*hmZ == 1 )){// Apagar todos los motores y reiniciar posiciones
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10e      	bne.n	80012f6 <HomingMotors+0x1a2>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10a      	bne.n	80012f6 <HomingMotors+0x1a2>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HomingMotors+0x1a2>
        countHome++;
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HomingMotors+0x1e4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HomingMotors+0x1e4>)
 80012f0:	6013      	str	r3, [r2, #0]
        return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e015      	b.n	8001322 <HomingMotors+0x1ce>
    } else if (*hmX == 0 ){
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HomingMotors+0x1b0>
    	return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e00e      	b.n	8001322 <HomingMotors+0x1ce>
    } else if (*hmY == 0 ){
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <HomingMotors+0x1be>
    	return -2;
 800130c:	f06f 0301 	mvn.w	r3, #1
 8001310:	e007      	b.n	8001322 <HomingMotors+0x1ce>
    } else if (*hmZ == 0 ){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HomingMotors+0x1cc>
    	return -3;
 800131a:	f06f 0302 	mvn.w	r3, #2
 800131e:	e000      	b.n	8001322 <HomingMotors+0x1ce>
    }
    return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000244 	.word	0x20000244
 8001330:	200002ec 	.word	0x200002ec
 8001334:	20000398 	.word	0x20000398
 8001338:	200002e8 	.word	0x200002e8

0800133c <ActivatedAll>:
		return 0;
	}
}

//	Función para definir comportamiento de los motores
void ActivatedAll (int habilitar){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	//		Pines Enable, Reset y Sleep comporten los mismos bus de datos
	//		para cada uno respectivamente de los distintos motores.
	//		Se recuerda que los pines son erntradas de lógica negada al A4988
	if (habilitar == -1){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134a:	d127      	bne.n	800139c <ActivatedAll+0x60>
	    for (int i = 0; i < NUM_MOTORS; i++) {
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e020      	b.n	8001394 <ActivatedAll+0x58>
	        motors[i].velocity = 0; // Detener el motor
 8001352:	4929      	ldr	r1, [pc, #164]	; (80013f8 <ActivatedAll+0xbc>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	3314      	adds	r3, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	        motors[i].stepInterval = 0; // Reiniciar la posición actual
 8001366:	4924      	ldr	r1, [pc, #144]	; (80013f8 <ActivatedAll+0xbc>)
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	440b      	add	r3, r1
 8001374:	3328      	adds	r3, #40	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
	        motors[i].stopFlag = 1;   // Habilitar el movimiento
 800137a:	491f      	ldr	r1, [pc, #124]	; (80013f8 <ActivatedAll+0xbc>)
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	440b      	add	r3, r1
 8001388:	332c      	adds	r3, #44	; 0x2c
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < NUM_MOTORS; i++) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b02      	cmp	r3, #2
 8001398:	dddb      	ble.n	8001352 <ActivatedAll+0x16>
	else if (habilitar == 0){
		HAL_GPIO_WritePin(ResetMotors_GPIO_Port, ResetMotors_Pin, RESET);			//	Se deshabilita el RESET
		HAL_GPIO_WritePin(SleepMotors_GPIO_Port, SleepMotors_Pin, RESET);			//	Se deshabilita el SLEEP
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, SET);			//	Se habilita el ENABLE
	}
}
 800139a:	e028      	b.n	80013ee <ActivatedAll+0xb2>
	else if (habilitar == 1){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d111      	bne.n	80013c6 <ActivatedAll+0x8a>
		HAL_GPIO_WritePin(ResetMotors_GPIO_Port, ResetMotors_Pin, SET);			//	Se deshabilita el RESET
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <ActivatedAll+0xc0>)
 80013aa:	f000 ff65 	bl	8002278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SleepMotors_GPIO_Port, SleepMotors_Pin, SET);			//	Se deshabilita el SLEEP
 80013ae:	2201      	movs	r2, #1
 80013b0:	2110      	movs	r1, #16
 80013b2:	4812      	ldr	r0, [pc, #72]	; (80013fc <ActivatedAll+0xc0>)
 80013b4:	f000 ff60 	bl	8002278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, RESET);			//	Se habilita el ENABLE
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <ActivatedAll+0xc0>)
 80013c0:	f000 ff5a 	bl	8002278 <HAL_GPIO_WritePin>
}
 80013c4:	e013      	b.n	80013ee <ActivatedAll+0xb2>
	else if (habilitar == 0){
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d110      	bne.n	80013ee <ActivatedAll+0xb2>
		HAL_GPIO_WritePin(ResetMotors_GPIO_Port, ResetMotors_Pin, RESET);			//	Se deshabilita el RESET
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	480a      	ldr	r0, [pc, #40]	; (80013fc <ActivatedAll+0xc0>)
 80013d4:	f000 ff50 	bl	8002278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SleepMotors_GPIO_Port, SleepMotors_Pin, RESET);			//	Se deshabilita el SLEEP
 80013d8:	2200      	movs	r2, #0
 80013da:	2110      	movs	r1, #16
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <ActivatedAll+0xc0>)
 80013de:	f000 ff4b 	bl	8002278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EnableMotors_GPIO_Port, EnableMotors_Pin, SET);			//	Se habilita el ENABLE
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <ActivatedAll+0xc0>)
 80013ea:	f000 ff45 	bl	8002278 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000244 	.word	0x20000244
 80013fc:	40010c00 	.word	0x40010c00

08001400 <moveMotors>:
float deg2rad(float degrees) {
	return degrees * (M_PI / 180.0);
}

// Función para configurar el intervalo de paso en función de la velocidad del motor
void moveMotors(StepperMotor *motor, int *newPosition, int *velocity) {
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
	if (velocity != 0){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <moveMotors+0x1a>
		motor->velocity = *velocity;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	615a      	str	r2, [r3, #20]
	}
	if (newPosition !=0){
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <moveMotors+0x28>
		motor->newPosition = *newPosition;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	621a      	str	r2, [r3, #32]
	}
	if (motor->velocity != 0){
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d031      	beq.n	8001494 <moveMotors+0x94>
		if (motor->currentPosition < motor->newPosition){
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	69da      	ldr	r2, [r3, #28]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	429a      	cmp	r2, r3
 800143a:	da12      	bge.n	8001462 <moveMotors+0x62>
			motor->direction = 0;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
			motor->stopFlag = 0;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
			motor->stepInterval = TIMER_FREQUENCY / (motor->velocity * motor->microStepping);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	6992      	ldr	r2, [r2, #24]
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001458:	fb92 f2f3 	sdiv	r2, r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
		}
	} else {
		motor->stepInterval = 0;
		motor->stopFlag = 1;
	}
}
 8001460:	e01e      	b.n	80014a0 <moveMotors+0xa0>
		} else if (motor->currentPosition > motor->newPosition){
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	429a      	cmp	r2, r3
 800146c:	dd18      	ble.n	80014a0 <moveMotors+0xa0>
			motor->direction = 1;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	611a      	str	r2, [r3, #16]
			motor->stopFlag = 0;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
			motor->stepInterval = TIMER_FREQUENCY / (motor->velocity * motor->microStepping);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	6992      	ldr	r2, [r2, #24]
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800148a:	fb92 f2f3 	sdiv	r2, r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001492:	e005      	b.n	80014a0 <moveMotors+0xa0>
		motor->stepInterval = 0;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
		motor->stopFlag = 1;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_EXTI_Callback>:

// Función de retrollamada (callback) para la interrupción externa EXTI3
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == StopM_X_Pin){
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014bc:	d118      	bne.n	80014f0 <HAL_GPIO_EXTI_Callback+0x44>
		if (flagStopM_X == 1){
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_GPIO_EXTI_Callback+0xcc>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d106      	bne.n	80014d4 <HAL_GPIO_EXTI_Callback+0x28>
			flagStopM_X = 0;
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <HAL_GPIO_EXTI_Callback+0xcc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
			motors[0].stopFlag = 0;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_GPIO_EXTI_Callback+0xd0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d2:	e008      	b.n	80014e6 <HAL_GPIO_EXTI_Callback+0x3a>
		} else {
			velMotor_X = 0;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_GPIO_EXTI_Callback+0xd4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	801a      	strh	r2, [r3, #0]
			flagStopM_X = 1;
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_GPIO_EXTI_Callback+0xcc>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
			motors[0].stopFlag = 1;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_GPIO_EXTI_Callback+0xd0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		HAL_GPIO_TogglePin(azul_GPIO_Port, azul_Pin);
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	4826      	ldr	r0, [pc, #152]	; (8001584 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014ea:	f000 fedd 	bl	80022a8 <HAL_GPIO_TogglePin>
 80014ee:	e03a      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xba>
	}
	else if (GPIO_Pin == StopM_Y_Pin){
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f6:	d118      	bne.n	800152a <HAL_GPIO_EXTI_Callback+0x7e>
		if (flagStopM_Y == 1){
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_GPIO_EXTI_Callback+0xdc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_GPIO_EXTI_Callback+0x62>
			flagStopM_Y = 0;
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
			motors[1].stopFlag = 0;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001508:	2200      	movs	r2, #0
 800150a:	65da      	str	r2, [r3, #92]	; 0x5c
 800150c:	e008      	b.n	8001520 <HAL_GPIO_EXTI_Callback+0x74>
		} else {
			velMotor_Y = 0;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001510:	2200      	movs	r2, #0
 8001512:	801a      	strh	r2, [r3, #0]
			flagStopM_Y = 1;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
			motors[1].stopFlag = 1;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_GPIO_EXTI_Callback+0xd0>)
 800151c:	2201      	movs	r2, #1
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		HAL_GPIO_TogglePin(azul_GPIO_Port, azul_Pin);
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	4818      	ldr	r0, [pc, #96]	; (8001584 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001524:	f000 fec0 	bl	80022a8 <HAL_GPIO_TogglePin>
 8001528:	e01d      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xba>
	}
	else if (GPIO_Pin == StopM_Z_Pin){
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001530:	d119      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0xba>
		if (flagStopM_Z == 1){
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_GPIO_EXTI_Callback+0x9e>
			flagStopM_Z = 0;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_GPIO_EXTI_Callback+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
			motors[2].stopFlag = 0;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001542:	2200      	movs	r2, #0
 8001544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001548:	e009      	b.n	800155e <HAL_GPIO_EXTI_Callback+0xb2>
		} else {
			velMotor_Z = 0;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_GPIO_EXTI_Callback+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]
			flagStopM_Z = 1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
			motors[2].stopFlag = 1;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001558:	2201      	movs	r2, #1
 800155a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		}
		HAL_GPIO_TogglePin(azul_GPIO_Port, azul_Pin);
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001562:	f000 fea1 	bl	80022a8 <HAL_GPIO_TogglePin>
	}
  HAL_GPIO_EXTI_IRQHandler(StopM_X_Pin);  // Limpiar la bandera de interrupción EXTI3
 8001566:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800156a:	f000 feb7 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002df 	.word	0x200002df
 800157c:	20000244 	.word	0x20000244
 8001580:	200002d6 	.word	0x200002d6
 8001584:	40010800 	.word	0x40010800
 8001588:	200002e0 	.word	0x200002e0
 800158c:	200002d8 	.word	0x200002d8
 8001590:	200002e1 	.word	0x200002e1
 8001594:	200002da 	.word	0x200002da

08001598 <Servo_Write_angle>:

//	Función para mover el servo
void Servo_Write_angle(uint16_t theta){
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_servo;
	pwm_servo = (uint16_t)((theta-0)*(PULSE_MAX-PULSE_MIN)/(180-0)+PULSE_MIN);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	f240 726c 	movw	r2, #1900	; 0x76c
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <Servo_Write_angle+0x3c>)
 80015ae:	fb82 1203 	smull	r1, r2, r2, r3
 80015b2:	441a      	add	r2, r3
 80015b4:	11d2      	asrs	r2, r2, #7
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f203 2326 	addw	r3, r3, #550	; 0x226
 80015c0:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm_servo);
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <Servo_Write_angle+0x40>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	89fa      	ldrh	r2, [r7, #14]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	b60b60b7 	.word	0xb60b60b7
 80015d8:	200003e0 	.word	0x200003e0

080015dc <CDC_FS_Substring>:

//	FUNCIÓN PARA DIVIDIR Y COPIAR CADENAS (formatear)
void CDC_FS_Substring(uint8_t inicioCadena, uint8_t finCadena, char* str, char* dst){
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60ba      	str	r2, [r7, #8]
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4603      	mov	r3, r0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	460b      	mov	r3, r1
 80015ec:	73bb      	strb	r3, [r7, #14]
	uint8_t pt = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
	for (uint16_t lt=inicioCadena; lt<finCadena; lt++){
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	82bb      	strh	r3, [r7, #20]
 80015f6:	e00d      	b.n	8001614 <CDC_FS_Substring+0x38>
		dst[pt] = str [lt];
 80015f8:	8abb      	ldrh	r3, [r7, #20]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	441a      	add	r2, r3
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	440b      	add	r3, r1
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	701a      	strb	r2, [r3, #0]
		pt++;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	3301      	adds	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
	for (uint16_t lt=inicioCadena; lt<finCadena; lt++){
 800160e:	8abb      	ldrh	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	82bb      	strh	r3, [r7, #20]
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	b29b      	uxth	r3, r3
 8001618:	8aba      	ldrh	r2, [r7, #20]
 800161a:	429a      	cmp	r2, r3
 800161c:	d3ec      	bcc.n	80015f8 <CDC_FS_Substring+0x1c>
	}
	dst[pt] = '\0';
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	pt = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]
}
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
	...

08001638 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001648:	d15f      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0xd2>
		for (int i = 0; i < NUM_MOTORS; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e059      	b.n	8001704 <HAL_TIM_PeriodElapsedCallback+0xcc>
			StepperMotor *motor = &motors[i];
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4a33      	ldr	r2, [pc, #204]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800165c:	4413      	add	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
			motor->stepCounter++;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
			if ((motor->newPosition != motor->currentPosition) || (countHome >= 0)){
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	429a      	cmp	r2, r3
 8001674:	d103      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x46>
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db3f      	blt.n	80016fe <HAL_TIM_PeriodElapsedCallback+0xc6>
				if ((motor->stepCounter >= motor->stepInterval)&&(motor->stepInterval != 0)) {
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	429a      	cmp	r2, r3
 8001688:	db39      	blt.n	80016fe <HAL_TIM_PeriodElapsedCallback+0xc6>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	d035      	beq.n	80016fe <HAL_TIM_PeriodElapsedCallback+0xc6>
					motor->stepCounter = 0;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
					if (motor->stopFlag == 0) {
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d126      	bne.n	80016ee <HAL_TIM_PeriodElapsedCallback+0xb6>
						if (motor->direction == 0) {
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
							motor->currentPosition += 1;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	61da      	str	r2, [r3, #28]
							HAL_GPIO_WritePin(motor->dirPort, motor->dirPin, SET);
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	6898      	ldr	r0, [r3, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	899b      	ldrh	r3, [r3, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	4619      	mov	r1, r3
 80016be:	f000 fddb 	bl	8002278 <HAL_GPIO_WritePin>
 80016c2:	e00c      	b.n	80016de <HAL_TIM_PeriodElapsedCallback+0xa6>
						} else {
							motor->currentPosition -= 1;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	61da      	str	r2, [r3, #28]
							HAL_GPIO_WritePin(motor->dirPort, motor->dirPin, RESET);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	6898      	ldr	r0, [r3, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	899b      	ldrh	r3, [r3, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	f000 fdcd 	bl	8002278 <HAL_GPIO_WritePin>
						}
						HAL_GPIO_WritePin(motor->stepPort, motor->stepPin, SET);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	f000 fdc5 	bl	8002278 <HAL_GPIO_WritePin>
					}
					HAL_GPIO_WritePin(motor->stepPort, motor->stepPin, RESET);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	889b      	ldrh	r3, [r3, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	f000 fdbd 	bl	8002278 <HAL_GPIO_WritePin>
		for (int i = 0; i < NUM_MOTORS; i++) {
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b02      	cmp	r3, #2
 8001708:	dda2      	ble.n	8001650 <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}

	}
	if (htim->Instance == TIM3){
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d105      	bne.n	8001720 <HAL_TIM_PeriodElapsedCallback+0xe8>
		//		TIMER para contar segundos
		contSeconds++;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800171e:	701a      	strb	r2, [r3, #0]
	}
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000244 	.word	0x20000244
 800172c:	200002e8 	.word	0x200002e8
 8001730:	40000400 	.word	0x40000400
 8001734:	200002ec 	.word	0x200002ec

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_MspInit+0x5c>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_MspInit+0x5c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_MspInit+0x5c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_MspInit+0x5c>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_MspInit+0x60>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_MspInit+0x60>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 fa71 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017fe:	f001 fb46 	bl	8002e8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200010f4 	.word	0x200010f4

0800180c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM2_IRQHandler+0x10>)
 8001812:	f003 fe01 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000350 	.word	0x20000350

08001820 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM3_IRQHandler+0x10>)
 8001826:	f003 fdf7 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000398 	.word	0x20000398

08001834 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(StopM_Z_Pin);
 8001838:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800183c:	f000 fd4e 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(StopM_Y_Pin);
 8001840:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001844:	f000 fd4a 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(StopM_X_Pin);
 8001848:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800184c:	f000 fd46 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f009 f800 	bl	800a888 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20005000 	.word	0x20005000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	2000034c 	.word	0x2000034c
 80018bc:	20001750 	.word	0x20001750

080018c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM2_Init+0x94>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_TIM2_Init+0x94>)
 80018f2:	2247      	movs	r2, #71	; 0x47
 80018f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_TIM2_Init+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM2_Init+0x94>)
 80018fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_TIM2_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_TIM2_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM2_Init+0x94>)
 8001912:	f003 fbb7 	bl	8005084 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800191c:	f7ff ff0c 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM2_Init+0x94>)
 800192e:	f003 ff3d 	bl	80057ac <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001938:	f7ff fefe 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM2_Init+0x94>)
 800194a:	f004 fabf 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001954:	f7ff fef0 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000350 	.word	0x20000350

08001964 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_TIM3_Init+0x94>)
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <MX_TIM3_Init+0x98>)
 8001984:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_TIM3_Init+0x94>)
 8001988:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800198c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM3_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_TIM3_Init+0x94>)
 8001996:	f242 720f 	movw	r2, #9999	; 0x270f
 800199a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_TIM3_Init+0x94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_TIM3_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a8:	4813      	ldr	r0, [pc, #76]	; (80019f8 <MX_TIM3_Init+0x94>)
 80019aa:	f003 fb6b 	bl	8005084 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019b4:	f7ff fec0 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM3_Init+0x94>)
 80019c6:	f003 fef1 	bl	80057ac <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019d0:	f7ff feb2 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM3_Init+0x94>)
 80019e2:	f004 fa73 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f7ff fea4 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000398 	.word	0x20000398
 80019fc:	40000400 	.word	0x40000400

08001a00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]
 8001a2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a32:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <MX_TIM4_Init+0xe8>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a38:	2247      	movs	r2, #71	; 0x47
 8001a3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a44:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a56:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a58:	f003 fb14 	bl	8005084 <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a62:	f7ff fe69 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a74:	f003 fe9a 	bl	80057ac <HAL_TIM_ConfigClockSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a7e:	f7ff fe5b 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a82:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001a84:	f003 fbce 	bl	8005224 <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a8e:	f7ff fe53 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001aa2:	f004 fa13 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001aac:	f7ff fe44 	bl	8001738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001ac8:	f003 fdae 	bl	8005628 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ad2:	f7ff fe31 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM4_Init+0xe4>)
 8001ad8:	f000 f85c 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001adc:	bf00      	nop
 8001ade:	3738      	adds	r7, #56	; 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200003e0 	.word	0x200003e0
 8001ae8:	40000800 	.word	0x40000800

08001aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d114      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201c      	movs	r0, #28
 8001b1c:	f000 f9f1 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b20:	201c      	movs	r0, #28
 8001b22:	f000 fa0a 	bl	8001f3a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b26:	e02a      	b.n	8001b7e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_TIM_Base_MspInit+0xa0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d114      	bne.n	8001b5c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	201d      	movs	r0, #29
 8001b50:	f000 f9d7 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b54:	201d      	movs	r0, #29
 8001b56:	f000 f9f0 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 8001b5a:	e010      	b.n	8001b7e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_TIM_Base_MspInit+0xa4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10b      	bne.n	8001b7e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_TIM_Base_MspInit+0x9c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800

08001b94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_TIM_MspPostInit+0x5c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d118      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_TIM_MspPostInit+0x64>)
 8001be2:	f000 f9c5 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010c00 	.word	0x40010c00

08001bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bfc:	f7ff fe60 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c02:	490c      	ldr	r1, [pc, #48]	; (8001c34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c04:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c18:	4c09      	ldr	r4, [pc, #36]	; (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f008 fe35 	bl	800a894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2a:	f7fe fc79 	bl	8000520 <main>
  bx lr
 8001c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c38:	0800b6b4 	.word	0x0800b6b4
  ldr r2, =_sbss
 8001c3c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c40:	2000174c 	.word	0x2000174c

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_Init+0x28>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_Init+0x28>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f947 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	200f      	movs	r0, #15
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fd6e 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f95f 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 f927 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_IncTick+0x1c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_IncTick+0x20>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <HAL_IncTick+0x20>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	20000428 	.word	0x20000428

08001cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <HAL_GetTick+0x10>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000428 	.word	0x20000428

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffe0 	bl	8001cf8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000010 	.word	0x20000010

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db0b      	blt.n	8001de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4906      	ldr	r1, [pc, #24]	; (8001dec <__NVIC_EnableIRQ+0x34>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2001      	movs	r0, #1
 8001dda:	fa00 f202 	lsl.w	r2, r0, r2
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff90 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff2d 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff42 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff35 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b08b      	sub	sp, #44	; 0x2c
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e169      	b.n	8002258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f84:	2201      	movs	r2, #1
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8158 	bne.w	8002252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a9a      	ldr	r2, [pc, #616]	; (8002210 <HAL_GPIO_Init+0x2a0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d05e      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fac:	4a98      	ldr	r2, [pc, #608]	; (8002210 <HAL_GPIO_Init+0x2a0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d875      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fb2:	4a98      	ldr	r2, [pc, #608]	; (8002214 <HAL_GPIO_Init+0x2a4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d058      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fb8:	4a96      	ldr	r2, [pc, #600]	; (8002214 <HAL_GPIO_Init+0x2a4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d86f      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fbe:	4a96      	ldr	r2, [pc, #600]	; (8002218 <HAL_GPIO_Init+0x2a8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d052      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fc4:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_GPIO_Init+0x2a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d869      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fca:	4a94      	ldr	r2, [pc, #592]	; (800221c <HAL_GPIO_Init+0x2ac>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04c      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fd0:	4a92      	ldr	r2, [pc, #584]	; (800221c <HAL_GPIO_Init+0x2ac>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d863      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fd6:	4a92      	ldr	r2, [pc, #584]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d046      	beq.n	800206a <HAL_GPIO_Init+0xfa>
 8001fdc:	4a90      	ldr	r2, [pc, #576]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d85d      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d82a      	bhi.n	800203c <HAL_GPIO_Init+0xcc>
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d859      	bhi.n	800209e <HAL_GPIO_Init+0x12e>
 8001fea:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <HAL_GPIO_Init+0x80>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	0800206b 	.word	0x0800206b
 8001ff4:	08002045 	.word	0x08002045
 8001ff8:	08002057 	.word	0x08002057
 8001ffc:	08002099 	.word	0x08002099
 8002000:	0800209f 	.word	0x0800209f
 8002004:	0800209f 	.word	0x0800209f
 8002008:	0800209f 	.word	0x0800209f
 800200c:	0800209f 	.word	0x0800209f
 8002010:	0800209f 	.word	0x0800209f
 8002014:	0800209f 	.word	0x0800209f
 8002018:	0800209f 	.word	0x0800209f
 800201c:	0800209f 	.word	0x0800209f
 8002020:	0800209f 	.word	0x0800209f
 8002024:	0800209f 	.word	0x0800209f
 8002028:	0800209f 	.word	0x0800209f
 800202c:	0800209f 	.word	0x0800209f
 8002030:	0800209f 	.word	0x0800209f
 8002034:	0800204d 	.word	0x0800204d
 8002038:	08002061 	.word	0x08002061
 800203c:	4a79      	ldr	r2, [pc, #484]	; (8002224 <HAL_GPIO_Init+0x2b4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002042:	e02c      	b.n	800209e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e029      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	3304      	adds	r3, #4
 8002052:	623b      	str	r3, [r7, #32]
          break;
 8002054:	e024      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	3308      	adds	r3, #8
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e01f      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	330c      	adds	r3, #12
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e01a      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002072:	2304      	movs	r3, #4
 8002074:	623b      	str	r3, [r7, #32]
          break;
 8002076:	e013      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	611a      	str	r2, [r3, #16]
          break;
 800208a:	e009      	b.n	80020a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800208c:	2308      	movs	r3, #8
 800208e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	615a      	str	r2, [r3, #20]
          break;
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x130>
          break;
 800209e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d801      	bhi.n	80020aa <HAL_GPIO_Init+0x13a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_Init+0x13e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d802      	bhi.n	80020bc <HAL_GPIO_Init+0x14c>
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	e002      	b.n	80020c2 <HAL_GPIO_Init+0x152>
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	3b08      	subs	r3, #8
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	210f      	movs	r1, #15
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80b1 	beq.w	8002252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002108:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_GPIO_Init+0x2bc>)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_GPIO_Init+0x2c0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x1ec>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <HAL_GPIO_Init+0x2c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1e8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <HAL_GPIO_Init+0x2c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1e4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	; (800223c <HAL_GPIO_Init+0x2cc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1e0>
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002150:	2304      	movs	r3, #4
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002154:	2302      	movs	r3, #2
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x1ee>
 800215c:	2300      	movs	r3, #0
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800216e:	492f      	ldr	r1, [pc, #188]	; (800222c <HAL_GPIO_Init+0x2bc>)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	492c      	ldr	r1, [pc, #176]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4928      	ldr	r1, [pc, #160]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	491e      	ldr	r1, [pc, #120]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4918      	ldr	r1, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4914      	ldr	r1, [pc, #80]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d021      	beq.n	8002244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_GPIO_Init+0x2d0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e021      	b.n	8002252 <HAL_GPIO_Init+0x2e2>
 800220e:	bf00      	nop
 8002210:	10320000 	.word	0x10320000
 8002214:	10310000 	.word	0x10310000
 8002218:	10220000 	.word	0x10220000
 800221c:	10210000 	.word	0x10210000
 8002220:	10120000 	.word	0x10120000
 8002224:	10110000 	.word	0x10110000
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	40011000 	.word	0x40011000
 800223c:	40011400 	.word	0x40011400
 8002240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_GPIO_Init+0x304>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	43db      	mvns	r3, r3
 800224c:	4909      	ldr	r1, [pc, #36]	; (8002274 <HAL_GPIO_Init+0x304>)
 800224e:	4013      	ands	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	3301      	adds	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	f47f ae8e 	bne.w	8001f84 <HAL_GPIO_Init+0x14>
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	372c      	adds	r7, #44	; 0x2c
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43d9      	mvns	r1, r3
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	400b      	ands	r3, r1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f8d6 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e12b      	b.n	8002576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fd ffe6 	bl	8000304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002370:	f002 fda0 	bl	8004eb4 <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a81      	ldr	r2, [pc, #516]	; (8002580 <HAL_I2C_Init+0x274>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d807      	bhi.n	8002390 <HAL_I2C_Init+0x84>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_I2C_Init+0x278>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e006      	b.n	800239e <HAL_I2C_Init+0x92>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <HAL_I2C_Init+0x27c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0e7      	b.n	8002576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a78      	ldr	r2, [pc, #480]	; (800258c <HAL_I2C_Init+0x280>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a6a      	ldr	r2, [pc, #424]	; (8002580 <HAL_I2C_Init+0x274>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d802      	bhi.n	80023e0 <HAL_I2C_Init+0xd4>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	e009      	b.n	80023f4 <HAL_I2C_Init+0xe8>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_I2C_Init+0x284>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	3301      	adds	r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	495c      	ldr	r1, [pc, #368]	; (8002580 <HAL_I2C_Init+0x274>)
 8002410:	428b      	cmp	r3, r1
 8002412:	d819      	bhi.n	8002448 <HAL_I2C_Init+0x13c>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e59      	subs	r1, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002422:	1c59      	adds	r1, r3, #1
 8002424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002428:	400b      	ands	r3, r1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_I2C_Init+0x138>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1e59      	subs	r1, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fbb1 f3f3 	udiv	r3, r1, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002442:	e051      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 8002444:	2304      	movs	r3, #4
 8002446:	e04f      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_I2C_Init+0x168>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e012      	b.n	800249a <HAL_I2C_Init+0x18e>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	0099      	lsls	r1, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x196>
 800249e:	2301      	movs	r3, #1
 80024a0:	e022      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_I2C_Init+0x1bc>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e58      	subs	r0, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	440b      	add	r3, r1
 80024b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c6:	e00f      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	0099      	lsls	r1, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6911      	ldr	r1, [r2, #16]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	000186a0 	.word	0x000186a0
 8002584:	001e847f 	.word	0x001e847f
 8002588:	003d08ff 	.word	0x003d08ff
 800258c:	431bde83 	.word	0x431bde83
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff fba6 	bl	8001cf8 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 80e0 	bne.w	800277c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f964 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0d3      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x50>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0cc      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2221      	movs	r2, #33	; 0x21
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2210      	movs	r2, #16
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_I2C_Master_Transmit+0x1f8>)
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f89c 	bl	8002790 <I2C_MasterRequestWrite>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e08d      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002678:	e066      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa22 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b04      	cmp	r3, #4
 8002690:	d107      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06b      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_I2C_Master_Transmit+0x188>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fa19 	bl	8002b58 <I2C_WaitOnBTFFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b04      	cmp	r3, #4
 8002732:	d107      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01a      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d194      	bne.n	800267a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000

08002790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d006      	beq.n	80027ba <I2C_MasterRequestWrite+0x2a>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d003      	beq.n	80027ba <I2C_MasterRequestWrite+0x2a>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b8:	d108      	bne.n	80027cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e00b      	b.n	80027e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	2b12      	cmp	r3, #18
 80027d2:	d107      	bne.n	80027e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f84f 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d103      	bne.n	8002814 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e035      	b.n	8002884 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002820:	d108      	bne.n	8002834 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	e01b      	b.n	800286c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	11db      	asrs	r3, r3, #7
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0306 	and.w	r3, r3, #6
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f063 030f 	orn	r3, r3, #15
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <I2C_MasterRequestWrite+0xfc>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f898 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e010      	b.n	8002884 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <I2C_MasterRequestWrite+0x100>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f888 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	00010008 	.word	0x00010008
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e048      	b.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d044      	beq.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff fa23 	bl	8001cf8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d139      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10d      	bne.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	e00c      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d116      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e023      	b.n	8002980 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10d      	bne.n	800295e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	43da      	mvns	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	e00c      	b.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d093      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002996:	e071      	b.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d123      	bne.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e067      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d041      	beq.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7ff f97e 	bl	8001cf8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d136      	bne.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10c      	bne.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	e00b      	b.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e021      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10c      	bne.n	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e00b      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f47f af6d 	bne.w	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad4:	e034      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f886 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e034      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d028      	beq.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7ff f903 	bl	8001cf8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11d      	bne.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b80      	cmp	r3, #128	; 0x80
 8002b10:	d016      	beq.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b80      	cmp	r3, #128	; 0x80
 8002b4c:	d1c3      	bne.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f83e 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e034      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d028      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7ff f8bb 	bl	8001cf8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d016      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d1c3      	bne.n	8002b66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d11b      	bne.n	8002c38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b08b      	sub	sp, #44	; 0x2c
 8002c48:	af06      	add	r7, sp, #24
 8002c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0f1      	b.n	8002e3a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f007 faae 	bl	800a1cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 f9bb 	bl	8005ff8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	687e      	ldr	r6, [r7, #4]
 8002c8a:	466d      	mov	r5, sp
 8002c8c:	f106 0410 	add.w	r4, r6, #16
 8002c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	1d33      	adds	r3, r6, #4
 8002c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f003 f985 	bl	8005fac <USB_CoreInit>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0c2      	b.n	8002e3a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f9b6 	bl	800602c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	e040      	b.n	8002d48 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3303      	adds	r3, #3
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3338      	adds	r3, #56	; 0x38
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	333c      	adds	r3, #60	; 0x3c
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3340      	adds	r3, #64	; 0x40
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	3301      	adds	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3b9      	bcc.n	8002cc6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e044      	b.n	8002de2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3b5      	bcc.n	8002d58 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	687e      	ldr	r6, [r7, #4]
 8002df4:	466d      	mov	r5, sp
 8002df6:	f106 0410 	add.w	r4, r6, #16
 8002dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	1d33      	adds	r3, r6, #4
 8002e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f003 f91c 	bl	8006044 <USB_DevInit>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00d      	b.n	8002e3a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 fb9d 	bl	8008572 <USB_DevDisconnect>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_Start+0x16>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e016      	b.n	8002e86 <HAL_PCD_Start+0x44>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 f8b1 	bl	8005fcc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f007 fc20 	bl	800a6b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 fb71 	bl	800855e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 fb73 	bl	8008586 <USB_ReadInterrupts>
 8002ea0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb1b 	bl	80034e8 <PCD_EP_ISR_Handler>

    return;
 8002eb2:	e119      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d013      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f007 f9f3 	bl	800a2c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002edc:	2100      	movs	r1, #0
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f905 	bl	80030ee <HAL_PCD_SetAddress>

    return;
 8002ee4:	e100      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f08:	e0ee      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00c      	beq.n	8002f2e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	b292      	uxth	r2, r2
 8002f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f2c:	e0dc      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d027      	beq.n	8002f88 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0208 	bic.w	r2, r2, #8
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f007 f9e3 	bl	800a334 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f80:	b292      	uxth	r2, r2
 8002f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f86:	e0af      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8083 	beq.w	800309a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e010      	b.n	8002fbc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	b292      	uxth	r2, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	3320      	adds	r3, #32
 8002fb0:	443b      	add	r3, r7
 8002fb2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d9eb      	bls.n	8002f9a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	b292      	uxth	r2, r2
 8002fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ff2:	bf00      	nop
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f6      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	b292      	uxth	r2, r2
 800301a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e00f      	b.n	8003044 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003024:	7ffb      	ldrb	r3, [r7, #31]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	4611      	mov	r1, r2
 800302c:	7ffa      	ldrb	r2, [r7, #31]
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	440a      	add	r2, r1
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	3320      	adds	r3, #32
 8003036:	443b      	add	r3, r7
 8003038:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800303c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800303e:	7ffb      	ldrb	r3, [r7, #31]
 8003040:	3301      	adds	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	2b07      	cmp	r3, #7
 8003048:	d9ec      	bls.n	8003024 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0208 	orr.w	r2, r2, #8
 800305c:	b292      	uxth	r2, r2
 800305e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003074:	b292      	uxth	r2, r2
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0204 	orr.w	r2, r2, #4
 800308c:	b292      	uxth	r2, r2
 800308e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f007 f934 	bl	800a300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003098:	e026      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030b6:	b292      	uxth	r2, r2
 80030b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f007 f8f2 	bl	800a2a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030c2:	e011      	b.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e0:	b292      	uxth	r2, r2
 80030e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80030e6:	bf00      	nop
  }
}
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_PCD_SetAddress+0x1a>
 8003104:	2302      	movs	r3, #2
 8003106:	e013      	b.n	8003130 <HAL_PCD_SetAddress+0x42>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f005 fa09 	bl	8008538 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4603      	mov	r3, r0
 8003148:	70fb      	strb	r3, [r7, #3]
 800314a:	460b      	mov	r3, r1
 800314c:	803b      	strh	r3, [r7, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da0e      	bge.n	800317c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	705a      	strb	r2, [r3, #1]
 800317a:	e00e      	b.n	800319a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031a6:	883a      	ldrh	r2, [r7, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	78ba      	ldrb	r2, [r7, #2]
 80031b0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031b2:	78bb      	ldrb	r3, [r7, #2]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d102      	bne.n	80031be <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_EP_Open+0x94>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e00e      	b.n	80031ea <HAL_PCD_EP_Open+0xb2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 ff52 	bl	8006084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80031e8:	7afb      	ldrb	r3, [r7, #11]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003202:	2b00      	cmp	r3, #0
 8003204:	da0e      	bge.n	8003224 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00e      	b.n	8003242 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_PCD_EP_Close+0x6a>
 8003258:	2302      	movs	r3, #2
 800325a:	e00e      	b.n	800327a <HAL_PCD_EP_Close+0x88>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 faca 	bl	8006804 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	460b      	mov	r3, r1
 8003290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	f003 0207 	and.w	r2, r3, #7
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6979      	ldr	r1, [r7, #20]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fc81 	bl	8006bdc <USB_EPStartXfer>

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	f003 0207 	and.w	r2, r3, #7
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	460b      	mov	r3, r1
 8003320:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2201      	movs	r2, #1
 800335c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b2da      	uxtb	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fc33 	bl	8006bdc <USB_EPStartXfer>

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 0207 	and.w	r2, r3, #7
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d901      	bls.n	800339e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e04c      	b.n	8003438 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800339e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da0e      	bge.n	80033c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
 80033c2:	e00c      	b.n	80033de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_PCD_EP_SetStall+0x7e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e01c      	b.n	8003438 <HAL_PCD_EP_SetStall+0xb8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	4618      	mov	r0, r3
 800340e:	f004 ff96 	bl	800833e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f005 f8bb 	bl	80085a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	429a      	cmp	r2, r3
 8003458:	d901      	bls.n	800345e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e040      	b.n	80034e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800345e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003462:	2b00      	cmp	r3, #0
 8003464:	da0e      	bge.n	8003484 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	705a      	strb	r2, [r3, #1]
 8003482:	e00e      	b.n	80034a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 0207 	and.w	r2, r3, #7
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_PCD_EP_ClrStall+0x82>
 80034be:	2302      	movs	r3, #2
 80034c0:	e00e      	b.n	80034e0 <HAL_PCD_EP_ClrStall+0xa0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f004 ff84 	bl	80083de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b096      	sub	sp, #88	; 0x58
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034f0:	e3bf      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800350c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 8179 	bne.w	8003808 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003516:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d152      	bne.n	80035c8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	81fb      	strh	r3, [r7, #14]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3328      	adds	r3, #40	; 0x28
 800354a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	3302      	adds	r3, #2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	441a      	add	r2, r3
 8003582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003584:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f006 fe72 	bl	800a272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 836b 	beq.w	8003c72 <PCD_EP_ISR_Handler+0x78a>
 800359c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 8366 	bne.w	8003c72 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b292      	uxth	r2, r2
 80035ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035c6:	e354      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035ce:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d034      	beq.n	8003650 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	3306      	adds	r3, #6
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800360e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003610:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003622:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003624:	b29b      	uxth	r3, r3
 8003626:	f005 f80d 	bl	8008644 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29a      	uxth	r2, r3
 8003632:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003636:	4013      	ands	r3, r2
 8003638:	823b      	strh	r3, [r7, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	8a3a      	ldrh	r2, [r7, #16]
 8003640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003644:	b292      	uxth	r2, r2
 8003646:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f006 fde5 	bl	800a218 <HAL_PCD_SetupStageCallback>
 800364e:	e310      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003650:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003654:	2b00      	cmp	r3, #0
 8003656:	f280 830c 	bge.w	8003c72 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29a      	uxth	r2, r3
 8003662:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003666:	4013      	ands	r3, r2
 8003668:	83fb      	strh	r3, [r7, #30]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	8bfa      	ldrh	r2, [r7, #30]
 8003670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003674:	b292      	uxth	r2, r2
 8003676:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003680:	b29b      	uxth	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	3306      	adds	r3, #6
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80036a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d019      	beq.n	80036e0 <PCD_EP_ISR_Handler+0x1f8>
 80036ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	6959      	ldr	r1, [r3, #20]
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80036c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f004 ffbd 	bl	8008644 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	441a      	add	r2, r3
 80036d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036d8:	2100      	movs	r1, #0
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f006 fdae 	bl	800a23c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80036ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 82bd 	bne.w	8003c72 <PCD_EP_ISR_Handler+0x78a>
 80036f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036fc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003704:	f000 82b5 	beq.w	8003c72 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4413      	add	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003732:	b29a      	uxth	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	801a      	strh	r2, [r3, #0]
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b3e      	cmp	r3, #62	; 0x3e
 800373e:	d91d      	bls.n	800377c <PCD_EP_ISR_Handler+0x294>
 8003740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	647b      	str	r3, [r7, #68]	; 0x44
 8003748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <PCD_EP_ISR_Handler+0x272>
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	3b01      	subs	r3, #1
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29a      	uxth	r2, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003762:	b29b      	uxth	r3, r3
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	b29b      	uxth	r3, r3
 8003768:	4313      	orrs	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003774:	b29a      	uxth	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	e026      	b.n	80037ca <PCD_EP_ISR_Handler+0x2e2>
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <PCD_EP_ISR_Handler+0x2b2>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003792:	b29a      	uxth	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	e017      	b.n	80037ca <PCD_EP_ISR_Handler+0x2e2>
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44
 80037a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <PCD_EP_ISR_Handler+0x2cc>
 80037ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b0:	3301      	adds	r3, #1
 80037b2:	647b      	str	r3, [r7, #68]	; 0x44
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037bc:	b29b      	uxth	r3, r3
 80037be:	029b      	lsls	r3, r3, #10
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	827b      	strh	r3, [r7, #18]
 80037dc:	8a7b      	ldrh	r3, [r7, #18]
 80037de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037e2:	827b      	strh	r3, [r7, #18]
 80037e4:	8a7b      	ldrh	r3, [r7, #18]
 80037e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037ea:	827b      	strh	r3, [r7, #18]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	8a7b      	ldrh	r3, [r7, #18]
 80037f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003802:	b29b      	uxth	r3, r3
 8003804:	8013      	strh	r3, [r2, #0]
 8003806:	e234      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800381c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003820:	2b00      	cmp	r3, #0
 8003822:	f280 80fc 	bge.w	8003a1e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29a      	uxth	r2, r3
 8003838:	f640 738f 	movw	r3, #3983	; 0xf8f
 800383c:	4013      	ands	r3, r2
 800383e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003858:	b292      	uxth	r2, r2
 800385a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800385c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003874:	7b1b      	ldrb	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d125      	bne.n	80038c6 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	3306      	adds	r3, #6
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80038a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8092 	beq.w	80039d4 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b6:	6959      	ldr	r1, [r3, #20]
 80038b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ba:	88da      	ldrh	r2, [r3, #6]
 80038bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038c0:	f004 fec0 	bl	8008644 <USB_ReadPMA>
 80038c4:	e086      	b.n	80039d4 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c8:	78db      	ldrb	r3, [r3, #3]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d10a      	bne.n	80038e4 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80038ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038d2:	461a      	mov	r2, r3
 80038d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9d9 	bl	8003c8e <HAL_PCD_EP_DB_Receive>
 80038dc:	4603      	mov	r3, r0
 80038de:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038e2:	e077      	b.n	80039d4 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	441a      	add	r2, r3
 8003910:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003920:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003924:	b29b      	uxth	r3, r3
 8003926:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d024      	beq.n	800398c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394a:	b29b      	uxth	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	3302      	adds	r3, #2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800396e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d02e      	beq.n	80039d4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397c:	6959      	ldr	r1, [r3, #20]
 800397e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003980:	891a      	ldrh	r2, [r3, #8]
 8003982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003986:	f004 fe5d 	bl	8008644 <USB_ReadPMA>
 800398a:	e023      	b.n	80039d4 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	3306      	adds	r3, #6
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80039b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	6959      	ldr	r1, [r3, #20]
 80039c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ca:	895a      	ldrh	r2, [r3, #10]
 80039cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039d0:	f004 fe38 	bl	8008644 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039dc:	441a      	add	r2, r3
 80039de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80039e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039ea:	441a      	add	r2, r3
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <PCD_EP_ISR_Handler+0x51c>
 80039f8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80039fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d206      	bcs.n	8003a12 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f006 fc16 	bl	800a23c <HAL_PCD_DataOutStageCallback>
 8003a10:	e005      	b.n	8003a1e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f003 f8df 	bl	8006bdc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8123 	beq.w	8003c72 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7e:	78db      	ldrb	r3, [r3, #3]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 80a2 	bne.w	8003bca <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8093 	beq.w	8003bbc <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d046      	beq.n	8003b30 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d126      	bne.n	8003af8 <PCD_EP_ISR_Handler+0x610>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	4413      	add	r3, r2
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	011a      	lsls	r2, r3, #4
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	4413      	add	r3, r2
 8003acc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	e061      	b.n	8003bbc <PCD_EP_ISR_Handler+0x6d4>
 8003af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d15d      	bne.n	8003bbc <PCD_EP_ISR_Handler+0x6d4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	4413      	add	r3, r2
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	011a      	lsls	r2, r3, #4
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	4413      	add	r3, r2
 8003b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e045      	b.n	8003bbc <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d126      	bne.n	8003b8c <PCD_EP_ISR_Handler+0x6a4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	4413      	add	r3, r2
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	011a      	lsls	r2, r3, #4
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	4413      	add	r3, r2
 8003b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	e017      	b.n	8003bbc <PCD_EP_ISR_Handler+0x6d4>
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d113      	bne.n	8003bbc <PCD_EP_ISR_Handler+0x6d4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba2:	4413      	add	r3, r2
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	011a      	lsls	r2, r3, #4
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2200      	movs	r2, #0
 8003bba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f006 fb55 	bl	800a272 <HAL_PCD_DataInStageCallback>
 8003bc8:	e053      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d146      	bne.n	8003c64 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	3302      	adds	r3, #2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d907      	bls.n	8003c1e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1a:	619a      	str	r2, [r3, #24]
 8003c1c:	e002      	b.n	8003c24 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f006 fb1d 	bl	800a272 <HAL_PCD_DataInStageCallback>
 8003c38:	e01b      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c42:	441a      	add	r2, r3
 8003c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c46:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c50:	441a      	add	r2, r3
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 ffbd 	bl	8006bdc <USB_EPStartXfer>
 8003c62:	e006      	b.n	8003c72 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f91b 	bl	8003ea8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f6ff ac37 	blt.w	80034f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3758      	adds	r7, #88	; 0x58
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b088      	sub	sp, #32
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d07e      	beq.n	8003da4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	8b7b      	ldrh	r3, [r7, #26]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d306      	bcc.n	8003ce8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	8b7b      	ldrh	r3, [r7, #26]
 8003ce0:	1ad2      	subs	r2, r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	619a      	str	r2, [r3, #24]
 8003ce6:	e002      	b.n	8003cee <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d123      	bne.n	8003d3e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	833b      	strh	r3, [r7, #24]
 8003d12:	8b3b      	ldrh	r3, [r7, #24]
 8003d14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d18:	833b      	strh	r3, [r7, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	8b3b      	ldrh	r3, [r7, #24]
 8003d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01f      	beq.n	8003d88 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	82fb      	strh	r3, [r7, #22]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	8afb      	ldrh	r3, [r7, #22]
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d88:	8b7b      	ldrh	r3, [r7, #26]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6959      	ldr	r1, [r3, #20]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	891a      	ldrh	r2, [r3, #8]
 8003d9c:	8b7b      	ldrh	r3, [r7, #26]
 8003d9e:	f004 fc51 	bl	8008644 <USB_ReadPMA>
 8003da2:	e07c      	b.n	8003e9e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4413      	add	r3, r2
 8003db8:	3306      	adds	r3, #6
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dcc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	8b7b      	ldrh	r3, [r7, #26]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d306      	bcc.n	8003de6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	8b7b      	ldrh	r3, [r7, #26]
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	619a      	str	r2, [r3, #24]
 8003de4:	e002      	b.n	8003dec <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d123      	bne.n	8003e3c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	83fb      	strh	r3, [r7, #30]
 8003e10:	8bfb      	ldrh	r3, [r7, #30]
 8003e12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e16:	83fb      	strh	r3, [r7, #30]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	8bfb      	ldrh	r3, [r7, #30]
 8003e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11f      	bne.n	8003e86 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e60:	83bb      	strh	r3, [r7, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	441a      	add	r2, r3
 8003e70:	8bbb      	ldrh	r3, [r7, #28]
 8003e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e86:	8b7b      	ldrh	r3, [r7, #26]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6959      	ldr	r1, [r3, #20]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	895a      	ldrh	r2, [r3, #10]
 8003e98:	8b7b      	ldrh	r3, [r7, #26]
 8003e9a:	f004 fbd3 	bl	8008644 <USB_ReadPMA>
    }
  }

  return count;
 8003e9e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b0a4      	sub	sp, #144	; 0x90
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 81dd 	beq.w	800427c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d907      	bls.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	619a      	str	r2, [r3, #24]
 8003f08:	e002      	b.n	8003f10 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 80b9 	bne.w	800408c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d126      	bne.n	8003f70 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	4413      	add	r3, r2
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	011a      	lsls	r2, r3, #4
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	e01a      	b.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d116      	bne.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	4413      	add	r3, r2
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	011a      	lsls	r2, r3, #4
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	4413      	add	r3, r2
 8003f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d126      	bne.n	8004002 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	011a      	lsls	r2, r3, #4
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	e017      	b.n	8004032 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d113      	bne.n	8004032 <HAL_PCD_EP_DB_Transmit+0x18a>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	4413      	add	r3, r2
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	011a      	lsls	r2, r3, #4
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	4413      	add	r3, r2
 8004026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2200      	movs	r2, #0
 8004030:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f006 f91a 	bl	800a272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 82fc 	beq.w	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004064:	82fb      	strh	r3, [r7, #22]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	8afb      	ldrh	r3, [r7, #22]
 8004076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	b29b      	uxth	r3, r3
 8004088:	8013      	strh	r3, [r2, #0]
 800408a:	e2da      	b.n	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d021      	beq.n	80040da <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f040 82ae 	bne.w	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040ee:	441a      	add	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040fc:	441a      	add	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d30b      	bcc.n	8004126 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6a1a      	ldr	r2, [r3, #32]
 800411a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	621a      	str	r2, [r3, #32]
 8004124:	e017      	b.n	8004156 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d108      	bne.n	8004140 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800412e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800413e:	e00a      	b.n	8004156 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d165      	bne.n	800422a <HAL_PCD_EP_DB_Transmit+0x382>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004172:	4413      	add	r3, r2
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	011a      	lsls	r2, r3, #4
 800417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417e:	4413      	add	r3, r2
 8004180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004190:	b29a      	uxth	r2, r3
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800419a:	2b3e      	cmp	r3, #62	; 0x3e
 800419c:	d91d      	bls.n	80041da <HAL_PCD_EP_DB_Transmit+0x332>
 800419e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x310>
 80041b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b4:	3b01      	subs	r3, #1
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	e044      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_PCD_EP_DB_Transmit+0x350>
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	e035      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_PCD_EP_DB_Transmit+0x36a>
 800420c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420e:	3301      	adds	r3, #1
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29a      	uxth	r2, r3
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	b29b      	uxth	r3, r3
 800421c:	029b      	lsls	r3, r3, #10
 800421e:	b29b      	uxth	r3, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	b29a      	uxth	r2, r3
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	801a      	strh	r2, [r3, #0]
 8004228:	e01c      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d118      	bne.n	8004264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	647b      	str	r3, [r7, #68]	; 0x44
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004246:	4413      	add	r3, r2
 8004248:	647b      	str	r3, [r7, #68]	; 0x44
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	011a      	lsls	r2, r3, #4
 8004250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004252:	4413      	add	r3, r2
 8004254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
 800425a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800425e:	b29a      	uxth	r2, r3
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6959      	ldr	r1, [r3, #20]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	891a      	ldrh	r2, [r3, #8]
 8004270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004274:	b29b      	uxth	r3, r3
 8004276:	f004 f9a0 	bl	80085ba <USB_WritePMA>
 800427a:	e1e2      	b.n	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	3306      	adds	r3, #6
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d307      	bcc.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	619a      	str	r2, [r3, #24]
 80042c2:	e002      	b.n	80042ca <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 80c0 	bne.w	8004454 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d126      	bne.n	800432a <HAL_PCD_EP_DB_Transmit+0x482>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042f0:	4413      	add	r3, r2
 80042f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	011a      	lsls	r2, r3, #4
 80042fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004302:	67bb      	str	r3, [r7, #120]	; 0x78
 8004304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430e:	b29a      	uxth	r2, r3
 8004310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004322:	b29a      	uxth	r2, r3
 8004324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004326:	801a      	strh	r2, [r3, #0]
 8004328:	e01a      	b.n	8004360 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d116      	bne.n	8004360 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004346:	4413      	add	r3, r2
 8004348:	667b      	str	r3, [r7, #100]	; 0x64
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	011a      	lsls	r2, r3, #4
 8004350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004352:	4413      	add	r3, r2
 8004354:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004358:	663b      	str	r3, [r7, #96]	; 0x60
 800435a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800435c:	2200      	movs	r2, #0
 800435e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	677b      	str	r3, [r7, #116]	; 0x74
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d12b      	bne.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	4413      	add	r3, r2
 8004384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	011a      	lsls	r2, r3, #4
 800438c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438e:	4413      	add	r3, r2
 8004390:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043bc:	b29a      	uxth	r2, r3
 80043be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e017      	b.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d113      	bne.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043dc:	4413      	add	r3, r2
 80043de:	677b      	str	r3, [r7, #116]	; 0x74
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	011a      	lsls	r2, r3, #4
 80043e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e8:	4413      	add	r3, r2
 80043ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ee:	673b      	str	r3, [r7, #112]	; 0x70
 80043f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f2:	2200      	movs	r2, #0
 80043f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4619      	mov	r1, r3
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f005 ff38 	bl	800a272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 811a 	bne.w	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]
 8004452:	e0f6      	b.n	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d121      	bne.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800448e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 80ca 	bne.w	8004642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044b6:	441a      	add	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044c4:	441a      	add	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d30b      	bcc.n	80044ee <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	621a      	str	r2, [r3, #32]
 80044ec:	e017      	b.n	800451e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80044f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004506:	e00a      	b.n	800451e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	657b      	str	r3, [r7, #84]	; 0x54
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d165      	bne.n	80045f8 <HAL_PCD_EP_DB_Transmit+0x750>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004540:	4413      	add	r3, r2
 8004542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	011a      	lsls	r2, r3, #4
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	4413      	add	r3, r2
 800454e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004552:	65bb      	str	r3, [r7, #88]	; 0x58
 8004554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455e:	b29a      	uxth	r2, r3
 8004560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004568:	2b3e      	cmp	r3, #62	; 0x3e
 800456a:	d91d      	bls.n	80045a8 <HAL_PCD_EP_DB_Transmit+0x700>
 800456c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	66bb      	str	r3, [r7, #104]	; 0x68
 8004574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004582:	3b01      	subs	r3, #1
 8004584:	66bb      	str	r3, [r7, #104]	; 0x68
 8004586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29a      	uxth	r2, r3
 800458c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458e:	b29b      	uxth	r3, r3
 8004590:	029b      	lsls	r3, r3, #10
 8004592:	b29b      	uxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	e041      	b.n	800462c <HAL_PCD_EP_DB_Transmit+0x784>
 80045a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80045b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e032      	b.n	800462c <HAL_PCD_EP_DB_Transmit+0x784>
 80045c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x738>
 80045da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045dc:	3301      	adds	r3, #1
 80045de:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	029b      	lsls	r3, r3, #10
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	4313      	orrs	r3, r2
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	e019      	b.n	800462c <HAL_PCD_EP_DB_Transmit+0x784>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d115      	bne.n	800462c <HAL_PCD_EP_DB_Transmit+0x784>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004608:	b29b      	uxth	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460e:	4413      	add	r3, r2
 8004610:	657b      	str	r3, [r7, #84]	; 0x54
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	011a      	lsls	r2, r3, #4
 8004618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461a:	4413      	add	r3, r2
 800461c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004620:	653b      	str	r3, [r7, #80]	; 0x50
 8004622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004626:	b29a      	uxth	r2, r3
 8004628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6959      	ldr	r1, [r3, #20]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	895a      	ldrh	r2, [r3, #10]
 8004638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800463c:	b29b      	uxth	r3, r3
 800463e:	f003 ffbc 	bl	80085ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465c:	82bb      	strh	r3, [r7, #20]
 800465e:	8abb      	ldrh	r3, [r7, #20]
 8004660:	f083 0310 	eor.w	r3, r3, #16
 8004664:	82bb      	strh	r3, [r7, #20]
 8004666:	8abb      	ldrh	r3, [r7, #20]
 8004668:	f083 0320 	eor.w	r3, r3, #32
 800466c:	82bb      	strh	r3, [r7, #20]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	8abb      	ldrh	r3, [r7, #20]
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3790      	adds	r7, #144	; 0x90
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	817b      	strh	r3, [r7, #10]
 80046aa:	4613      	mov	r3, r2
 80046ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046ae:	897b      	ldrh	r3, [r7, #10]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ba:	897b      	ldrh	r3, [r7, #10]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e009      	b.n	80046e6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046d2:	897a      	ldrh	r2, [r7, #10]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80046e6:	893b      	ldrh	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d107      	bne.n	80046fc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	80da      	strh	r2, [r3, #6]
 80046fa:	e00b      	b.n	8004714 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2201      	movs	r2, #1
 8004700:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	b29a      	uxth	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	b29a      	uxth	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e272      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8087 	beq.w	800484e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004740:	4b92      	ldr	r3, [pc, #584]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b04      	cmp	r3, #4
 800474a:	d00c      	beq.n	8004766 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d112      	bne.n	800477e <HAL_RCC_OscConfig+0x5e>
 8004758:	4b8c      	ldr	r3, [pc, #560]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d10b      	bne.n	800477e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004766:	4b89      	ldr	r3, [pc, #548]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d06c      	beq.n	800484c <HAL_RCC_OscConfig+0x12c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d168      	bne.n	800484c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e24c      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004786:	d106      	bne.n	8004796 <HAL_RCC_OscConfig+0x76>
 8004788:	4b80      	ldr	r3, [pc, #512]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7f      	ldr	r2, [pc, #508]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 800478e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e02e      	b.n	80047f4 <HAL_RCC_OscConfig+0xd4>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x98>
 800479e:	4b7b      	ldr	r3, [pc, #492]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7a      	ldr	r2, [pc, #488]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4b78      	ldr	r3, [pc, #480]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a77      	ldr	r2, [pc, #476]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e01d      	b.n	80047f4 <HAL_RCC_OscConfig+0xd4>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCC_OscConfig+0xbc>
 80047c2:	4b72      	ldr	r3, [pc, #456]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a71      	ldr	r2, [pc, #452]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b6f      	ldr	r3, [pc, #444]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6e      	ldr	r2, [pc, #440]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e00b      	b.n	80047f4 <HAL_RCC_OscConfig+0xd4>
 80047dc:	4b6b      	ldr	r3, [pc, #428]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a6a      	ldr	r2, [pc, #424]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	4b68      	ldr	r3, [pc, #416]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a67      	ldr	r2, [pc, #412]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80047ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fd fa7c 	bl	8001cf8 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004804:	f7fd fa78 	bl	8001cf8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e200      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b5d      	ldr	r3, [pc, #372]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0xe4>
 8004822:	e014      	b.n	800484e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fd fa68 	bl	8001cf8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800482c:	f7fd fa64 	bl	8001cf8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1ec      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483e:	4b53      	ldr	r3, [pc, #332]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x10c>
 800484a:	e000      	b.n	800484e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d063      	beq.n	8004922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800485a:	4b4c      	ldr	r3, [pc, #304]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004866:	4b49      	ldr	r3, [pc, #292]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b08      	cmp	r3, #8
 8004870:	d11c      	bne.n	80048ac <HAL_RCC_OscConfig+0x18c>
 8004872:	4b46      	ldr	r3, [pc, #280]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d116      	bne.n	80048ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_RCC_OscConfig+0x176>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e1c0      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4939      	ldr	r1, [pc, #228]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048aa:	e03a      	b.n	8004922 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ba:	f7fd fa1d 	bl	8001cf8 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c2:	f7fd fa19 	bl	8001cf8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1a1      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d4:	4b2d      	ldr	r3, [pc, #180]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4927      	ldr	r1, [pc, #156]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]
 80048f4:	e015      	b.n	8004922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f6:	4b26      	ldr	r3, [pc, #152]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd f9fc 	bl	8001cf8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004904:	f7fd f9f8 	bl	8001cf8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e180      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03a      	beq.n	80049a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d019      	beq.n	800496a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004936:	4b17      	ldr	r3, [pc, #92]	; (8004994 <HAL_RCC_OscConfig+0x274>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493c:	f7fd f9dc 	bl	8001cf8 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004944:	f7fd f9d8 	bl	8001cf8 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e160      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_RCC_OscConfig+0x26c>)
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0f0      	beq.n	8004944 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004962:	2001      	movs	r0, #1
 8004964:	f000 faba 	bl	8004edc <RCC_Delay>
 8004968:	e01c      	b.n	80049a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_RCC_OscConfig+0x274>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004970:	f7fd f9c2 	bl	8001cf8 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004976:	e00f      	b.n	8004998 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004978:	f7fd f9be 	bl	8001cf8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d908      	bls.n	8004998 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e146      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	42420000 	.word	0x42420000
 8004994:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004998:	4b92      	ldr	r3, [pc, #584]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e9      	bne.n	8004978 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a6 	beq.w	8004afe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b6:	4b8b      	ldr	r3, [pc, #556]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4a87      	ldr	r2, [pc, #540]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	61d3      	str	r3, [r2, #28]
 80049ce:	4b85      	ldr	r3, [pc, #532]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049da:	2301      	movs	r3, #1
 80049dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049de:	4b82      	ldr	r3, [pc, #520]	; (8004be8 <HAL_RCC_OscConfig+0x4c8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d118      	bne.n	8004a1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ea:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <HAL_RCC_OscConfig+0x4c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a7e      	ldr	r2, [pc, #504]	; (8004be8 <HAL_RCC_OscConfig+0x4c8>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f6:	f7fd f97f 	bl	8001cf8 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fd f97b 	bl	8001cf8 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b64      	cmp	r3, #100	; 0x64
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e103      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b75      	ldr	r3, [pc, #468]	; (8004be8 <HAL_RCC_OscConfig+0x4c8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x312>
 8004a24:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	4a6e      	ldr	r2, [pc, #440]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6213      	str	r3, [r2, #32]
 8004a30:	e02d      	b.n	8004a8e <HAL_RCC_OscConfig+0x36e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x334>
 8004a3a:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4a69      	ldr	r2, [pc, #420]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	6213      	str	r3, [r2, #32]
 8004a46:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4a66      	ldr	r2, [pc, #408]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	6213      	str	r3, [r2, #32]
 8004a52:	e01c      	b.n	8004a8e <HAL_RCC_OscConfig+0x36e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d10c      	bne.n	8004a76 <HAL_RCC_OscConfig+0x356>
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a60      	ldr	r2, [pc, #384]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	f043 0304 	orr.w	r3, r3, #4
 8004a66:	6213      	str	r3, [r2, #32]
 8004a68:	4b5e      	ldr	r3, [pc, #376]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	e00b      	b.n	8004a8e <HAL_RCC_OscConfig+0x36e>
 8004a76:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4a5a      	ldr	r2, [pc, #360]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6213      	str	r3, [r2, #32]
 8004a82:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a57      	ldr	r2, [pc, #348]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d015      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a96:	f7fd f92f 	bl	8001cf8 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fd f92b 	bl	8001cf8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e0b1      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ee      	beq.n	8004a9e <HAL_RCC_OscConfig+0x37e>
 8004ac0:	e014      	b.n	8004aec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fd f919 	bl	8001cf8 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fd f915 	bl	8001cf8 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e09b      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae0:	4b40      	ldr	r3, [pc, #256]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1ee      	bne.n	8004aca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af2:	4b3c      	ldr	r3, [pc, #240]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8087 	beq.w	8004c16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b08:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d061      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d146      	bne.n	8004baa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1c:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_RCC_OscConfig+0x4cc>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b22:	f7fd f8e9 	bl	8001cf8 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd f8e5 	bl	8001cf8 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e06d      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3c:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d108      	bne.n	8004b64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4921      	ldr	r1, [pc, #132]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b64:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a19      	ldr	r1, [r3, #32]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	430b      	orrs	r3, r1
 8004b76:	491b      	ldr	r1, [pc, #108]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x4cc>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7fd f8b9 	bl	8001cf8 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8a:	f7fd f8b5 	bl	8001cf8 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e03d      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b9c:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x46a>
 8004ba8:	e035      	b.n	8004c16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <HAL_RCC_OscConfig+0x4cc>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fd f8a2 	bl	8001cf8 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fd f89e 	bl	8001cf8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e026      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x498>
 8004bd6:	e01e      	b.n	8004c16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e019      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40007000 	.word	0x40007000
 8004bec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_OscConfig+0x500>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000

08004c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0d0      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d910      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 0207 	bic.w	r2, r3, #7
 8004c4e:	4965      	ldr	r1, [pc, #404]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a58      	ldr	r2, [pc, #352]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d040      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d115      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e073      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e06b      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f023 0203 	bic.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4936      	ldr	r1, [pc, #216]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d14:	f7fc fff0 	bl	8001cf8 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fc ffec 	bl	8001cf8 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e053      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 020c 	and.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1eb      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d210      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 0207 	bic.w	r2, r3, #7
 8004d5a:	4922      	ldr	r1, [pc, #136]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f821 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x1c8>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1cc>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1d0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fc ff4e 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	0800b54c 	.word	0x0800b54c
 8004df0:	20000008 	.word	0x20000008
 8004df4:	2000000c 	.word	0x2000000c

08004df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x30>
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x36>
 8004e26:	e027      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e2a:	613b      	str	r3, [r7, #16]
      break;
 8004e2c:	e027      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	0c9b      	lsrs	r3, r3, #18
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e38:	5cd3      	ldrb	r3, [r2, r3]
 8004e3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e46:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	0c5b      	lsrs	r3, r3, #17
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	4a11      	ldr	r2, [pc, #68]	; (8004e98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a0d      	ldr	r2, [pc, #52]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e5a:	fb03 f202 	mul.w	r2, r3, r2
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e004      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	613b      	str	r3, [r7, #16]
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e7a:	613b      	str	r3, [r7, #16]
      break;
 8004e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7e:	693b      	ldr	r3, [r7, #16]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	007a1200 	.word	0x007a1200
 8004e94:	0800b564 	.word	0x0800b564
 8004e98:	0800b574 	.word	0x0800b574
 8004e9c:	003d0900 	.word	0x003d0900

08004ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea4:	4b02      	ldr	r3, [pc, #8]	; (8004eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr
 8004eb0:	20000008 	.word	0x20000008

08004eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004eb8:	f7ff fff2 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	0800b55c 	.word	0x0800b55c

08004edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <RCC_Delay+0x34>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0a      	ldr	r2, [pc, #40]	; (8004f14 <RCC_Delay+0x38>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0a5b      	lsrs	r3, r3, #9
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ef8:	bf00      	nop
  }
  while (Delay --);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	60fa      	str	r2, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f9      	bne.n	8004ef8 <RCC_Delay+0x1c>
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	20000008 	.word	0x20000008
 8004f14:	10624dd3 	.word	0x10624dd3

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d07d      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f38:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f44:	4b4c      	ldr	r3, [pc, #304]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4a4b      	ldr	r2, [pc, #300]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	61d3      	str	r3, [r2, #28]
 8004f50:	4b49      	ldr	r3, [pc, #292]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	4b46      	ldr	r3, [pc, #280]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d118      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6c:	4b43      	ldr	r3, [pc, #268]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a42      	ldr	r2, [pc, #264]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f78:	f7fc febe 	bl	8001cf8 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	e008      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f80:	f7fc feba 	bl	8001cf8 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e06d      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f92:	4b3a      	ldr	r3, [pc, #232]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f9e:	4b36      	ldr	r3, [pc, #216]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02e      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d027      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fbc:	4b2e      	ldr	r3, [pc, #184]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fcc:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fd2:	4a29      	ldr	r2, [pc, #164]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d014      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fc fe89 	bl	8001cf8 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe8:	e00a      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fc fe85 	bl	8001cf8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e036      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0ee      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4917      	ldr	r1, [pc, #92]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501a:	4313      	orrs	r3, r2
 800501c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005024:	4b14      	ldr	r3, [pc, #80]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	490b      	ldr	r1, [pc, #44]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	4904      	ldr	r1, [pc, #16]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
 800507c:	40007000 	.word	0x40007000
 8005080:	42420440 	.word	0x42420440

08005084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e041      	b.n	800511a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc fd1e 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fc5e 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e03a      	b.n	80051b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIM_Base_Start_IT+0x98>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x58>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d009      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x58>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x58>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d010      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	e007      	b.n	80051b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800

080051c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10f      	bne.n	8005210 <HAL_TIM_Base_Stop_IT+0x48>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f240 4344 	movw	r3, #1092	; 0x444
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_Base_Stop_IT+0x48>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e041      	b.n	80052ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f839 	bl	80052c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f000 fb8e 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x24>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e022      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d109      	bne.n	8005312 <HAL_TIM_PWM_Start+0x3e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e015      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d109      	bne.n	800532c <HAL_TIM_PWM_Start+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e008      	b.n	800533e <HAL_TIM_PWM_Start+0x6a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e05e      	b.n	8005404 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0x82>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005354:	e013      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0x92>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005364:	e00b      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005374:	e003      	b.n	800537e <HAL_TIM_PWM_Start+0xaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fd7c 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_TIM_PWM_Start+0x138>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <HAL_TIM_PWM_Start+0x138>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIM_PWM_Start+0xfa>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d009      	beq.n	80053ce <HAL_TIM_PWM_Start+0xfa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a14      	ldr	r2, [pc, #80]	; (8005410 <HAL_TIM_PWM_Start+0x13c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_PWM_Start+0xfa>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a12      	ldr	r2, [pc, #72]	; (8005414 <HAL_TIM_PWM_Start+0x140>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d111      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d010      	beq.n	8005402 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e007      	b.n	8005402 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800

08005418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0202 	mvn.w	r2, #2
 8005444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa76 	bl	800594c <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa69 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa78 	bl	800595e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b04      	cmp	r3, #4
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0204 	mvn.w	r2, #4
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa4c 	bl	800594c <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa3f 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa4e 	bl	800595e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0208 	mvn.w	r2, #8
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa22 	bl	800594c <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa15 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fa24 	bl	800595e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0210 	mvn.w	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2208      	movs	r2, #8
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9f8 	bl	800594c <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9eb 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f9fa 	bl	800595e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0201 	mvn.w	r2, #1
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc f84e 	bl	8001638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fce9 	bl	8005f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d10e      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d107      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9be 	bl	8005970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d10e      	bne.n	8005620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b20      	cmp	r3, #32
 800560e:	d107      	bne.n	8005620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0220 	mvn.w	r2, #32
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fcb4 	bl	8005f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005642:	2302      	movs	r3, #2
 8005644:	e0ae      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	f200 809f 	bhi.w	8005794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005691 	.word	0x08005691
 8005660:	08005795 	.word	0x08005795
 8005664:	08005795 	.word	0x08005795
 8005668:	08005795 	.word	0x08005795
 800566c:	080056d1 	.word	0x080056d1
 8005670:	08005795 	.word	0x08005795
 8005674:	08005795 	.word	0x08005795
 8005678:	08005795 	.word	0x08005795
 800567c:	08005713 	.word	0x08005713
 8005680:	08005795 	.word	0x08005795
 8005684:	08005795 	.word	0x08005795
 8005688:	08005795 	.word	0x08005795
 800568c:	08005753 	.word	0x08005753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f9d6 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0204 	bic.w	r2, r2, #4
 80056ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6999      	ldr	r1, [r3, #24]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	619a      	str	r2, [r3, #24]
      break;
 80056ce:	e064      	b.n	800579a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fa1c 	bl	8005b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6999      	ldr	r1, [r3, #24]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	021a      	lsls	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	619a      	str	r2, [r3, #24]
      break;
 8005710:	e043      	b.n	800579a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fa65 	bl	8005be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0208 	orr.w	r2, r2, #8
 800572c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0204 	bic.w	r2, r2, #4
 800573c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69d9      	ldr	r1, [r3, #28]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	61da      	str	r2, [r3, #28]
      break;
 8005750:	e023      	b.n	800579a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 faaf 	bl	8005cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800576c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	021a      	lsls	r2, r3, #8
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	61da      	str	r2, [r3, #28]
      break;
 8005792:	e002      	b.n	800579a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
      break;
 8005798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0b4      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x186>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005800:	d03e      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0xd4>
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005806:	f200 8087 	bhi.w	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	f000 8086 	beq.w	800591e <HAL_TIM_ConfigClockSource+0x172>
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	d87f      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d01a      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xa6>
 800581c:	2b70      	cmp	r3, #112	; 0x70
 800581e:	d87b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b60      	cmp	r3, #96	; 0x60
 8005822:	d050      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d877      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b50      	cmp	r3, #80	; 0x50
 800582a:	d03c      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0xfa>
 800582c:	2b50      	cmp	r3, #80	; 0x50
 800582e:	d873      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d058      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d86f      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d064      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	2b30      	cmp	r3, #48	; 0x30
 800583e:	d86b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d060      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	2b20      	cmp	r3, #32
 8005846:	d867      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05c      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b10      	cmp	r3, #16
 800584e:	d05a      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	e062      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005862:	f000 faf0 	bl	8005e46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	609a      	str	r2, [r3, #8]
      break;
 800587e:	e04f      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005890:	f000 fad9 	bl	8005e46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a2:	609a      	str	r2, [r3, #8]
      break;
 80058a4:	e03c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 fa50 	bl	8005d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2150      	movs	r1, #80	; 0x50
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 faa7 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 80058c4:	e02c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d2:	461a      	mov	r2, r3
 80058d4:	f000 fa6e 	bl	8005db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2160      	movs	r1, #96	; 0x60
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fa97 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 80058e4:	e01c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	461a      	mov	r2, r3
 80058f4:	f000 fa30 	bl	8005d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2140      	movs	r1, #64	; 0x40
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fa87 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005904:	e00c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f000 fa7e 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005916:	e003      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e000      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
	...

08005984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <TIM_Base_SetConfig+0xb8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00b      	beq.n	80059b4 <TIM_Base_SetConfig+0x30>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d007      	beq.n	80059b4 <TIM_Base_SetConfig+0x30>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <TIM_Base_SetConfig+0xbc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_Base_SetConfig+0x30>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <TIM_Base_SetConfig+0xc0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d108      	bne.n	80059c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1c      	ldr	r2, [pc, #112]	; (8005a3c <TIM_Base_SetConfig+0xb8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_Base_SetConfig+0x62>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d4:	d007      	beq.n	80059e6 <TIM_Base_SetConfig+0x62>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <TIM_Base_SetConfig+0xbc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0x62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <TIM_Base_SetConfig+0xc0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <TIM_Base_SetConfig+0xb8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f023 0201 	bic.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <TIM_OC1_SetConfig+0xc8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0308 	bic.w	r3, r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <TIM_OC1_SetConfig+0xc8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d111      	bne.n	8005aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40012c00 	.word	0x40012c00

08005b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 0210 	bic.w	r2, r3, #16
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0320 	bic.w	r3, r3, #32
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <TIM_OC2_SetConfig+0xd0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10d      	bne.n	8005b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <TIM_OC2_SetConfig+0xd0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d113      	bne.n	8005bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr
 8005be4:	40012c00 	.word	0x40012c00

08005be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <TIM_OC3_SetConfig+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10d      	bne.n	8005c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a14      	ldr	r2, [pc, #80]	; (8005cb8 <TIM_OC3_SetConfig+0xd0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d113      	bne.n	8005c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	621a      	str	r2, [r3, #32]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40012c00 	.word	0x40012c00

08005cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	031b      	lsls	r3, r3, #12
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <TIM_OC4_SetConfig+0x98>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d109      	bne.n	8005d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	019b      	lsls	r3, r3, #6
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	40012c00 	.word	0x40012c00

08005d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0201 	bic.w	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 030a 	bic.w	r3, r3, #10
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0210 	bic.w	r2, r3, #16
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	031b      	lsls	r3, r3, #12
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	621a      	str	r2, [r3, #32]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f043 0307 	orr.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b087      	sub	sp, #28
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	021a      	lsls	r2, r3, #8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	609a      	str	r2, [r3, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2201      	movs	r2, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e046      	b.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00e      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d009      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d10c      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40000800 	.word	0x40000800

08005f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fac:	b084      	sub	sp, #16
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	f107 0014 	add.w	r0, r7, #20
 8005fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr

08005fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fdc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fe0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006000:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006004:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	b29b      	uxth	r3, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	b29b      	uxth	r3, r3
 8006016:	4013      	ands	r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006044:	b084      	sub	sp, #16
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	f107 0014 	add.w	r0, r7, #20
 8006052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	b004      	add	sp, #16
 8006082:	4770      	bx	lr

08006084 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006084:	b480      	push	{r7}
 8006086:	b09d      	sub	sp, #116	; 0x74
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	78db      	ldrb	r3, [r3, #3]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d81f      	bhi.n	80060f6 <USB_ActivateEndpoint+0x72>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <USB_ActivateEndpoint+0x38>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060ff 	.word	0x080060ff
 80060c8:	080060db 	.word	0x080060db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060d8:	e012      	b.n	8006100 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060e6:	e00b      	b.n	8006100 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060f4:	e004      	b.n	8006100 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80060fc:	e000      	b.n	8006100 <USB_ActivateEndpoint+0x7c>
      break;
 80060fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	b29a      	uxth	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	7b1b      	ldrb	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 8178 	bne.w	8006462 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 8084 	beq.w	8006284 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006186:	b29b      	uxth	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	4413      	add	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	011a      	lsls	r2, r3, #4
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	88db      	ldrh	r3, [r3, #6]
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	827b      	strh	r3, [r7, #18]
 80061be:	8a7b      	ldrh	r3, [r7, #18]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <USB_ActivateEndpoint+0x17c>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	823b      	strh	r3, [r7, #16]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	8a3b      	ldrh	r3, [r7, #16]
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d020      	beq.n	800624a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	81bb      	strh	r3, [r7, #12]
 8006220:	89bb      	ldrh	r3, [r7, #12]
 8006222:	f083 0320 	eor.w	r3, r3, #32
 8006226:	81bb      	strh	r3, [r7, #12]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
 8006248:	e2d5      	b.n	80067f6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006260:	81fb      	strh	r3, [r7, #14]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
 8006282:	e2b8      	b.n	80067f6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	633b      	str	r3, [r7, #48]	; 0x30
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628e:	b29b      	uxth	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	4413      	add	r3, r2
 8006296:	633b      	str	r3, [r7, #48]	; 0x30
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	011a      	lsls	r2, r3, #4
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	88db      	ldrh	r3, [r3, #6]
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	4413      	add	r3, r2
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	011a      	lsls	r2, r3, #4
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b3e      	cmp	r3, #62	; 0x3e
 80062f2:	d91d      	bls.n	8006330 <USB_ActivateEndpoint+0x2ac>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <USB_ActivateEndpoint+0x28a>
 8006308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630a:	3b01      	subs	r3, #1
 800630c:	66bb      	str	r3, [r7, #104]	; 0x68
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29a      	uxth	r2, r3
 8006314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29b      	uxth	r3, r3
 800631c:	4313      	orrs	r3, r2
 800631e:	b29b      	uxth	r3, r3
 8006320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006328:	b29a      	uxth	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	e026      	b.n	800637e <USB_ActivateEndpoint+0x2fa>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <USB_ActivateEndpoint+0x2ca>
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e017      	b.n	800637e <USB_ActivateEndpoint+0x2fa>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	66bb      	str	r3, [r7, #104]	; 0x68
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <USB_ActivateEndpoint+0x2e4>
 8006362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006364:	3301      	adds	r3, #1
 8006366:	66bb      	str	r3, [r7, #104]	; 0x68
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29b      	uxth	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	847b      	strh	r3, [r7, #34]	; 0x22
 800638c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01b      	beq.n	80063ce <USB_ActivateEndpoint+0x34a>
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ac:	843b      	strh	r3, [r7, #32]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	8c3b      	ldrh	r3, [r7, #32]
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d124      	bne.n	8006420 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	83bb      	strh	r3, [r7, #28]
 80063ee:	8bbb      	ldrh	r3, [r7, #28]
 80063f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f4:	83bb      	strh	r3, [r7, #28]
 80063f6:	8bbb      	ldrh	r3, [r7, #28]
 80063f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063fc:	83bb      	strh	r3, [r7, #28]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	8bbb      	ldrh	r3, [r7, #28]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]
 800641e:	e1ea      	b.n	80067f6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	83fb      	strh	r3, [r7, #30]
 8006438:	8bfb      	ldrh	r3, [r7, #30]
 800643a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800643e:	83fb      	strh	r3, [r7, #30]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	8bfb      	ldrh	r3, [r7, #30]
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
 8006460:	e1c9      	b.n	80067f6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d11e      	bne.n	80064a8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8013      	strh	r3, [r2, #0]
 80064a6:	e01d      	b.n	80064e4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80064ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f4:	4413      	add	r3, r2
 80064f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	011a      	lsls	r2, r3, #4
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	4413      	add	r3, r2
 8006502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006506:	65bb      	str	r3, [r7, #88]	; 0x58
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	891b      	ldrh	r3, [r3, #8]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	b29b      	uxth	r3, r3
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	657b      	str	r3, [r7, #84]	; 0x54
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006528:	4413      	add	r3, r2
 800652a:	657b      	str	r3, [r7, #84]	; 0x54
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	011a      	lsls	r2, r3, #4
 8006532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006534:	4413      	add	r3, r2
 8006536:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800653a:	653b      	str	r3, [r7, #80]	; 0x50
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	895b      	ldrh	r3, [r3, #10]
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8093 	bne.w	800667c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006566:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800656a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01b      	beq.n	80065aa <USB_ActivateEndpoint+0x526>
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80065b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01b      	beq.n	80065fa <USB_ActivateEndpoint+0x576>
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006610:	873b      	strh	r3, [r7, #56]	; 0x38
 8006612:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006614:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006618:	873b      	strh	r3, [r7, #56]	; 0x38
 800661a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800661c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006620:	873b      	strh	r3, [r7, #56]	; 0x38
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006658:	86fb      	strh	r3, [r7, #54]	; 0x36
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	441a      	add	r2, r3
 8006664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006676:	b29b      	uxth	r3, r3
 8006678:	8013      	strh	r3, [r2, #0]
 800667a:	e0bc      	b.n	80067f6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800668c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01d      	beq.n	80066d4 <USB_ActivateEndpoint+0x650>
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80066c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80066e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01d      	beq.n	800672c <USB_ActivateEndpoint+0x6a8>
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d024      	beq.n	800677e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800674e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006752:	f083 0320 	eor.w	r3, r3, #32
 8006756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006778:	b29b      	uxth	r3, r3
 800677a:	8013      	strh	r3, [r2, #0]
 800677c:	e01d      	b.n	80067ba <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80067f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3774      	adds	r7, #116	; 0x74
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006804:	b480      	push	{r7}
 8006806:	b08d      	sub	sp, #52	; 0x34
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	7b1b      	ldrb	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 808e 	bne.w	8006934 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d044      	beq.n	80068aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	81bb      	strh	r3, [r7, #12]
 800682e:	89bb      	ldrh	r3, [r7, #12]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01b      	beq.n	8006870 <USB_DeactivateEndpoint+0x6c>
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	817b      	strh	r3, [r7, #10]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	441a      	add	r2, r3
 800685a:	897b      	ldrh	r3, [r7, #10]
 800685c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006868:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800686c:	b29b      	uxth	r3, r3
 800686e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006886:	813b      	strh	r3, [r7, #8]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	893b      	ldrh	r3, [r7, #8]
 8006894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]
 80068a8:	e192      	b.n	8006bd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	827b      	strh	r3, [r7, #18]
 80068b8:	8a7b      	ldrh	r3, [r7, #18]
 80068ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01b      	beq.n	80068fa <USB_DeactivateEndpoint+0xf6>
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	823b      	strh	r3, [r7, #16]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	8a3b      	ldrh	r3, [r7, #16]
 80068e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006910:	81fb      	strh	r3, [r7, #14]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	89fb      	ldrh	r3, [r7, #14]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]
 8006932:	e14d      	b.n	8006bd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 80a5 	bne.w	8006a88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	843b      	strh	r3, [r7, #32]
 800694c:	8c3b      	ldrh	r3, [r7, #32]
 800694e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01b      	beq.n	800698e <USB_DeactivateEndpoint+0x18a>
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696c:	83fb      	strh	r3, [r7, #30]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	8bfb      	ldrh	r3, [r7, #30]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	83bb      	strh	r3, [r7, #28]
 800699c:	8bbb      	ldrh	r3, [r7, #28]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01b      	beq.n	80069de <USB_DeactivateEndpoint+0x1da>
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069bc:	837b      	strh	r3, [r7, #26]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	8b7b      	ldrh	r3, [r7, #26]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	833b      	strh	r3, [r7, #24]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	8b3b      	ldrh	r3, [r7, #24]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2c:	82fb      	strh	r3, [r7, #22]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	441a      	add	r2, r3
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	82bb      	strh	r3, [r7, #20]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	8abb      	ldrh	r3, [r7, #20]
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
 8006a86:	e0a3      	b.n	8006bd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01b      	beq.n	8006ad8 <USB_DeactivateEndpoint+0x2d4>
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ae6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01b      	beq.n	8006b28 <USB_DeactivateEndpoint+0x324>
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bae:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3734      	adds	r7, #52	; 0x34
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr

08006bdc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b0c2      	sub	sp, #264	; 0x108
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bea:	6018      	str	r0, [r3, #0]
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	f040 86b7 	bne.w	8007976 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d908      	bls.n	8006c36 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c34:	e007      	b.n	8006c46 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	7b1b      	ldrb	r3, [r3, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d13a      	bne.n	8006ccc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6959      	ldr	r1, [r3, #20]
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	88da      	ldrh	r2, [r3, #6]
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f001 fc9c 	bl	80085ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	011a      	lsls	r2, r3, #4
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	f000 be1f 	b.w	800790a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	78db      	ldrb	r3, [r3, #3]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	f040 8462 	bne.w	80075a2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6a1a      	ldr	r2, [r3, #32]
 8006cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	f240 83df 	bls.w	80074ba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 81c7 	beq.w	800712c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	633b      	str	r3, [r7, #48]	; 0x30
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d177      	bne.n	8006eaa <USB_EPStartXfer+0x2ce>
 8006dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	4413      	add	r3, r2
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	011a      	lsls	r2, r3, #4
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	4413      	add	r3, r2
 8006df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e0c:	d921      	bls.n	8006e52 <USB_EPStartXfer+0x276>
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <USB_EPStartXfer+0x252>
 8006e24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e050      	b.n	8006ef4 <USB_EPStartXfer+0x318>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <USB_EPStartXfer+0x294>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	e041      	b.n	8006ef4 <USB_EPStartXfer+0x318>
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d004      	beq.n	8006e90 <USB_EPStartXfer+0x2b4>
 8006e86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e024      	b.n	8006ef4 <USB_EPStartXfer+0x318>
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d11c      	bne.n	8006ef4 <USB_EPStartXfer+0x318>
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	4413      	add	r3, r2
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	011a      	lsls	r2, r3, #4
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	895b      	ldrh	r3, [r3, #10]
 8006f00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6959      	ldr	r1, [r3, #20]
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f22:	6800      	ldr	r0, [r0, #0]
 8006f24:	f001 fb49 	bl	80085ba <USB_WritePMA>
            ep->xfer_buff += len;
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695a      	ldr	r2, [r3, #20]
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f38:	441a      	add	r2, r3
 8006f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90f      	bls.n	8006f82 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a1a      	ldr	r2, [r3, #32]
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	621a      	str	r2, [r3, #32]
 8006f80:	e00e      	b.n	8006fa0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d177      	bne.n	80070a0 <USB_EPStartXfer+0x4c4>
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	61bb      	str	r3, [r7, #24]
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	011a      	lsls	r2, r3, #4
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007000:	2b3e      	cmp	r3, #62	; 0x3e
 8007002:	d921      	bls.n	8007048 <USB_EPStartXfer+0x46c>
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <USB_EPStartXfer+0x448>
 800701a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800701e:	3b01      	subs	r3, #1
 8007020:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800702e:	b29b      	uxth	r3, r3
 8007030:	029b      	lsls	r3, r3, #10
 8007032:	b29b      	uxth	r3, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	b29b      	uxth	r3, r3
 8007038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007040:	b29a      	uxth	r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e056      	b.n	80070f6 <USB_EPStartXfer+0x51a>
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <USB_EPStartXfer+0x48a>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705e:	b29a      	uxth	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e047      	b.n	80070f6 <USB_EPStartXfer+0x51a>
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <USB_EPStartXfer+0x4aa>
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	3301      	adds	r3, #1
 8007082:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29a      	uxth	r2, r3
 800708c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007090:	b29b      	uxth	r3, r3
 8007092:	029b      	lsls	r3, r3, #10
 8007094:	b29b      	uxth	r3, r3
 8007096:	4313      	orrs	r3, r2
 8007098:	b29a      	uxth	r2, r3
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e02a      	b.n	80070f6 <USB_EPStartXfer+0x51a>
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d122      	bne.n	80070f6 <USB_EPStartXfer+0x51a>
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	623b      	str	r3, [r7, #32]
 80070bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	4413      	add	r3, r2
 80070d2:	623b      	str	r3, [r7, #32]
 80070d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	011a      	lsls	r2, r3, #4
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	4413      	add	r3, r2
 80070e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	891b      	ldrh	r3, [r3, #8]
 8007102:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6959      	ldr	r1, [r3, #20]
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	b29b      	uxth	r3, r3
 8007118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800711c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007120:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007124:	6800      	ldr	r0, [r0, #0]
 8007126:	f001 fa48 	bl	80085ba <USB_WritePMA>
 800712a:	e3ee      	b.n	800790a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800712c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d177      	bne.n	800722c <USB_EPStartXfer+0x650>
 800713c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	64bb      	str	r3, [r7, #72]	; 0x48
 8007148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715c:	4413      	add	r3, r2
 800715e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	011a      	lsls	r2, r3, #4
 800716e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007170:	4413      	add	r3, r2
 8007172:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007176:	647b      	str	r3, [r7, #68]	; 0x44
 8007178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007182:	b29a      	uxth	r2, r3
 8007184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718c:	2b3e      	cmp	r3, #62	; 0x3e
 800718e:	d921      	bls.n	80071d4 <USB_EPStartXfer+0x5f8>
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <USB_EPStartXfer+0x5d4>
 80071a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e056      	b.n	8007282 <USB_EPStartXfer+0x6a6>
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <USB_EPStartXfer+0x616>
 80071dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	e047      	b.n	8007282 <USB_EPStartXfer+0x6a6>
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <USB_EPStartXfer+0x636>
 8007208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800720c:	3301      	adds	r3, #1
 800720e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29a      	uxth	r2, r3
 8007218:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800721c:	b29b      	uxth	r3, r3
 800721e:	029b      	lsls	r3, r3, #10
 8007220:	b29b      	uxth	r3, r3
 8007222:	4313      	orrs	r3, r2
 8007224:	b29a      	uxth	r2, r3
 8007226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e02a      	b.n	8007282 <USB_EPStartXfer+0x6a6>
 800722c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d122      	bne.n	8007282 <USB_EPStartXfer+0x6a6>
 800723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	653b      	str	r3, [r7, #80]	; 0x50
 8007248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007256:	b29b      	uxth	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725c:	4413      	add	r3, r2
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
 8007260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	011a      	lsls	r2, r3, #4
 800726e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007270:	4413      	add	r3, r2
 8007272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	b29a      	uxth	r2, r3
 800727e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007280:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	891b      	ldrh	r3, [r3, #8]
 800728e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6959      	ldr	r1, [r3, #20]
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072b0:	6800      	ldr	r0, [r0, #0]
 80072b2:	f001 f982 	bl	80085ba <USB_WritePMA>
            ep->xfer_buff += len;
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c6:	441a      	add	r2, r3
 80072c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d90f      	bls.n	8007310 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80072f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	1ad2      	subs	r2, r2, r3
 8007302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	621a      	str	r2, [r3, #32]
 800730e:	e00e      	b.n	800732e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	643b      	str	r3, [r7, #64]	; 0x40
 800733a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d177      	bne.n	800743a <USB_EPStartXfer+0x85e>
 800734a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	63bb      	str	r3, [r7, #56]	; 0x38
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007364:	b29b      	uxth	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	4413      	add	r3, r2
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
 800736e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	011a      	lsls	r2, r3, #4
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	4413      	add	r3, r2
 8007380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007390:	b29a      	uxth	r2, r3
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739a:	2b3e      	cmp	r3, #62	; 0x3e
 800739c:	d921      	bls.n	80073e2 <USB_EPStartXfer+0x806>
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <USB_EPStartXfer+0x7e2>
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	029b      	lsls	r3, r3, #10
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073da:	b29a      	uxth	r2, r3
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	801a      	strh	r2, [r3, #0]
 80073e0:	e050      	b.n	8007484 <USB_EPStartXfer+0x8a8>
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <USB_EPStartXfer+0x824>
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e041      	b.n	8007484 <USB_EPStartXfer+0x8a8>
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800740a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <USB_EPStartXfer+0x844>
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741a:	3301      	adds	r3, #1
 800741c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29a      	uxth	r2, r3
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742a:	b29b      	uxth	r3, r3
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	b29b      	uxth	r3, r3
 8007430:	4313      	orrs	r3, r2
 8007432:	b29a      	uxth	r2, r3
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	e024      	b.n	8007484 <USB_EPStartXfer+0x8a8>
 800743a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11c      	bne.n	8007484 <USB_EPStartXfer+0x8a8>
 800744a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007458:	b29b      	uxth	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745e:	4413      	add	r3, r2
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	011a      	lsls	r2, r3, #4
 8007470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007472:	4413      	add	r3, r2
 8007474:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	b29a      	uxth	r2, r3
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	895b      	ldrh	r3, [r3, #10]
 8007490:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6959      	ldr	r1, [r3, #20]
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074b2:	6800      	ldr	r0, [r0, #0]
 80074b4:	f001 f881 	bl	80085ba <USB_WritePMA>
 80074b8:	e227      	b.n	800790a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80074f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007546:	4413      	add	r3, r2
 8007548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800754a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755a:	4413      	add	r3, r2
 800755c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007560:	65bb      	str	r3, [r7, #88]	; 0x58
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007566:	b29a      	uxth	r2, r3
 8007568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800756a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	891b      	ldrh	r3, [r3, #8]
 8007578:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6959      	ldr	r1, [r3, #20]
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	b29b      	uxth	r3, r3
 800758e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007592:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007596:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f001 f80d 	bl	80085ba <USB_WritePMA>
 80075a0:	e1b3      	b.n	800790a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6a1a      	ldr	r2, [r3, #32]
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80c6 	beq.w	8007774 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	673b      	str	r3, [r7, #112]	; 0x70
 80075f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d177      	bne.n	80076f4 <USB_EPStartXfer+0xb18>
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761e:	b29b      	uxth	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007624:	4413      	add	r3, r2
 8007626:	66bb      	str	r3, [r7, #104]	; 0x68
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	011a      	lsls	r2, r3, #4
 8007636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007638:	4413      	add	r3, r2
 800763a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800763e:	667b      	str	r3, [r7, #100]	; 0x64
 8007640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800764a:	b29a      	uxth	r2, r3
 800764c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764e:	801a      	strh	r2, [r3, #0]
 8007650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007654:	2b3e      	cmp	r3, #62	; 0x3e
 8007656:	d921      	bls.n	800769c <USB_EPStartXfer+0xac0>
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <USB_EPStartXfer+0xa9c>
 800766e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007672:	3b01      	subs	r3, #1
 8007674:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29a      	uxth	r2, r3
 800767e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007682:	b29b      	uxth	r3, r3
 8007684:	029b      	lsls	r3, r3, #10
 8007686:	b29b      	uxth	r3, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007694:	b29a      	uxth	r2, r3
 8007696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e050      	b.n	800773e <USB_EPStartXfer+0xb62>
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <USB_EPStartXfer+0xade>
 80076a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e041      	b.n	800773e <USB_EPStartXfer+0xb62>
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <USB_EPStartXfer+0xafe>
 80076d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076d4:	3301      	adds	r3, #1
 80076d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	029b      	lsls	r3, r3, #10
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	4313      	orrs	r3, r2
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e024      	b.n	800773e <USB_EPStartXfer+0xb62>
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d11c      	bne.n	800773e <USB_EPStartXfer+0xb62>
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007712:	b29b      	uxth	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007718:	4413      	add	r3, r2
 800771a:	673b      	str	r3, [r7, #112]	; 0x70
 800771c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	011a      	lsls	r2, r3, #4
 800772a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800772c:	4413      	add	r3, r2
 800772e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007738:	b29a      	uxth	r2, r3
 800773a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	895b      	ldrh	r3, [r3, #10]
 800774a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800774e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6959      	ldr	r1, [r3, #20]
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775e:	b29b      	uxth	r3, r3
 8007760:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007764:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007768:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800776c:	6800      	ldr	r0, [r0, #0]
 800776e:	f000 ff24 	bl	80085ba <USB_WritePMA>
 8007772:	e0ca      	b.n	800790a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d177      	bne.n	8007874 <USB_EPStartXfer+0xc98>
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779e:	b29b      	uxth	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077a4:	4413      	add	r3, r2
 80077a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	011a      	lsls	r2, r3, #4
 80077b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077b8:	4413      	add	r3, r2
 80077ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077be:	67bb      	str	r3, [r7, #120]	; 0x78
 80077c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d4:	2b3e      	cmp	r3, #62	; 0x3e
 80077d6:	d921      	bls.n	800781c <USB_EPStartXfer+0xc40>
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USB_EPStartXfer+0xc1c>
 80077ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29b      	uxth	r3, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007814:	b29a      	uxth	r2, r3
 8007816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e05c      	b.n	80078d6 <USB_EPStartXfer+0xcfa>
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <USB_EPStartXfer+0xc5e>
 8007824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007832:	b29a      	uxth	r2, r3
 8007834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e04d      	b.n	80078d6 <USB_EPStartXfer+0xcfa>
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <USB_EPStartXfer+0xc7e>
 8007850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007854:	3301      	adds	r3, #1
 8007856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800785a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007864:	b29b      	uxth	r3, r3
 8007866:	029b      	lsls	r3, r3, #10
 8007868:	b29b      	uxth	r3, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e030      	b.n	80078d6 <USB_EPStartXfer+0xcfa>
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d128      	bne.n	80078d6 <USB_EPStartXfer+0xcfa>
 8007884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a8:	4413      	add	r3, r2
 80078aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	011a      	lsls	r2, r3, #4
 80078bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078c0:	4413      	add	r3, r2
 80078c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	891b      	ldrh	r3, [r3, #8]
 80078e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6959      	ldr	r1, [r3, #20]
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007900:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007904:	6800      	ldr	r0, [r0, #0]
 8007906:	f000 fe58 	bl	80085ba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800790a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007930:	817b      	strh	r3, [r7, #10]
 8007932:	897b      	ldrh	r3, [r7, #10]
 8007934:	f083 0310 	eor.w	r3, r3, #16
 8007938:	817b      	strh	r3, [r7, #10]
 800793a:	897b      	ldrh	r3, [r7, #10]
 800793c:	f083 0320 	eor.w	r3, r3, #32
 8007940:	817b      	strh	r3, [r7, #10]
 8007942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	441a      	add	r2, r3
 800795c:	897b      	ldrh	r3, [r7, #10]
 800795e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796e:	b29b      	uxth	r3, r3
 8007970:	8013      	strh	r3, [r2, #0]
 8007972:	f000 bcde 	b.w	8008332 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	7b1b      	ldrb	r3, [r3, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f040 80bb 	bne.w	8007afe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d917      	bls.n	80079d4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80079a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80079b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699a      	ldr	r2, [r3, #24]
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c4:	1ad2      	subs	r2, r2, r3
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	619a      	str	r2, [r3, #24]
 80079d2:	e00e      	b.n	80079f2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80079d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80079e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80079f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a16:	4413      	add	r3, r2
 8007a18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	011a      	lsls	r2, r3, #4
 8007a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a2e:	4413      	add	r3, r2
 8007a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	2b3e      	cmp	r3, #62	; 0x3e
 8007a52:	d924      	bls.n	8007a9e <USB_EPStartXfer+0xec2>
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <USB_EPStartXfer+0xe98>
 8007a6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	029b      	lsls	r3, r3, #10
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4313      	orrs	r3, r2
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	f000 bc10 	b.w	80082be <USB_EPStartXfer+0x16e2>
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10c      	bne.n	8007ac0 <USB_EPStartXfer+0xee4>
 8007aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e3fe      	b.n	80082be <USB_EPStartXfer+0x16e2>
 8007ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <USB_EPStartXfer+0xf04>
 8007ad6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ada:	3301      	adds	r3, #1
 8007adc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	029b      	lsls	r3, r3, #10
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4313      	orrs	r3, r2
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007afa:	801a      	strh	r2, [r3, #0]
 8007afc:	e3df      	b.n	80082be <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	78db      	ldrb	r3, [r3, #3]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	f040 8218 	bne.w	8007f40 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 809d 	bne.w	8007c5c <USB_EPStartXfer+0x1080>
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b46:	4413      	add	r3, r2
 8007b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	011a      	lsls	r2, r3, #4
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5e:	4413      	add	r3, r2
 8007b60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b3e      	cmp	r3, #62	; 0x3e
 8007b8a:	d92b      	bls.n	8007be4 <USB_EPStartXfer+0x1008>
 8007b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 031f 	and.w	r3, r3, #31
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <USB_EPStartXfer+0xfe0>
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e070      	b.n	8007cc6 <USB_EPStartXfer+0x10ea>
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <USB_EPStartXfer+0x1032>
 8007bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	e05b      	b.n	8007cc6 <USB_EPStartXfer+0x10ea>
 8007c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	085b      	lsrs	r3, r3, #1
 8007c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <USB_EPStartXfer+0x1062>
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c38:	3301      	adds	r3, #1
 8007c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	029b      	lsls	r3, r3, #10
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	e034      	b.n	8007cc6 <USB_EPStartXfer+0x10ea>
 8007c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d12c      	bne.n	8007cc6 <USB_EPStartXfer+0x10ea>
 8007c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c90:	4413      	add	r3, r2
 8007c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	011a      	lsls	r2, r3, #4
 8007ca4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ca8:	4413      	add	r3, r2
 8007caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 809d 	bne.w	8007e20 <USB_EPStartXfer+0x1244>
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d22:	4413      	add	r3, r2
 8007d24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d4e:	d92b      	bls.n	8007da8 <USB_EPStartXfer+0x11cc>
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <USB_EPStartXfer+0x11a4>
 8007d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	e069      	b.n	8007e7c <USB_EPStartXfer+0x12a0>
 8007da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10c      	bne.n	8007dd2 <USB_EPStartXfer+0x11f6>
 8007db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	e054      	b.n	8007e7c <USB_EPStartXfer+0x12a0>
 8007dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <USB_EPStartXfer+0x1226>
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	4313      	orrs	r3, r2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	e02d      	b.n	8007e7c <USB_EPStartXfer+0x12a0>
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d125      	bne.n	8007e7c <USB_EPStartXfer+0x12a0>
 8007e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e46:	4413      	add	r3, r2
 8007e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	011a      	lsls	r2, r3, #4
 8007e5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e5e:	4413      	add	r3, r2
 8007e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e7a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8218 	beq.w	80082be <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007eae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <USB_EPStartXfer+0x12ea>
 8007eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10d      	bne.n	8007ee2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ec6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 81f5 	bne.w	80082be <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ed4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 81ee 	bne.w	80082be <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f08:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	441a      	add	r2, r3
 8007f26:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	8013      	strh	r3, [r2, #0]
 8007f3e:	e1be      	b.n	80082be <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	78db      	ldrb	r3, [r3, #3]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	f040 81b4 	bne.w	80082ba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d917      	bls.n	8007f9e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	619a      	str	r2, [r3, #24]
 8007f9c:	e00e      	b.n	8007fbc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f040 8085 	bne.w	80080d8 <USB_EPStartXfer+0x14fc>
 8007fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	011a      	lsls	r2, r3, #4
 8008006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800800a:	4413      	add	r3, r2
 800800c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008020:	b29a      	uxth	r2, r3
 8008022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	2b3e      	cmp	r3, #62	; 0x3e
 800802e:	d923      	bls.n	8008078 <USB_EPStartXfer+0x149c>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2b00      	cmp	r3, #0
 8008044:	d104      	bne.n	8008050 <USB_EPStartXfer+0x1474>
 8008046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800804a:	3b01      	subs	r3, #1
 800804c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008050:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805c:	b29b      	uxth	r3, r3
 800805e:	029b      	lsls	r3, r3, #10
 8008060:	b29b      	uxth	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b29b      	uxth	r3, r3
 8008066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	e060      	b.n	800813a <USB_EPStartXfer+0x155e>
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10c      	bne.n	800809a <USB_EPStartXfer+0x14be>
 8008080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008096:	801a      	strh	r2, [r3, #0]
 8008098:	e04f      	b.n	800813a <USB_EPStartXfer+0x155e>
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <USB_EPStartXfer+0x14de>
 80080b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b4:	3301      	adds	r3, #1
 80080b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	029b      	lsls	r3, r3, #10
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	4313      	orrs	r3, r2
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080d4:	801a      	strh	r2, [r3, #0]
 80080d6:	e030      	b.n	800813a <USB_EPStartXfer+0x155e>
 80080d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d128      	bne.n	800813a <USB_EPStartXfer+0x155e>
 80080e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008104:	b29b      	uxth	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800810c:	4413      	add	r3, r2
 800810e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	011a      	lsls	r2, r3, #4
 8008120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008124:	4413      	add	r3, r2
 8008126:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800812a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 8085 	bne.w	8008264 <USB_EPStartXfer+0x1688>
 800815a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800817e:	4413      	add	r3, r2
 8008180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	011a      	lsls	r2, r3, #4
 8008192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008196:	4413      	add	r3, r2
 8008198:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800819c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b8:	2b3e      	cmp	r3, #62	; 0x3e
 80081ba:	d923      	bls.n	8008204 <USB_EPStartXfer+0x1628>
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	f003 031f 	and.w	r3, r3, #31
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <USB_EPStartXfer+0x1600>
 80081d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081d6:	3b01      	subs	r3, #1
 80081d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	029b      	lsls	r3, r3, #10
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e05c      	b.n	80082be <USB_EPStartXfer+0x16e2>
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10c      	bne.n	8008226 <USB_EPStartXfer+0x164a>
 800820c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008222:	801a      	strh	r2, [r3, #0]
 8008224:	e04b      	b.n	80082be <USB_EPStartXfer+0x16e2>
 8008226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d004      	beq.n	8008246 <USB_EPStartXfer+0x166a>
 800823c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008240:	3301      	adds	r3, #1
 8008242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29a      	uxth	r2, r3
 800824e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008252:	b29b      	uxth	r3, r3
 8008254:	029b      	lsls	r3, r3, #10
 8008256:	b29b      	uxth	r3, r3
 8008258:	4313      	orrs	r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	e02c      	b.n	80082be <USB_EPStartXfer+0x16e2>
 8008264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d124      	bne.n	80082be <USB_EPStartXfer+0x16e2>
 8008274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008282:	b29b      	uxth	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800828a:	4413      	add	r3, r2
 800828c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	011a      	lsls	r2, r3, #4
 800829e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	e001      	b.n	80082be <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e03a      	b.n	8008334 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800831e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800833e:	b480      	push	{r7}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	785b      	ldrb	r3, [r3, #1]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d020      	beq.n	8008392 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	b29b      	uxth	r3, r3
 800835e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008366:	81bb      	strh	r3, [r7, #12]
 8008368:	89bb      	ldrh	r3, [r7, #12]
 800836a:	f083 0310 	eor.w	r3, r3, #16
 800836e:	81bb      	strh	r3, [r7, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	441a      	add	r2, r3
 800837a:	89bb      	ldrh	r3, [r7, #12]
 800837c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838c:	b29b      	uxth	r3, r3
 800838e:	8013      	strh	r3, [r2, #0]
 8008390:	e01f      	b.n	80083d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a8:	81fb      	strh	r3, [r7, #14]
 80083aa:	89fb      	ldrh	r3, [r7, #14]
 80083ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083b0:	81fb      	strh	r3, [r7, #14]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	441a      	add	r2, r3
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr

080083de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f040 809d 	bne.w	800852c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d04c      	beq.n	8008494 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	823b      	strh	r3, [r7, #16]
 8008408:	8a3b      	ldrh	r3, [r7, #16]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01b      	beq.n	800844a <USB_EPClearStall+0x6c>
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008428:	81fb      	strh	r3, [r7, #14]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	441a      	add	r2, r3
 8008434:	89fb      	ldrh	r3, [r7, #14]
 8008436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d06c      	beq.n	800852c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008468:	81bb      	strh	r3, [r7, #12]
 800846a:	89bb      	ldrh	r3, [r7, #12]
 800846c:	f083 0320 	eor.w	r3, r3, #32
 8008470:	81bb      	strh	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	441a      	add	r2, r3
 800847c:	89bb      	ldrh	r3, [r7, #12]
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
 8008492:	e04b      	b.n	800852c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	82fb      	strh	r3, [r7, #22]
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01b      	beq.n	80084e4 <USB_EPClearStall+0x106>
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c2:	82bb      	strh	r3, [r7, #20]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	441a      	add	r2, r3
 80084ce:	8abb      	ldrh	r3, [r7, #20]
 80084d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	827b      	strh	r3, [r7, #18]
 80084fc:	8a7b      	ldrh	r3, [r7, #18]
 80084fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008502:	827b      	strh	r3, [r7, #18]
 8008504:	8a7b      	ldrh	r3, [r7, #18]
 8008506:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800850a:	827b      	strh	r3, [r7, #18]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	441a      	add	r2, r3
 8008516:	8a7b      	ldrh	r3, [r7, #18]
 8008518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	b29b      	uxth	r3, r3
 800852a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr

08008538 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d103      	bne.n	8008552 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2280      	movs	r2, #128	; 0x80
 800854e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr

08008586 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008594:	b29b      	uxth	r3, r3
 8008596:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008598:	68fb      	ldr	r3, [r7, #12]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	bc80      	pop	{r7}
 80085a2:	4770      	bx	lr

080085a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr

080085ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b08b      	sub	sp, #44	; 0x2c
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	4611      	mov	r1, r2
 80085c6:	461a      	mov	r2, r3
 80085c8:	460b      	mov	r3, r1
 80085ca:	80fb      	strh	r3, [r7, #6]
 80085cc:	4613      	mov	r3, r2
 80085ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085d0:	88bb      	ldrh	r3, [r7, #4]
 80085d2:	3301      	adds	r3, #1
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	005a      	lsls	r2, r3, #1
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
 80085f2:	e01e      	b.n	8008632 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	021b      	lsls	r3, r3, #8
 8008602:	b21a      	sxth	r2, r3
 8008604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008608:	4313      	orrs	r3, r2
 800860a:	b21b      	sxth	r3, r3
 800860c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	8a7a      	ldrh	r2, [r7, #18]
 8008612:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	3302      	adds	r3, #2
 8008618:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	3302      	adds	r3, #2
 800861e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	3301      	adds	r3, #1
 8008624:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	3301      	adds	r3, #1
 800862a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	3b01      	subs	r3, #1
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1dd      	bne.n	80085f4 <USB_WritePMA+0x3a>
  }
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	372c      	adds	r7, #44	; 0x2c
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008644:	b480      	push	{r7}
 8008646:	b08b      	sub	sp, #44	; 0x2c
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	460b      	mov	r3, r1
 8008654:	80fb      	strh	r3, [r7, #6]
 8008656:	4613      	mov	r3, r2
 8008658:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800865a:	88bb      	ldrh	r3, [r7, #4]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	b29b      	uxth	r3, r3
 8008660:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	005a      	lsls	r2, r3, #1
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008676:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
 800867c:	e01b      	b.n	80086b6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	3302      	adds	r3, #2
 800868a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	b2da      	uxtb	r2, r3
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	3301      	adds	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	3301      	adds	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	3302      	adds	r3, #2
 80086ae:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	3b01      	subs	r3, #1
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e0      	bne.n	800867e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086bc:	88bb      	ldrh	r3, [r7, #4]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	701a      	strb	r2, [r3, #0]
  }
}
 80086d8:	bf00      	nop
 80086da:	372c      	adds	r7, #44	; 0x2c
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7c1b      	ldrb	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d115      	bne.n	8008726 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fe:	2202      	movs	r2, #2
 8008700:	2181      	movs	r1, #129	; 0x81
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fe99 	bl	800a43a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800870e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008712:	2202      	movs	r2, #2
 8008714:	2101      	movs	r1, #1
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fe8f 	bl	800a43a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008724:	e012      	b.n	800874c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	2202      	movs	r2, #2
 800872a:	2181      	movs	r1, #129	; 0x81
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fe84 	bl	800a43a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	2202      	movs	r2, #2
 800873c:	2101      	movs	r1, #1
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fe7b 	bl	800a43a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800874c:	2308      	movs	r3, #8
 800874e:	2203      	movs	r2, #3
 8008750:	2182      	movs	r1, #130	; 0x82
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fe71 	bl	800a43a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800875e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008762:	f001 ff91 	bl	800a688 <USBD_static_malloc>
 8008766:	4602      	mov	r2, r0
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	e026      	b.n	80087cc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7c1b      	ldrb	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b2:	2101      	movs	r1, #1
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 ff31 	bl	800a61c <USBD_LL_PrepareReceive>
 80087ba:	e007      	b.n	80087cc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087c2:	2340      	movs	r3, #64	; 0x40
 80087c4:	2101      	movs	r1, #1
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 ff28 	bl	800a61c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087e6:	2181      	movs	r1, #129	; 0x81
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fe4c 	bl	800a486 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087f4:	2101      	movs	r1, #1
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 fe45 	bl	800a486 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008804:	2182      	movs	r1, #130	; 0x82
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 fe3d 	bl	800a486 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00e      	beq.n	800883a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	4618      	mov	r0, r3
 800882e:	f001 ff37 	bl	800a6a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008854:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800886a:	2b00      	cmp	r3, #0
 800886c:	d039      	beq.n	80088e2 <USBD_CDC_Setup+0x9e>
 800886e:	2b20      	cmp	r3, #32
 8008870:	d17f      	bne.n	8008972 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	88db      	ldrh	r3, [r3, #6]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d029      	beq.n	80088ce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b25b      	sxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	da11      	bge.n	80088a8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008890:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	88d2      	ldrh	r2, [r2, #6]
 8008896:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008898:	6939      	ldr	r1, [r7, #16]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	461a      	mov	r2, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fa0a 	bl	8009cba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80088a6:	e06b      	b.n	8008980 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	785a      	ldrb	r2, [r3, #1]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88db      	ldrh	r3, [r3, #6]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088be:	6939      	ldr	r1, [r7, #16]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	88db      	ldrh	r3, [r3, #6]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fa25 	bl	8009d16 <USBD_CtlPrepareRx>
      break;
 80088cc:	e058      	b.n	8008980 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	7850      	ldrb	r0, [r2, #1]
 80088da:	2200      	movs	r2, #0
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	4798      	blx	r3
      break;
 80088e0:	e04e      	b.n	8008980 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b0b      	cmp	r3, #11
 80088e8:	d02e      	beq.n	8008948 <USBD_CDC_Setup+0x104>
 80088ea:	2b0b      	cmp	r3, #11
 80088ec:	dc38      	bgt.n	8008960 <USBD_CDC_Setup+0x11c>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <USBD_CDC_Setup+0xb4>
 80088f2:	2b0a      	cmp	r3, #10
 80088f4:	d014      	beq.n	8008920 <USBD_CDC_Setup+0xdc>
 80088f6:	e033      	b.n	8008960 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d107      	bne.n	8008912 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	2202      	movs	r2, #2
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 f9d5 	bl	8009cba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008910:	e02e      	b.n	8008970 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f966 	bl	8009be6 <USBD_CtlError>
            ret = USBD_FAIL;
 800891a:	2302      	movs	r3, #2
 800891c:	75fb      	strb	r3, [r7, #23]
          break;
 800891e:	e027      	b.n	8008970 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008926:	2b03      	cmp	r3, #3
 8008928:	d107      	bne.n	800893a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800892a:	f107 030f 	add.w	r3, r7, #15
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 f9c1 	bl	8009cba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008938:	e01a      	b.n	8008970 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f952 	bl	8009be6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	75fb      	strb	r3, [r7, #23]
          break;
 8008946:	e013      	b.n	8008970 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894e:	2b03      	cmp	r3, #3
 8008950:	d00d      	beq.n	800896e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f946 	bl	8009be6 <USBD_CtlError>
            ret = USBD_FAIL;
 800895a:	2302      	movs	r3, #2
 800895c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800895e:	e006      	b.n	800896e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f93f 	bl	8009be6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008968:	2302      	movs	r3, #2
 800896a:	75fb      	strb	r3, [r7, #23]
          break;
 800896c:	e000      	b.n	8008970 <USBD_CDC_Setup+0x12c>
          break;
 800896e:	bf00      	nop
      }
      break;
 8008970:	e006      	b.n	8008980 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 f936 	bl	8009be6 <USBD_CtlError>
      ret = USBD_FAIL;
 800897a:	2302      	movs	r3, #2
 800897c:	75fb      	strb	r3, [r7, #23]
      break;
 800897e:	bf00      	nop
  }

  return ret;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089a4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d03a      	beq.n	8008a26 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80089b0:	78fa      	ldrb	r2, [r7, #3]
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	440b      	add	r3, r1
 80089be:	331c      	adds	r3, #28
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d029      	beq.n	8008a1a <USBD_CDC_DataIn+0x90>
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	331c      	adds	r3, #28
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	78f9      	ldrb	r1, [r7, #3]
 80089da:	68b8      	ldr	r0, [r7, #8]
 80089dc:	460b      	mov	r3, r1
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	440b      	add	r3, r1
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	4403      	add	r3, r0
 80089e6:	3338      	adds	r3, #56	; 0x38
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80089ee:	fb01 f303 	mul.w	r3, r1, r3
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d110      	bne.n	8008a1a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	331c      	adds	r3, #28
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a0c:	78f9      	ldrb	r1, [r7, #3]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2200      	movs	r2, #0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fddf 	bl	800a5d6 <USBD_LL_Transmit>
 8008a18:	e003      	b.n	8008a22 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e000      	b.n	8008a28 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a26:	2302      	movs	r3, #2
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 fe0a 	bl	800a662 <USBD_LL_GetRxDataSize>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00d      	beq.n	8008a7c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a74:	4611      	mov	r1, r2
 8008a76:	4798      	blx	r3

    return USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e000      	b.n	8008a7e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a7c:	2302      	movs	r3, #2
  }
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d015      	beq.n	8008acc <USBD_CDC_EP0_RxReady+0x46>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008aa6:	2bff      	cmp	r3, #255	; 0xff
 8008aa8:	d010      	beq.n	8008acc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ab8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ac0:	b292      	uxth	r2, r2
 8008ac2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	22ff      	movs	r2, #255	; 0xff
 8008ac8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2243      	movs	r2, #67	; 0x43
 8008ae4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ae6:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	2000009c 	.word	0x2000009c

08008af8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2243      	movs	r2, #67	; 0x43
 8008b04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000058 	.word	0x20000058

08008b18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2243      	movs	r2, #67	; 0x43
 8008b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b26:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	200000e0 	.word	0x200000e0

08008b38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	220a      	movs	r2, #10
 8008b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008b46:	4b03      	ldr	r3, [pc, #12]	; (8008b54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc80      	pop	{r7}
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000014 	.word	0x20000014

08008b58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr

08008b84 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ba2:	88fa      	ldrh	r2, [r7, #6]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01c      	beq.n	8008c30 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d115      	bne.n	8008c2c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2181      	movs	r1, #129	; 0x81
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fcd7 	bl	800a5d6 <USBD_LL_Transmit>

      return USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e002      	b.n	8008c32 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008c30:	2302      	movs	r3, #2
  }
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d017      	beq.n	8008c84 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	7c1b      	ldrb	r3, [r3, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c66:	2101      	movs	r1, #1
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fcd7 	bl	800a61c <USBD_LL_PrepareReceive>
 8008c6e:	e007      	b.n	8008c80 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c76:	2340      	movs	r3, #64	; 0x40
 8008c78:	2101      	movs	r1, #1
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fcce 	bl	800a61c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	e000      	b.n	8008c86 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c84:	2302      	movs	r3, #2
  }
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e01a      	b.n	8008cdc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	79fa      	ldrb	r2, [r7, #7]
 8008cd2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f001 fb3b 	bl	800a350 <USBD_LL_Init>

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d006      	beq.n	8008d06 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
 8008d04:	e001      	b.n	8008d0a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr

08008d16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 fb70 	bl	800a404 <USBD_LL_Start>

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr

08008d42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4611      	mov	r1, r2
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	78fa      	ldrb	r2, [r7, #3]
 8008d96:	4611      	mov	r1, r2
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	4798      	blx	r3

  return USBD_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fed8 	bl	8009b6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008dcc:	461a      	mov	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dda:	f003 031f 	and.w	r3, r3, #31
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d016      	beq.n	8008e10 <USBD_LL_SetupStage+0x6a>
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d81c      	bhi.n	8008e20 <USBD_LL_SetupStage+0x7a>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <USBD_LL_SetupStage+0x4a>
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d008      	beq.n	8008e00 <USBD_LL_SetupStage+0x5a>
 8008dee:	e017      	b.n	8008e20 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f9cb 	bl	8009194 <USBD_StdDevReq>
      break;
 8008dfe:	e01a      	b.n	8008e36 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fa2d 	bl	8009268 <USBD_StdItfReq>
      break;
 8008e0e:	e012      	b.n	8008e36 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fa6d 	bl	80092f8 <USBD_StdEPReq>
      break;
 8008e1e:	e00a      	b.n	8008e36 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 fb48 	bl	800a4c4 <USBD_LL_StallEP>
      break;
 8008e34:	bf00      	nop
  }

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d14b      	bne.n	8008eec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d134      	bne.n	8008ed0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d919      	bls.n	8008ea6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	1ad2      	subs	r2, r2, r3
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d203      	bcs.n	8008e94 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	e002      	b.n	8008e9a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 ff57 	bl	8009d52 <USBD_CtlContinueRx>
 8008ea4:	e038      	b.n	8008f18 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d105      	bne.n	8008ec8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 ff54 	bl	8009d76 <USBD_CtlSendStatus>
 8008ece:	e023      	b.n	8008f18 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	d11e      	bne.n	8008f18 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f001 faed 	bl	800a4c4 <USBD_LL_StallEP>
 8008eea:	e015      	b.n	8008f18 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00d      	beq.n	8008f14 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d108      	bne.n	8008f14 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	7afa      	ldrb	r2, [r7, #11]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	4798      	blx	r3
 8008f12:	e001      	b.n	8008f18 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f14:	2302      	movs	r3, #2
 8008f16:	e000      	b.n	8008f1a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b086      	sub	sp, #24
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	607a      	str	r2, [r7, #4]
 8008f2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d17f      	bne.n	8009036 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3314      	adds	r3, #20
 8008f3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d15c      	bne.n	8009000 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d915      	bls.n	8008f7e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	461a      	mov	r2, r3
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fec1 	bl	8009cf2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f70:	2300      	movs	r3, #0
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f001 fb50 	bl	800a61c <USBD_LL_PrepareReceive>
 8008f7c:	e04e      	b.n	800901c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	6912      	ldr	r2, [r2, #16]
 8008f86:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f8a:	fb01 f202 	mul.w	r2, r1, r2
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11c      	bne.n	8008fce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d316      	bcc.n	8008fce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d20f      	bcs.n	8008fce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fe9d 	bl	8009cf2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f001 fb28 	bl	800a61c <USBD_LL_PrepareReceive>
 8008fcc:	e026      	b.n	800901c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d105      	bne.n	8008ff0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008ff0:	2180      	movs	r1, #128	; 0x80
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f001 fa66 	bl	800a4c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fecf 	bl	8009d9c <USBD_CtlReceiveStatus>
 8008ffe:	e00d      	b.n	800901c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009006:	2b04      	cmp	r3, #4
 8009008:	d004      	beq.n	8009014 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009014:	2180      	movs	r1, #128	; 0x80
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 fa54 	bl	800a4c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009022:	2b01      	cmp	r3, #1
 8009024:	d11d      	bne.n	8009062 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fe81 	bl	8008d2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009034:	e015      	b.n	8009062 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00d      	beq.n	800905e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009048:	2b03      	cmp	r3, #3
 800904a:	d108      	bne.n	800905e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	7afa      	ldrb	r2, [r7, #11]
 8009056:	4611      	mov	r1, r2
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	4798      	blx	r3
 800905c:	e001      	b.n	8009062 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800905e:	2302      	movs	r3, #2
 8009060:	e000      	b.n	8009064 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009074:	2340      	movs	r3, #64	; 0x40
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 f9dd 	bl	800a43a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2240      	movs	r2, #64	; 0x40
 800908c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009090:	2340      	movs	r3, #64	; 0x40
 8009092:	2200      	movs	r2, #0
 8009094:	2180      	movs	r1, #128	; 0x80
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f001 f9cf 	bl	800a43a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2240      	movs	r2, #64	; 0x40
 80090a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d009      	beq.n	80090e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6852      	ldr	r2, [r2, #4]
 80090dc:	b2d2      	uxtb	r2, r2
 80090de:	4611      	mov	r1, r2
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	4798      	blx	r3
  }

  return USBD_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr

0800910c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2204      	movs	r2, #4
 8009124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr

08009134 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009142:	2b04      	cmp	r3, #4
 8009144:	d105      	bne.n	8009152 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr

0800915e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	2b03      	cmp	r3, #3
 800916e:	d10b      	bne.n	8009188 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091aa:	2b40      	cmp	r3, #64	; 0x40
 80091ac:	d005      	beq.n	80091ba <USBD_StdDevReq+0x26>
 80091ae:	2b40      	cmp	r3, #64	; 0x40
 80091b0:	d84f      	bhi.n	8009252 <USBD_StdDevReq+0xbe>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <USBD_StdDevReq+0x36>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d14b      	bne.n	8009252 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
      break;
 80091c8:	e048      	b.n	800925c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b09      	cmp	r3, #9
 80091d0:	d839      	bhi.n	8009246 <USBD_StdDevReq+0xb2>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <USBD_StdDevReq+0x44>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	08009229 	.word	0x08009229
 80091dc:	0800923d 	.word	0x0800923d
 80091e0:	08009247 	.word	0x08009247
 80091e4:	08009233 	.word	0x08009233
 80091e8:	08009247 	.word	0x08009247
 80091ec:	0800920b 	.word	0x0800920b
 80091f0:	08009201 	.word	0x08009201
 80091f4:	08009247 	.word	0x08009247
 80091f8:	0800921f 	.word	0x0800921f
 80091fc:	08009215 	.word	0x08009215
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9dc 	bl	80095c0 <USBD_GetDescriptor>
          break;
 8009208:	e022      	b.n	8009250 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb3f 	bl	8009890 <USBD_SetAddress>
          break;
 8009212:	e01d      	b.n	8009250 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fb7e 	bl	8009918 <USBD_SetConfig>
          break;
 800921c:	e018      	b.n	8009250 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fc07 	bl	8009a34 <USBD_GetConfig>
          break;
 8009226:	e013      	b.n	8009250 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fc37 	bl	8009a9e <USBD_GetStatus>
          break;
 8009230:	e00e      	b.n	8009250 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fc65 	bl	8009b04 <USBD_SetFeature>
          break;
 800923a:	e009      	b.n	8009250 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc74 	bl	8009b2c <USBD_ClrFeature>
          break;
 8009244:	e004      	b.n	8009250 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fccc 	bl	8009be6 <USBD_CtlError>
          break;
 800924e:	bf00      	nop
      }
      break;
 8009250:	e004      	b.n	800925c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fcc6 	bl	8009be6 <USBD_CtlError>
      break;
 800925a:	bf00      	nop
  }

  return ret;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop

08009268 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d005      	beq.n	800928e <USBD_StdItfReq+0x26>
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d82e      	bhi.n	80092e4 <USBD_StdItfReq+0x7c>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <USBD_StdItfReq+0x26>
 800928a:	2b20      	cmp	r3, #32
 800928c:	d12a      	bne.n	80092e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009294:	3b01      	subs	r3, #1
 8009296:	2b02      	cmp	r3, #2
 8009298:	d81d      	bhi.n	80092d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	889b      	ldrh	r3, [r3, #4]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d813      	bhi.n	80092cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d110      	bne.n	80092e0 <USBD_StdItfReq+0x78>
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10d      	bne.n	80092e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fd56 	bl	8009d76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092ca:	e009      	b.n	80092e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fc89 	bl	8009be6 <USBD_CtlError>
          break;
 80092d4:	e004      	b.n	80092e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fc84 	bl	8009be6 <USBD_CtlError>
          break;
 80092de:	e000      	b.n	80092e2 <USBD_StdItfReq+0x7a>
          break;
 80092e0:	bf00      	nop
      }
      break;
 80092e2:	e004      	b.n	80092ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fc7d 	bl	8009be6 <USBD_CtlError>
      break;
 80092ec:	bf00      	nop
  }

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	889b      	ldrh	r3, [r3, #4]
 800930a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d007      	beq.n	8009328 <USBD_StdEPReq+0x30>
 8009318:	2b40      	cmp	r3, #64	; 0x40
 800931a:	f200 8146 	bhi.w	80095aa <USBD_StdEPReq+0x2b2>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <USBD_StdEPReq+0x40>
 8009322:	2b20      	cmp	r3, #32
 8009324:	f040 8141 	bne.w	80095aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
      break;
 8009336:	e13d      	b.n	80095b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009340:	2b20      	cmp	r3, #32
 8009342:	d10a      	bne.n	800935a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
 8009352:	4603      	mov	r3, r0
 8009354:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	e12d      	b.n	80095b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	2b03      	cmp	r3, #3
 8009360:	d007      	beq.n	8009372 <USBD_StdEPReq+0x7a>
 8009362:	2b03      	cmp	r3, #3
 8009364:	f300 811b 	bgt.w	800959e <USBD_StdEPReq+0x2a6>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d072      	beq.n	8009452 <USBD_StdEPReq+0x15a>
 800936c:	2b01      	cmp	r3, #1
 800936e:	d03a      	beq.n	80093e6 <USBD_StdEPReq+0xee>
 8009370:	e115      	b.n	800959e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009378:	2b02      	cmp	r3, #2
 800937a:	d002      	beq.n	8009382 <USBD_StdEPReq+0x8a>
 800937c:	2b03      	cmp	r3, #3
 800937e:	d015      	beq.n	80093ac <USBD_StdEPReq+0xb4>
 8009380:	e02b      	b.n	80093da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009382:	7bbb      	ldrb	r3, [r7, #14]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00c      	beq.n	80093a2 <USBD_StdEPReq+0xaa>
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b80      	cmp	r3, #128	; 0x80
 800938c:	d009      	beq.n	80093a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 f896 	bl	800a4c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009398:	2180      	movs	r1, #128	; 0x80
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 f892 	bl	800a4c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093a0:	e020      	b.n	80093e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fc1e 	bl	8009be6 <USBD_CtlError>
              break;
 80093aa:	e01b      	b.n	80093e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10e      	bne.n	80093d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <USBD_StdEPReq+0xda>
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b80      	cmp	r3, #128	; 0x80
 80093be:	d008      	beq.n	80093d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	88db      	ldrh	r3, [r3, #6]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 f879 	bl	800a4c4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fccf 	bl	8009d76 <USBD_CtlSendStatus>

              break;
 80093d8:	e004      	b.n	80093e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc02 	bl	8009be6 <USBD_CtlError>
              break;
 80093e2:	bf00      	nop
          }
          break;
 80093e4:	e0e0      	b.n	80095a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d002      	beq.n	80093f6 <USBD_StdEPReq+0xfe>
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d015      	beq.n	8009420 <USBD_StdEPReq+0x128>
 80093f4:	e026      	b.n	8009444 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00c      	beq.n	8009416 <USBD_StdEPReq+0x11e>
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b80      	cmp	r3, #128	; 0x80
 8009400:	d009      	beq.n	8009416 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 f85c 	bl	800a4c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800940c:	2180      	movs	r1, #128	; 0x80
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 f858 	bl	800a4c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009414:	e01c      	b.n	8009450 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fbe4 	bl	8009be6 <USBD_CtlError>
              break;
 800941e:	e017      	b.n	8009450 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	885b      	ldrh	r3, [r3, #2]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d112      	bne.n	800944e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 f863 	bl	800a502 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc9a 	bl	8009d76 <USBD_CtlSendStatus>
              }
              break;
 8009442:	e004      	b.n	800944e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fbcd 	bl	8009be6 <USBD_CtlError>
              break;
 800944c:	e000      	b.n	8009450 <USBD_StdEPReq+0x158>
              break;
 800944e:	bf00      	nop
          }
          break;
 8009450:	e0aa      	b.n	80095a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	2b02      	cmp	r3, #2
 800945a:	d002      	beq.n	8009462 <USBD_StdEPReq+0x16a>
 800945c:	2b03      	cmp	r3, #3
 800945e:	d032      	beq.n	80094c6 <USBD_StdEPReq+0x1ce>
 8009460:	e097      	b.n	8009592 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <USBD_StdEPReq+0x180>
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d004      	beq.n	8009478 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fbb8 	bl	8009be6 <USBD_CtlError>
                break;
 8009476:	e091      	b.n	800959c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	da0b      	bge.n	8009498 <USBD_StdEPReq+0x1a0>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	3310      	adds	r3, #16
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	e00b      	b.n	80094b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	3304      	adds	r3, #4
 80094b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2202      	movs	r2, #2
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fbfb 	bl	8009cba <USBD_CtlSendData>
              break;
 80094c4:	e06a      	b.n	800959c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	da11      	bge.n	80094f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	f003 020f 	and.w	r2, r3, #15
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	440b      	add	r3, r1
 80094e0:	3318      	adds	r3, #24
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d117      	bne.n	8009518 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fb7b 	bl	8009be6 <USBD_CtlError>
                  break;
 80094f0:	e054      	b.n	800959c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	f003 020f 	and.w	r2, r3, #15
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d104      	bne.n	8009518 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb68 	bl	8009be6 <USBD_CtlError>
                  break;
 8009516:	e041      	b.n	800959c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800951c:	2b00      	cmp	r3, #0
 800951e:	da0b      	bge.n	8009538 <USBD_StdEPReq+0x240>
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	3310      	adds	r3, #16
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	4413      	add	r3, r2
 8009534:	3304      	adds	r3, #4
 8009536:	e00b      	b.n	8009550 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	4413      	add	r3, r2
 800954e:	3304      	adds	r3, #4
 8009550:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <USBD_StdEPReq+0x266>
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	2b80      	cmp	r3, #128	; 0x80
 800955c:	d103      	bne.n	8009566 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e00e      	b.n	8009584 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 ffe8 	bl	800a540 <USBD_LL_IsStallEP>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2201      	movs	r2, #1
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	e002      	b.n	8009584 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2202      	movs	r2, #2
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fb95 	bl	8009cba <USBD_CtlSendData>
              break;
 8009590:	e004      	b.n	800959c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fb26 	bl	8009be6 <USBD_CtlError>
              break;
 800959a:	bf00      	nop
          }
          break;
 800959c:	e004      	b.n	80095a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fb20 	bl	8009be6 <USBD_CtlError>
          break;
 80095a6:	bf00      	nop
      }
      break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fb1a 	bl	8009be6 <USBD_CtlError>
      break;
 80095b2:	bf00      	nop
  }

  return ret;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b06      	cmp	r3, #6
 80095e2:	f200 8128 	bhi.w	8009836 <USBD_GetDescriptor+0x276>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBD_GetDescriptor+0x2c>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	08009609 	.word	0x08009609
 80095f0:	08009621 	.word	0x08009621
 80095f4:	08009661 	.word	0x08009661
 80095f8:	08009837 	.word	0x08009837
 80095fc:	08009837 	.word	0x08009837
 8009600:	080097d7 	.word	0x080097d7
 8009604:	08009803 	.word	0x08009803
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
      break;
 800961e:	e112      	b.n	8009846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7c1b      	ldrb	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	2202      	movs	r2, #2
 8009640:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009642:	e100      	b.n	8009846 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	f107 0208 	add.w	r2, r7, #8
 8009650:	4610      	mov	r0, r2
 8009652:	4798      	blx	r3
 8009654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3301      	adds	r3, #1
 800965a:	2202      	movs	r2, #2
 800965c:	701a      	strb	r2, [r3, #0]
      break;
 800965e:	e0f2      	b.n	8009846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	885b      	ldrh	r3, [r3, #2]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b05      	cmp	r3, #5
 8009668:	f200 80ac 	bhi.w	80097c4 <USBD_GetDescriptor+0x204>
 800966c:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <USBD_GetDescriptor+0xb4>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	0800968d 	.word	0x0800968d
 8009678:	080096c1 	.word	0x080096c1
 800967c:	080096f5 	.word	0x080096f5
 8009680:	08009729 	.word	0x08009729
 8009684:	0800975d 	.word	0x0800975d
 8009688:	08009791 	.word	0x08009791
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ae:	e091      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa97 	bl	8009be6 <USBD_CtlError>
            err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
          break;
 80096be:	e089      	b.n	80097d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e2:	e077      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa7d 	bl	8009be6 <USBD_CtlError>
            err++;
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	3301      	adds	r3, #1
 80096f0:	72fb      	strb	r3, [r7, #11]
          break;
 80096f2:	e06f      	b.n	80097d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009716:	e05d      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa63 	bl	8009be6 <USBD_CtlError>
            err++;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	3301      	adds	r3, #1
 8009724:	72fb      	strb	r3, [r7, #11]
          break;
 8009726:	e055      	b.n	80097d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00b      	beq.n	800974c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7c12      	ldrb	r2, [r2, #16]
 8009740:	f107 0108 	add.w	r1, r7, #8
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974a:	e043      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa49 	bl	8009be6 <USBD_CtlError>
            err++;
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	3301      	adds	r3, #1
 8009758:	72fb      	strb	r3, [r7, #11]
          break;
 800975a:	e03b      	b.n	80097d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	7c12      	ldrb	r2, [r2, #16]
 8009774:	f107 0108 	add.w	r1, r7, #8
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
 800977c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977e:	e029      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fa2f 	bl	8009be6 <USBD_CtlError>
            err++;
 8009788:	7afb      	ldrb	r3, [r7, #11]
 800978a:	3301      	adds	r3, #1
 800978c:	72fb      	strb	r3, [r7, #11]
          break;
 800978e:	e021      	b.n	80097d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00b      	beq.n	80097b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	7c12      	ldrb	r2, [r2, #16]
 80097a8:	f107 0108 	add.w	r1, r7, #8
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
 80097b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097b2:	e00f      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fa15 	bl	8009be6 <USBD_CtlError>
            err++;
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	3301      	adds	r3, #1
 80097c0:	72fb      	strb	r3, [r7, #11]
          break;
 80097c2:	e007      	b.n	80097d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa0d 	bl	8009be6 <USBD_CtlError>
          err++;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	3301      	adds	r3, #1
 80097d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80097d2:	e038      	b.n	8009846 <USBD_GetDescriptor+0x286>
 80097d4:	e037      	b.n	8009846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7c1b      	ldrb	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e6:	f107 0208 	add.w	r2, r7, #8
 80097ea:	4610      	mov	r0, r2
 80097ec:	4798      	blx	r3
 80097ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097f0:	e029      	b.n	8009846 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f9f6 	bl	8009be6 <USBD_CtlError>
        err++;
 80097fa:	7afb      	ldrb	r3, [r7, #11]
 80097fc:	3301      	adds	r3, #1
 80097fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009800:	e021      	b.n	8009846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	7c1b      	ldrb	r3, [r3, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10d      	bne.n	8009826 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	f107 0208 	add.w	r2, r7, #8
 8009816:	4610      	mov	r0, r2
 8009818:	4798      	blx	r3
 800981a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3301      	adds	r3, #1
 8009820:	2207      	movs	r2, #7
 8009822:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009824:	e00f      	b.n	8009846 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f9dc 	bl	8009be6 <USBD_CtlError>
        err++;
 800982e:	7afb      	ldrb	r3, [r7, #11]
 8009830:	3301      	adds	r3, #1
 8009832:	72fb      	strb	r3, [r7, #11]
      break;
 8009834:	e007      	b.n	8009846 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f9d4 	bl	8009be6 <USBD_CtlError>
      err++;
 800983e:	7afb      	ldrb	r3, [r7, #11]
 8009840:	3301      	adds	r3, #1
 8009842:	72fb      	strb	r3, [r7, #11]
      break;
 8009844:	bf00      	nop
  }

  if (err != 0U)
 8009846:	7afb      	ldrb	r3, [r7, #11]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d11c      	bne.n	8009886 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800984c:	893b      	ldrh	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d011      	beq.n	8009876 <USBD_GetDescriptor+0x2b6>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	88db      	ldrh	r3, [r3, #6]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00d      	beq.n	8009876 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	88da      	ldrh	r2, [r3, #6]
 800985e:	893b      	ldrh	r3, [r7, #8]
 8009860:	4293      	cmp	r3, r2
 8009862:	bf28      	it	cs
 8009864:	4613      	movcs	r3, r2
 8009866:	b29b      	uxth	r3, r3
 8009868:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800986a:	893b      	ldrh	r3, [r7, #8]
 800986c:	461a      	mov	r2, r3
 800986e:	68f9      	ldr	r1, [r7, #12]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fa22 	bl	8009cba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	88db      	ldrh	r3, [r3, #6]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d104      	bne.n	8009888 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa79 	bl	8009d76 <USBD_CtlSendStatus>
 8009884:	e000      	b.n	8009888 <USBD_GetDescriptor+0x2c8>
    return;
 8009886:	bf00      	nop
    }
  }
}
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop

08009890 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	889b      	ldrh	r3, [r3, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d130      	bne.n	8009904 <USBD_SetAddress+0x74>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	88db      	ldrh	r3, [r3, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d12c      	bne.n	8009904 <USBD_SetAddress+0x74>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	885b      	ldrh	r3, [r3, #2]
 80098ae:	2b7f      	cmp	r3, #127	; 0x7f
 80098b0:	d828      	bhi.n	8009904 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	885b      	ldrh	r3, [r3, #2]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d104      	bne.n	80098d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f98b 	bl	8009be6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d0:	e01d      	b.n	800990e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7bfa      	ldrb	r2, [r7, #15]
 80098d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fe5a 	bl	800a598 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fa46 	bl	8009d76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f8:	e009      	b.n	800990e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009902:	e004      	b.n	800990e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f96d 	bl	8009be6 <USBD_CtlError>
  }
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	885b      	ldrh	r3, [r3, #2]
 8009926:	b2da      	uxtb	r2, r3
 8009928:	4b41      	ldr	r3, [pc, #260]	; (8009a30 <USBD_SetConfig+0x118>)
 800992a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800992c:	4b40      	ldr	r3, [pc, #256]	; (8009a30 <USBD_SetConfig+0x118>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d904      	bls.n	800993e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f955 	bl	8009be6 <USBD_CtlError>
 800993c:	e075      	b.n	8009a2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009944:	2b02      	cmp	r3, #2
 8009946:	d002      	beq.n	800994e <USBD_SetConfig+0x36>
 8009948:	2b03      	cmp	r3, #3
 800994a:	d023      	beq.n	8009994 <USBD_SetConfig+0x7c>
 800994c:	e062      	b.n	8009a14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800994e:	4b38      	ldr	r3, [pc, #224]	; (8009a30 <USBD_SetConfig+0x118>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d01a      	beq.n	800998c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009956:	4b36      	ldr	r3, [pc, #216]	; (8009a30 <USBD_SetConfig+0x118>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2203      	movs	r2, #3
 8009964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009968:	4b31      	ldr	r3, [pc, #196]	; (8009a30 <USBD_SetConfig+0x118>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff f9e7 	bl	8008d42 <USBD_SetClassConfig>
 8009974:	4603      	mov	r3, r0
 8009976:	2b02      	cmp	r3, #2
 8009978:	d104      	bne.n	8009984 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f932 	bl	8009be6 <USBD_CtlError>
            return;
 8009982:	e052      	b.n	8009a2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9f6 	bl	8009d76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800998a:	e04e      	b.n	8009a2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9f2 	bl	8009d76 <USBD_CtlSendStatus>
        break;
 8009992:	e04a      	b.n	8009a2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009994:	4b26      	ldr	r3, [pc, #152]	; (8009a30 <USBD_SetConfig+0x118>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d112      	bne.n	80099c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80099a4:	4b22      	ldr	r3, [pc, #136]	; (8009a30 <USBD_SetConfig+0x118>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80099ae:	4b20      	ldr	r3, [pc, #128]	; (8009a30 <USBD_SetConfig+0x118>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff f9e3 	bl	8008d80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f9db 	bl	8009d76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099c0:	e033      	b.n	8009a2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80099c2:	4b1b      	ldr	r3, [pc, #108]	; (8009a30 <USBD_SetConfig+0x118>)
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d01d      	beq.n	8009a0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff f9d1 	bl	8008d80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80099de:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <USBD_SetConfig+0x118>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099e8:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <USBD_SetConfig+0x118>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff f9a7 	bl	8008d42 <USBD_SetClassConfig>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d104      	bne.n	8009a04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f8f2 	bl	8009be6 <USBD_CtlError>
            return;
 8009a02:	e012      	b.n	8009a2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f9b6 	bl	8009d76 <USBD_CtlSendStatus>
        break;
 8009a0a:	e00e      	b.n	8009a2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f9b2 	bl	8009d76 <USBD_CtlSendStatus>
        break;
 8009a12:	e00a      	b.n	8009a2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f8e5 	bl	8009be6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a1c:	4b04      	ldr	r3, [pc, #16]	; (8009a30 <USBD_SetConfig+0x118>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff f9ac 	bl	8008d80 <USBD_ClrClassConfig>
        break;
 8009a28:	bf00      	nop
    }
  }
}
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	2000042c 	.word	0x2000042c

08009a34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	88db      	ldrh	r3, [r3, #6]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d004      	beq.n	8009a50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f8cc 	bl	8009be6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a4e:	e022      	b.n	8009a96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	dc02      	bgt.n	8009a60 <USBD_GetConfig+0x2c>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dc03      	bgt.n	8009a66 <USBD_GetConfig+0x32>
 8009a5e:	e015      	b.n	8009a8c <USBD_GetConfig+0x58>
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetConfig+0x48>
 8009a64:	e012      	b.n	8009a8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	2201      	movs	r2, #1
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f920 	bl	8009cba <USBD_CtlSendData>
        break;
 8009a7a:	e00c      	b.n	8009a96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	2201      	movs	r2, #1
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f918 	bl	8009cba <USBD_CtlSendData>
        break;
 8009a8a:	e004      	b.n	8009a96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f8a9 	bl	8009be6 <USBD_CtlError>
        break;
 8009a94:	bf00      	nop
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d81e      	bhi.n	8009af2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	88db      	ldrh	r3, [r3, #6]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d004      	beq.n	8009ac6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f891 	bl	8009be6 <USBD_CtlError>
        break;
 8009ac4:	e01a      	b.n	8009afc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f043 0202 	orr.w	r2, r3, #2
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8e5 	bl	8009cba <USBD_CtlSendData>
      break;
 8009af0:	e004      	b.n	8009afc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f876 	bl	8009be6 <USBD_CtlError>
      break;
 8009afa:	bf00      	nop
  }
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	885b      	ldrh	r3, [r3, #2]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d106      	bne.n	8009b24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f929 	bl	8009d76 <USBD_CtlSendStatus>
  }
}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d80b      	bhi.n	8009b5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	885b      	ldrh	r3, [r3, #2]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d10c      	bne.n	8009b64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f90f 	bl	8009d76 <USBD_CtlSendStatus>
      }
      break;
 8009b58:	e004      	b.n	8009b64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f842 	bl	8009be6 <USBD_CtlError>
      break;
 8009b62:	e000      	b.n	8009b66 <USBD_ClrFeature+0x3a>
      break;
 8009b64:	bf00      	nop
  }
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781a      	ldrb	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	785a      	ldrb	r2, [r3, #1]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	3303      	adds	r3, #3
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	3305      	adds	r3, #5
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	021b      	lsls	r3, r3, #8
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	4413      	add	r3, r2
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	3306      	adds	r3, #6
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	3307      	adds	r3, #7
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	021b      	lsls	r3, r3, #8
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	80da      	strh	r2, [r3, #6]

}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bc80      	pop	{r7}
 8009be4:	4770      	bx	lr

08009be6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009bf0:	2180      	movs	r1, #128	; 0x80
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fc66 	bl	800a4c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fc62 	bl	800a4c4 <USBD_LL_StallEP>
}
 8009c00:	bf00      	nop
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d032      	beq.n	8009c84 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f834 	bl	8009c8c <USBD_GetLen>
 8009c24:	4603      	mov	r3, r0
 8009c26:	3301      	adds	r3, #1
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	75fa      	strb	r2, [r7, #23]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	7812      	ldrb	r2, [r2, #0]
 8009c42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	75fa      	strb	r2, [r7, #23]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4413      	add	r3, r2
 8009c50:	2203      	movs	r2, #3
 8009c52:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009c54:	e012      	b.n	8009c7c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	60fa      	str	r2, [r7, #12]
 8009c5c:	7dfa      	ldrb	r2, [r7, #23]
 8009c5e:	1c51      	adds	r1, r2, #1
 8009c60:	75f9      	strb	r1, [r7, #23]
 8009c62:	4611      	mov	r1, r2
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	440a      	add	r2, r1
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	75fa      	strb	r2, [r7, #23]
 8009c72:	461a      	mov	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4413      	add	r3, r2
 8009c78:	2200      	movs	r2, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e8      	bne.n	8009c56 <USBD_GetString+0x4e>
    }
  }
}
 8009c84:	bf00      	nop
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c98:	e005      	b.n	8009ca6 <USBD_GetLen+0x1a>
  {
    len++;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1f5      	bne.n	8009c9a <USBD_GetLen+0xe>
  }

  return len;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bc80      	pop	{r7}
 8009cb8:	4770      	bx	lr

08009cba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cd0:	88fa      	ldrh	r2, [r7, #6]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009cd6:	88fa      	ldrh	r2, [r7, #6]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 fc77 	bl	800a5d6 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	2100      	movs	r1, #0
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fc65 	bl	800a5d6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	4613      	mov	r3, r2
 8009d22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2203      	movs	r2, #3
 8009d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d34:	88fa      	ldrh	r2, [r7, #6]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	2100      	movs	r1, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fc6a 	bl	800a61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d60:	88fb      	ldrh	r3, [r7, #6]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	2100      	movs	r1, #0
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f000 fc58 	bl	800a61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2204      	movs	r2, #4
 8009d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d86:	2300      	movs	r3, #0
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fc22 	bl	800a5d6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2205      	movs	r2, #5
 8009da8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dac:	2300      	movs	r3, #0
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fc32 	bl	800a61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	4912      	ldr	r1, [pc, #72]	; (8009e14 <MX_USB_DEVICE_Init+0x50>)
 8009dcc:	4812      	ldr	r0, [pc, #72]	; (8009e18 <MX_USB_DEVICE_Init+0x54>)
 8009dce:	f7fe ff5e 	bl	8008c8e <USBD_Init>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009dd8:	f7f7 fcae 	bl	8001738 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ddc:	490f      	ldr	r1, [pc, #60]	; (8009e1c <MX_USB_DEVICE_Init+0x58>)
 8009dde:	480e      	ldr	r0, [pc, #56]	; (8009e18 <MX_USB_DEVICE_Init+0x54>)
 8009de0:	f7fe ff80 	bl	8008ce4 <USBD_RegisterClass>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009dea:	f7f7 fca5 	bl	8001738 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009dee:	490c      	ldr	r1, [pc, #48]	; (8009e20 <MX_USB_DEVICE_Init+0x5c>)
 8009df0:	4809      	ldr	r0, [pc, #36]	; (8009e18 <MX_USB_DEVICE_Init+0x54>)
 8009df2:	f7fe feb1 	bl	8008b58 <USBD_CDC_RegisterInterface>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009dfc:	f7f7 fc9c 	bl	8001738 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e00:	4805      	ldr	r0, [pc, #20]	; (8009e18 <MX_USB_DEVICE_Init+0x54>)
 8009e02:	f7fe ff88 	bl	8008d16 <USBD_Start>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e0c:	f7f7 fc94 	bl	8001738 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e10:	bf00      	nop
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	20000134 	.word	0x20000134
 8009e18:	20000430 	.word	0x20000430
 8009e1c:	20000020 	.word	0x20000020
 8009e20:	20000124 	.word	0x20000124

08009e24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4905      	ldr	r1, [pc, #20]	; (8009e40 <CDC_Init_FS+0x1c>)
 8009e2c:	4805      	ldr	r0, [pc, #20]	; (8009e44 <CDC_Init_FS+0x20>)
 8009e2e:	f7fe fea9 	bl	8008b84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e32:	4905      	ldr	r1, [pc, #20]	; (8009e48 <CDC_Init_FS+0x24>)
 8009e34:	4803      	ldr	r0, [pc, #12]	; (8009e44 <CDC_Init_FS+0x20>)
 8009e36:	f7fe febe 	bl	8008bb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20000af4 	.word	0x20000af4
 8009e44:	20000430 	.word	0x20000430
 8009e48:	200006f4 	.word	0x200006f4

08009e4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr
	...

08009e5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	71fb      	strb	r3, [r7, #7]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	2b23      	cmp	r3, #35	; 0x23
 8009e70:	d84a      	bhi.n	8009f08 <CDC_Control_FS+0xac>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <CDC_Control_FS+0x1c>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009f09 	.word	0x08009f09
 8009e7c:	08009f09 	.word	0x08009f09
 8009e80:	08009f09 	.word	0x08009f09
 8009e84:	08009f09 	.word	0x08009f09
 8009e88:	08009f09 	.word	0x08009f09
 8009e8c:	08009f09 	.word	0x08009f09
 8009e90:	08009f09 	.word	0x08009f09
 8009e94:	08009f09 	.word	0x08009f09
 8009e98:	08009f09 	.word	0x08009f09
 8009e9c:	08009f09 	.word	0x08009f09
 8009ea0:	08009f09 	.word	0x08009f09
 8009ea4:	08009f09 	.word	0x08009f09
 8009ea8:	08009f09 	.word	0x08009f09
 8009eac:	08009f09 	.word	0x08009f09
 8009eb0:	08009f09 	.word	0x08009f09
 8009eb4:	08009f09 	.word	0x08009f09
 8009eb8:	08009f09 	.word	0x08009f09
 8009ebc:	08009f09 	.word	0x08009f09
 8009ec0:	08009f09 	.word	0x08009f09
 8009ec4:	08009f09 	.word	0x08009f09
 8009ec8:	08009f09 	.word	0x08009f09
 8009ecc:	08009f09 	.word	0x08009f09
 8009ed0:	08009f09 	.word	0x08009f09
 8009ed4:	08009f09 	.word	0x08009f09
 8009ed8:	08009f09 	.word	0x08009f09
 8009edc:	08009f09 	.word	0x08009f09
 8009ee0:	08009f09 	.word	0x08009f09
 8009ee4:	08009f09 	.word	0x08009f09
 8009ee8:	08009f09 	.word	0x08009f09
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f09 	.word	0x08009f09
 8009ef4:	08009f09 	.word	0x08009f09
 8009ef8:	08009f09 	.word	0x08009f09
 8009efc:	08009f09 	.word	0x08009f09
 8009f00:	08009f09 	.word	0x08009f09
 8009f04:	08009f09 	.word	0x08009f09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f08:	bf00      	nop
  }

  return (USBD_OK);
 8009f0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bc80      	pop	{r7}
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop

08009f18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	480c      	ldr	r0, [pc, #48]	; (8009f58 <CDC_Receive_FS+0x40>)
 8009f26:	f7fe fe46 	bl	8008bb6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f2a:	480b      	ldr	r0, [pc, #44]	; (8009f58 <CDC_Receive_FS+0x40>)
 8009f2c:	f7fe fe85 	bl	8008c3a <USBD_CDC_ReceivePacket>
  //	Agregado para copiar lo recibido del Bufer al vector rx
  Buf[(*Len)-2] = '\0';
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3b02      	subs	r3, #2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
  strcpy(buffer_rx, (char*)Buf);
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	4806      	ldr	r0, [pc, #24]	; (8009f5c <CDC_Receive_FS+0x44>)
 8009f42:	f000 fccd 	bl	800a8e0 <strcpy>
  flagUsb = 1;
 8009f46:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <CDC_Receive_FS+0x48>)
 8009f48:	2201      	movs	r2, #1
 8009f4a:	701a      	strb	r2, [r3, #0]
  //	Se termina levantando la bandera de recepción para el main
  return (USBD_OK);
 8009f4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000430 	.word	0x20000430
 8009f5c:	200002f0 	.word	0x200002f0
 8009f60:	200002ed 	.word	0x200002ed

08009f64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f74:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <CDC_Transmit_FS+0x48>)
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e00b      	b.n	8009fa2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f8a:	887b      	ldrh	r3, [r7, #2]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	4806      	ldr	r0, [pc, #24]	; (8009fac <CDC_Transmit_FS+0x48>)
 8009f92:	f7fe fdf7 	bl	8008b84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f96:	4805      	ldr	r0, [pc, #20]	; (8009fac <CDC_Transmit_FS+0x48>)
 8009f98:	f7fe fe20 	bl	8008bdc <USBD_CDC_TransmitPacket>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000430 	.word	0x20000430

08009fb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6039      	str	r1, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2212      	movs	r2, #18
 8009fc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fc2:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bc80      	pop	{r7}
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	20000150 	.word	0x20000150

08009fd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bc80      	pop	{r7}
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000164 	.word	0x20000164

08009ff8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	4907      	ldr	r1, [pc, #28]	; (800a02c <USBD_FS_ProductStrDescriptor+0x34>)
 800a00e:	4808      	ldr	r0, [pc, #32]	; (800a030 <USBD_FS_ProductStrDescriptor+0x38>)
 800a010:	f7ff fdfa 	bl	8009c08 <USBD_GetString>
 800a014:	e004      	b.n	800a020 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	4904      	ldr	r1, [pc, #16]	; (800a02c <USBD_FS_ProductStrDescriptor+0x34>)
 800a01a:	4805      	ldr	r0, [pc, #20]	; (800a030 <USBD_FS_ProductStrDescriptor+0x38>)
 800a01c:	f7ff fdf4 	bl	8009c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a020:	4b02      	ldr	r3, [pc, #8]	; (800a02c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000ef4 	.word	0x20000ef4
 800a030:	0800b504 	.word	0x0800b504

0800a034 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	4904      	ldr	r1, [pc, #16]	; (800a054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a044:	4804      	ldr	r0, [pc, #16]	; (800a058 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a046:	f7ff fddf 	bl	8009c08 <USBD_GetString>
  return USBD_StrDesc;
 800a04a:	4b02      	ldr	r3, [pc, #8]	; (800a054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20000ef4 	.word	0x20000ef4
 800a058:	0800b51c 	.word	0x0800b51c

0800a05c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	221a      	movs	r2, #26
 800a06c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a06e:	f000 f843 	bl	800a0f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a072:	4b02      	ldr	r3, [pc, #8]	; (800a07c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20000168 	.word	0x20000168

0800a080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	6039      	str	r1, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4907      	ldr	r1, [pc, #28]	; (800a0b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a096:	4808      	ldr	r0, [pc, #32]	; (800a0b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a098:	f7ff fdb6 	bl	8009c08 <USBD_GetString>
 800a09c:	e004      	b.n	800a0a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4904      	ldr	r1, [pc, #16]	; (800a0b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0a2:	4805      	ldr	r0, [pc, #20]	; (800a0b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0a4:	f7ff fdb0 	bl	8009c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000ef4 	.word	0x20000ef4
 800a0b8:	0800b530 	.word	0x0800b530

0800a0bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4907      	ldr	r1, [pc, #28]	; (800a0f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0d2:	4808      	ldr	r0, [pc, #32]	; (800a0f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0d4:	f7ff fd98 	bl	8009c08 <USBD_GetString>
 800a0d8:	e004      	b.n	800a0e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4904      	ldr	r1, [pc, #16]	; (800a0f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0de:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0e0:	f7ff fd92 	bl	8009c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000ef4 	.word	0x20000ef4
 800a0f4:	0800b53c 	.word	0x0800b53c

0800a0f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0fe:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <Get_SerialNum+0x44>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a104:	4b0e      	ldr	r3, [pc, #56]	; (800a140 <Get_SerialNum+0x48>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <Get_SerialNum+0x4c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4413      	add	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a11e:	2208      	movs	r2, #8
 800a120:	4909      	ldr	r1, [pc, #36]	; (800a148 <Get_SerialNum+0x50>)
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f814 	bl	800a150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a128:	2204      	movs	r2, #4
 800a12a:	4908      	ldr	r1, [pc, #32]	; (800a14c <Get_SerialNum+0x54>)
 800a12c:	68b8      	ldr	r0, [r7, #8]
 800a12e:	f000 f80f 	bl	800a150 <IntToUnicode>
  }
}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	1ffff7e8 	.word	0x1ffff7e8
 800a140:	1ffff7ec 	.word	0x1ffff7ec
 800a144:	1ffff7f0 	.word	0x1ffff7f0
 800a148:	2000016a 	.word	0x2000016a
 800a14c:	2000017a 	.word	0x2000017a

0800a150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]
 800a166:	e027      	b.n	800a1b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	0f1b      	lsrs	r3, r3, #28
 800a16c:	2b09      	cmp	r3, #9
 800a16e:	d80b      	bhi.n	800a188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	0f1b      	lsrs	r3, r3, #28
 800a174:	b2da      	uxtb	r2, r3
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4619      	mov	r1, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	440b      	add	r3, r1
 800a180:	3230      	adds	r2, #48	; 0x30
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e00a      	b.n	800a19e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	0f1b      	lsrs	r3, r3, #28
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	4619      	mov	r1, r3
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	440b      	add	r3, r1
 800a198:	3237      	adds	r2, #55	; 0x37
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	011b      	lsls	r3, r3, #4
 800a1a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	75fb      	strb	r3, [r7, #23]
 800a1b8:	7dfa      	ldrb	r2, [r7, #23]
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d3d3      	bcc.n	800a168 <IntToUnicode+0x18>
  }
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bc80      	pop	{r7}
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a0d      	ldr	r2, [pc, #52]	; (800a210 <HAL_PCD_MspInit+0x44>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d113      	bne.n	800a206 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a1de:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <HAL_PCD_MspInit+0x48>)
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4a0c      	ldr	r2, [pc, #48]	; (800a214 <HAL_PCD_MspInit+0x48>)
 800a1e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1e8:	61d3      	str	r3, [r2, #28]
 800a1ea:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <HAL_PCD_MspInit+0x48>)
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	2014      	movs	r0, #20
 800a1fc:	f7f7 fe81 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a200:	2014      	movs	r0, #20
 800a202:	f7f7 fe9a 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40005c00 	.word	0x40005c00
 800a214:	40021000 	.word	0x40021000

0800a218 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a22c:	4619      	mov	r1, r3
 800a22e:	4610      	mov	r0, r2
 800a230:	f7fe fdb9 	bl	8008da6 <USBD_LL_SetupStage>
}
 800a234:	bf00      	nop
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a24e:	78fa      	ldrb	r2, [r7, #3]
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	440b      	add	r3, r1
 800a25c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	4619      	mov	r1, r3
 800a266:	f7fe fdeb 	bl	8008e40 <USBD_LL_DataOutStage>
}
 800a26a:	bf00      	nop
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	460b      	mov	r3, r1
 800a27c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a284:	78fa      	ldrb	r2, [r7, #3]
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	4613      	mov	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	440b      	add	r3, r1
 800a292:	333c      	adds	r3, #60	; 0x3c
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	4619      	mov	r1, r3
 800a29a:	f7fe fe42 	bl	8008f22 <USBD_LL_DataInStage>
}
 800a29e:	bf00      	nop
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe ff52 	bl	800915e <USBD_LL_SOF>
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d001      	beq.n	800a2da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2d6:	f7f7 fa2f 	bl	8001738 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a2e0:	7bfa      	ldrb	r2, [r7, #15]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe ff02 	bl	80090ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe febb 	bl	800906c <USBD_LL_Reset>
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fefc 	bl	800910c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a31c:	4b04      	ldr	r3, [pc, #16]	; (800a330 <HAL_PCD_SuspendCallback+0x30>)
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	4a03      	ldr	r2, [pc, #12]	; (800a330 <HAL_PCD_SuspendCallback+0x30>)
 800a322:	f043 0306 	orr.w	r3, r3, #6
 800a326:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	e000ed00 	.word	0xe000ed00

0800a334 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fef6 	bl	8009134 <USBD_LL_Resume>
}
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a358:	4a28      	ldr	r2, [pc, #160]	; (800a3fc <USBD_LL_Init+0xac>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a26      	ldr	r2, [pc, #152]	; (800a3fc <USBD_LL_Init+0xac>)
 800a364:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a368:	4b24      	ldr	r3, [pc, #144]	; (800a3fc <USBD_LL_Init+0xac>)
 800a36a:	4a25      	ldr	r2, [pc, #148]	; (800a400 <USBD_LL_Init+0xb0>)
 800a36c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a36e:	4b23      	ldr	r3, [pc, #140]	; (800a3fc <USBD_LL_Init+0xac>)
 800a370:	2208      	movs	r2, #8
 800a372:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a374:	4b21      	ldr	r3, [pc, #132]	; (800a3fc <USBD_LL_Init+0xac>)
 800a376:	2202      	movs	r2, #2
 800a378:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a37a:	4b20      	ldr	r3, [pc, #128]	; (800a3fc <USBD_LL_Init+0xac>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a380:	4b1e      	ldr	r3, [pc, #120]	; (800a3fc <USBD_LL_Init+0xac>)
 800a382:	2200      	movs	r2, #0
 800a384:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a386:	4b1d      	ldr	r3, [pc, #116]	; (800a3fc <USBD_LL_Init+0xac>)
 800a388:	2200      	movs	r2, #0
 800a38a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a38c:	481b      	ldr	r0, [pc, #108]	; (800a3fc <USBD_LL_Init+0xac>)
 800a38e:	f7f8 fc59 	bl	8002c44 <HAL_PCD_Init>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a398:	f7f7 f9ce 	bl	8001738 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3a2:	2318      	movs	r3, #24
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	f7fa f978 	bl	800469c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3b2:	2358      	movs	r3, #88	; 0x58
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2180      	movs	r1, #128	; 0x80
 800a3b8:	f7fa f970 	bl	800469c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3c2:	23c0      	movs	r3, #192	; 0xc0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2181      	movs	r1, #129	; 0x81
 800a3c8:	f7fa f968 	bl	800469c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2101      	movs	r1, #1
 800a3da:	f7fa f95f 	bl	800469c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2182      	movs	r1, #130	; 0x82
 800a3ec:	f7fa f956 	bl	800469c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200010f4 	.word	0x200010f4
 800a400:	40005c00 	.word	0x40005c00

0800a404 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7f8 fd11 	bl	8002e42 <HAL_PCD_Start>
 800a420:	4603      	mov	r3, r0
 800a422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	4618      	mov	r0, r3
 800a428:	f000 f94e 	bl	800a6c8 <USBD_Get_USB_Status>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a430:	7bbb      	ldrb	r3, [r7, #14]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	4608      	mov	r0, r1
 800a444:	4611      	mov	r1, r2
 800a446:	461a      	mov	r2, r3
 800a448:	4603      	mov	r3, r0
 800a44a:	70fb      	strb	r3, [r7, #3]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70bb      	strb	r3, [r7, #2]
 800a450:	4613      	mov	r3, r2
 800a452:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a462:	78bb      	ldrb	r3, [r7, #2]
 800a464:	883a      	ldrh	r2, [r7, #0]
 800a466:	78f9      	ldrb	r1, [r7, #3]
 800a468:	f7f8 fe66 	bl	8003138 <HAL_PCD_EP_Open>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	4618      	mov	r0, r3
 800a474:	f000 f928 	bl	800a6c8 <USBD_Get_USB_Status>
 800a478:	4603      	mov	r3, r0
 800a47a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	460b      	mov	r3, r1
 800a490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4a0:	78fa      	ldrb	r2, [r7, #3]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f8 fea4 	bl	80031f2 <HAL_PCD_EP_Close>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 f909 	bl	800a6c8 <USBD_Get_USB_Status>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4de:	78fa      	ldrb	r2, [r7, #3]
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f8 ff4c 	bl	8003380 <HAL_PCD_EP_SetStall>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 f8ea 	bl	800a6c8 <USBD_Get_USB_Status>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a51c:	78fa      	ldrb	r2, [r7, #3]
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f7f8 ff8d 	bl	8003440 <HAL_PCD_EP_ClrStall>
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 f8cb 	bl	800a6c8 <USBD_Get_USB_Status>
 800a532:	4603      	mov	r3, r0
 800a534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a536:	7bbb      	ldrb	r3, [r7, #14]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a552:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	da0c      	bge.n	800a576 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	440b      	add	r3, r1
 800a570:	3302      	adds	r3, #2
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	e00b      	b.n	800a58e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a57c:	68f9      	ldr	r1, [r7, #12]
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	440b      	add	r3, r1
 800a588:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a58c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	bc80      	pop	{r7}
 800a596:	4770      	bx	lr

0800a598 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5b2:	78fa      	ldrb	r2, [r7, #3]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7f8 fd99 	bl	80030ee <HAL_PCD_SetAddress>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 f880 	bl	800a6c8 <USBD_Get_USB_Status>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b086      	sub	sp, #24
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	60f8      	str	r0, [r7, #12]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	72fb      	strb	r3, [r7, #11]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5f8:	893b      	ldrh	r3, [r7, #8]
 800a5fa:	7af9      	ldrb	r1, [r7, #11]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	f7f8 fe88 	bl	8003312 <HAL_PCD_EP_Transmit>
 800a602:	4603      	mov	r3, r0
 800a604:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f85d 	bl	800a6c8 <USBD_Get_USB_Status>
 800a60e:	4603      	mov	r3, r0
 800a610:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a612:	7dbb      	ldrb	r3, [r7, #22]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	607a      	str	r2, [r7, #4]
 800a626:	461a      	mov	r2, r3
 800a628:	460b      	mov	r3, r1
 800a62a:	72fb      	strb	r3, [r7, #11]
 800a62c:	4613      	mov	r3, r2
 800a62e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a63e:	893b      	ldrh	r3, [r7, #8]
 800a640:	7af9      	ldrb	r1, [r7, #11]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	f7f8 fe1d 	bl	8003282 <HAL_PCD_EP_Receive>
 800a648:	4603      	mov	r3, r0
 800a64a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f83a 	bl	800a6c8 <USBD_Get_USB_Status>
 800a654:	4603      	mov	r3, r0
 800a656:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a658:	7dbb      	ldrb	r3, [r7, #22]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f8 fe33 	bl	80032e4 <HAL_PCD_EP_GetRxCount>
 800a67e:	4603      	mov	r3, r0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_static_malloc+0x14>)
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr
 800a69c:	200013e4 	.word	0x200013e4

0800a6a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]

}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bc80      	pop	{r7}
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	d817      	bhi.n	800a70c <USBD_Get_USB_Status+0x44>
 800a6dc:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <USBD_Get_USB_Status+0x1c>)
 800a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e2:	bf00      	nop
 800a6e4:	0800a6f5 	.word	0x0800a6f5
 800a6e8:	0800a6fb 	.word	0x0800a6fb
 800a6ec:	0800a701 	.word	0x0800a701
 800a6f0:	0800a707 	.word	0x0800a707
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f8:	e00b      	b.n	800a712 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a6fe:	e008      	b.n	800a712 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
    break;
 800a704:	e005      	b.n	800a712 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a706:	2302      	movs	r3, #2
 800a708:	73fb      	strb	r3, [r7, #15]
    break;
 800a70a:	e002      	b.n	800a712 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a70c:	2302      	movs	r3, #2
 800a70e:	73fb      	strb	r3, [r7, #15]
    break;
 800a710:	bf00      	nop
  }
  return usb_status;
 800a712:	7bfb      	ldrb	r3, [r7, #15]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop

0800a720 <atoi>:
 800a720:	220a      	movs	r2, #10
 800a722:	2100      	movs	r1, #0
 800a724:	f000 b87e 	b.w	800a824 <strtol>

0800a728 <_strtol_l.constprop.0>:
 800a728:	2b01      	cmp	r3, #1
 800a72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a72e:	4686      	mov	lr, r0
 800a730:	4690      	mov	r8, r2
 800a732:	d001      	beq.n	800a738 <_strtol_l.constprop.0+0x10>
 800a734:	2b24      	cmp	r3, #36	; 0x24
 800a736:	d906      	bls.n	800a746 <_strtol_l.constprop.0+0x1e>
 800a738:	f000 f8a6 	bl	800a888 <__errno>
 800a73c:	2316      	movs	r3, #22
 800a73e:	6003      	str	r3, [r0, #0]
 800a740:	2000      	movs	r0, #0
 800a742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a746:	460d      	mov	r5, r1
 800a748:	4835      	ldr	r0, [pc, #212]	; (800a820 <_strtol_l.constprop.0+0xf8>)
 800a74a:	462a      	mov	r2, r5
 800a74c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a750:	5d06      	ldrb	r6, [r0, r4]
 800a752:	f016 0608 	ands.w	r6, r6, #8
 800a756:	d1f8      	bne.n	800a74a <_strtol_l.constprop.0+0x22>
 800a758:	2c2d      	cmp	r4, #45	; 0x2d
 800a75a:	d12e      	bne.n	800a7ba <_strtol_l.constprop.0+0x92>
 800a75c:	2601      	movs	r6, #1
 800a75e:	782c      	ldrb	r4, [r5, #0]
 800a760:	1c95      	adds	r5, r2, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d057      	beq.n	800a816 <_strtol_l.constprop.0+0xee>
 800a766:	2b10      	cmp	r3, #16
 800a768:	d109      	bne.n	800a77e <_strtol_l.constprop.0+0x56>
 800a76a:	2c30      	cmp	r4, #48	; 0x30
 800a76c:	d107      	bne.n	800a77e <_strtol_l.constprop.0+0x56>
 800a76e:	782a      	ldrb	r2, [r5, #0]
 800a770:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a774:	2a58      	cmp	r2, #88	; 0x58
 800a776:	d149      	bne.n	800a80c <_strtol_l.constprop.0+0xe4>
 800a778:	2310      	movs	r3, #16
 800a77a:	786c      	ldrb	r4, [r5, #1]
 800a77c:	3502      	adds	r5, #2
 800a77e:	2200      	movs	r2, #0
 800a780:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a784:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a788:	fbbc f9f3 	udiv	r9, ip, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a792:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a796:	2f09      	cmp	r7, #9
 800a798:	d814      	bhi.n	800a7c4 <_strtol_l.constprop.0+0x9c>
 800a79a:	463c      	mov	r4, r7
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	dd20      	ble.n	800a7e2 <_strtol_l.constprop.0+0xba>
 800a7a0:	1c57      	adds	r7, r2, #1
 800a7a2:	d007      	beq.n	800a7b4 <_strtol_l.constprop.0+0x8c>
 800a7a4:	4581      	cmp	r9, r0
 800a7a6:	d319      	bcc.n	800a7dc <_strtol_l.constprop.0+0xb4>
 800a7a8:	d101      	bne.n	800a7ae <_strtol_l.constprop.0+0x86>
 800a7aa:	45a2      	cmp	sl, r4
 800a7ac:	db16      	blt.n	800a7dc <_strtol_l.constprop.0+0xb4>
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	fb00 4003 	mla	r0, r0, r3, r4
 800a7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7b8:	e7eb      	b.n	800a792 <_strtol_l.constprop.0+0x6a>
 800a7ba:	2c2b      	cmp	r4, #43	; 0x2b
 800a7bc:	bf04      	itt	eq
 800a7be:	782c      	ldrbeq	r4, [r5, #0]
 800a7c0:	1c95      	addeq	r5, r2, #2
 800a7c2:	e7ce      	b.n	800a762 <_strtol_l.constprop.0+0x3a>
 800a7c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7c8:	2f19      	cmp	r7, #25
 800a7ca:	d801      	bhi.n	800a7d0 <_strtol_l.constprop.0+0xa8>
 800a7cc:	3c37      	subs	r4, #55	; 0x37
 800a7ce:	e7e5      	b.n	800a79c <_strtol_l.constprop.0+0x74>
 800a7d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7d4:	2f19      	cmp	r7, #25
 800a7d6:	d804      	bhi.n	800a7e2 <_strtol_l.constprop.0+0xba>
 800a7d8:	3c57      	subs	r4, #87	; 0x57
 800a7da:	e7df      	b.n	800a79c <_strtol_l.constprop.0+0x74>
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e0:	e7e8      	b.n	800a7b4 <_strtol_l.constprop.0+0x8c>
 800a7e2:	1c53      	adds	r3, r2, #1
 800a7e4:	d108      	bne.n	800a7f8 <_strtol_l.constprop.0+0xd0>
 800a7e6:	2322      	movs	r3, #34	; 0x22
 800a7e8:	4660      	mov	r0, ip
 800a7ea:	f8ce 3000 	str.w	r3, [lr]
 800a7ee:	f1b8 0f00 	cmp.w	r8, #0
 800a7f2:	d0a6      	beq.n	800a742 <_strtol_l.constprop.0+0x1a>
 800a7f4:	1e69      	subs	r1, r5, #1
 800a7f6:	e006      	b.n	800a806 <_strtol_l.constprop.0+0xde>
 800a7f8:	b106      	cbz	r6, 800a7fc <_strtol_l.constprop.0+0xd4>
 800a7fa:	4240      	negs	r0, r0
 800a7fc:	f1b8 0f00 	cmp.w	r8, #0
 800a800:	d09f      	beq.n	800a742 <_strtol_l.constprop.0+0x1a>
 800a802:	2a00      	cmp	r2, #0
 800a804:	d1f6      	bne.n	800a7f4 <_strtol_l.constprop.0+0xcc>
 800a806:	f8c8 1000 	str.w	r1, [r8]
 800a80a:	e79a      	b.n	800a742 <_strtol_l.constprop.0+0x1a>
 800a80c:	2430      	movs	r4, #48	; 0x30
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1b5      	bne.n	800a77e <_strtol_l.constprop.0+0x56>
 800a812:	2308      	movs	r3, #8
 800a814:	e7b3      	b.n	800a77e <_strtol_l.constprop.0+0x56>
 800a816:	2c30      	cmp	r4, #48	; 0x30
 800a818:	d0a9      	beq.n	800a76e <_strtol_l.constprop.0+0x46>
 800a81a:	230a      	movs	r3, #10
 800a81c:	e7af      	b.n	800a77e <_strtol_l.constprop.0+0x56>
 800a81e:	bf00      	nop
 800a820:	0800b577 	.word	0x0800b577

0800a824 <strtol>:
 800a824:	4613      	mov	r3, r2
 800a826:	460a      	mov	r2, r1
 800a828:	4601      	mov	r1, r0
 800a82a:	4802      	ldr	r0, [pc, #8]	; (800a834 <strtol+0x10>)
 800a82c:	6800      	ldr	r0, [r0, #0]
 800a82e:	f7ff bf7b 	b.w	800a728 <_strtol_l.constprop.0>
 800a832:	bf00      	nop
 800a834:	200001d0 	.word	0x200001d0

0800a838 <siprintf>:
 800a838:	b40e      	push	{r1, r2, r3}
 800a83a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a83e:	b500      	push	{lr}
 800a840:	b09c      	sub	sp, #112	; 0x70
 800a842:	ab1d      	add	r3, sp, #116	; 0x74
 800a844:	9002      	str	r0, [sp, #8]
 800a846:	9006      	str	r0, [sp, #24]
 800a848:	9107      	str	r1, [sp, #28]
 800a84a:	9104      	str	r1, [sp, #16]
 800a84c:	4808      	ldr	r0, [pc, #32]	; (800a870 <siprintf+0x38>)
 800a84e:	4909      	ldr	r1, [pc, #36]	; (800a874 <siprintf+0x3c>)
 800a850:	f853 2b04 	ldr.w	r2, [r3], #4
 800a854:	9105      	str	r1, [sp, #20]
 800a856:	6800      	ldr	r0, [r0, #0]
 800a858:	a902      	add	r1, sp, #8
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	f000 f996 	bl	800ab8c <_svfiprintf_r>
 800a860:	2200      	movs	r2, #0
 800a862:	9b02      	ldr	r3, [sp, #8]
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	b01c      	add	sp, #112	; 0x70
 800a868:	f85d eb04 	ldr.w	lr, [sp], #4
 800a86c:	b003      	add	sp, #12
 800a86e:	4770      	bx	lr
 800a870:	200001d0 	.word	0x200001d0
 800a874:	ffff0208 	.word	0xffff0208

0800a878 <memset>:
 800a878:	4603      	mov	r3, r0
 800a87a:	4402      	add	r2, r0
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d100      	bne.n	800a882 <memset+0xa>
 800a880:	4770      	bx	lr
 800a882:	f803 1b01 	strb.w	r1, [r3], #1
 800a886:	e7f9      	b.n	800a87c <memset+0x4>

0800a888 <__errno>:
 800a888:	4b01      	ldr	r3, [pc, #4]	; (800a890 <__errno+0x8>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	200001d0 	.word	0x200001d0

0800a894 <__libc_init_array>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	2600      	movs	r6, #0
 800a898:	4d0c      	ldr	r5, [pc, #48]	; (800a8cc <__libc_init_array+0x38>)
 800a89a:	4c0d      	ldr	r4, [pc, #52]	; (800a8d0 <__libc_init_array+0x3c>)
 800a89c:	1b64      	subs	r4, r4, r5
 800a89e:	10a4      	asrs	r4, r4, #2
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	d109      	bne.n	800a8b8 <__libc_init_array+0x24>
 800a8a4:	f000 fc82 	bl	800b1ac <_init>
 800a8a8:	2600      	movs	r6, #0
 800a8aa:	4d0a      	ldr	r5, [pc, #40]	; (800a8d4 <__libc_init_array+0x40>)
 800a8ac:	4c0a      	ldr	r4, [pc, #40]	; (800a8d8 <__libc_init_array+0x44>)
 800a8ae:	1b64      	subs	r4, r4, r5
 800a8b0:	10a4      	asrs	r4, r4, #2
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d105      	bne.n	800a8c2 <__libc_init_array+0x2e>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8bc:	4798      	blx	r3
 800a8be:	3601      	adds	r6, #1
 800a8c0:	e7ee      	b.n	800a8a0 <__libc_init_array+0xc>
 800a8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c6:	4798      	blx	r3
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	e7f2      	b.n	800a8b2 <__libc_init_array+0x1e>
 800a8cc:	0800b6ac 	.word	0x0800b6ac
 800a8d0:	0800b6ac 	.word	0x0800b6ac
 800a8d4:	0800b6ac 	.word	0x0800b6ac
 800a8d8:	0800b6b0 	.word	0x0800b6b0

0800a8dc <__retarget_lock_acquire_recursive>:
 800a8dc:	4770      	bx	lr

0800a8de <__retarget_lock_release_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <strcpy>:
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8e6:	f803 2b01 	strb.w	r2, [r3], #1
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	d1f9      	bne.n	800a8e2 <strcpy+0x2>
 800a8ee:	4770      	bx	lr

0800a8f0 <_free_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	d040      	beq.n	800a97a <_free_r+0x8a>
 800a8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fc:	1f0c      	subs	r4, r1, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	18e4      	addlt	r4, r4, r3
 800a904:	f000 f8dc 	bl	800aac0 <__malloc_lock>
 800a908:	4a1c      	ldr	r2, [pc, #112]	; (800a97c <_free_r+0x8c>)
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	b933      	cbnz	r3, 800a91c <_free_r+0x2c>
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	4628      	mov	r0, r5
 800a914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a918:	f000 b8d8 	b.w	800aacc <__malloc_unlock>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d908      	bls.n	800a932 <_free_r+0x42>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428b      	cmp	r3, r1
 800a926:	bf01      	itttt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	1809      	addeq	r1, r1, r0
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	e7ed      	b.n	800a90e <_free_r+0x1e>
 800a932:	461a      	mov	r2, r3
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b10b      	cbz	r3, 800a93c <_free_r+0x4c>
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d9fa      	bls.n	800a932 <_free_r+0x42>
 800a93c:	6811      	ldr	r1, [r2, #0]
 800a93e:	1850      	adds	r0, r2, r1
 800a940:	42a0      	cmp	r0, r4
 800a942:	d10b      	bne.n	800a95c <_free_r+0x6c>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	4401      	add	r1, r0
 800a948:	1850      	adds	r0, r2, r1
 800a94a:	4283      	cmp	r3, r0
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	d1e0      	bne.n	800a912 <_free_r+0x22>
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4408      	add	r0, r1
 800a956:	6010      	str	r0, [r2, #0]
 800a958:	6053      	str	r3, [r2, #4]
 800a95a:	e7da      	b.n	800a912 <_free_r+0x22>
 800a95c:	d902      	bls.n	800a964 <_free_r+0x74>
 800a95e:	230c      	movs	r3, #12
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	e7d6      	b.n	800a912 <_free_r+0x22>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	1821      	adds	r1, r4, r0
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf01      	itttt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	1809      	addeq	r1, r1, r0
 800a972:	6021      	streq	r1, [r4, #0]
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6054      	str	r4, [r2, #4]
 800a978:	e7cb      	b.n	800a912 <_free_r+0x22>
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20001744 	.word	0x20001744

0800a980 <sbrk_aligned>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4e0e      	ldr	r6, [pc, #56]	; (800a9bc <sbrk_aligned+0x3c>)
 800a984:	460c      	mov	r4, r1
 800a986:	6831      	ldr	r1, [r6, #0]
 800a988:	4605      	mov	r5, r0
 800a98a:	b911      	cbnz	r1, 800a992 <sbrk_aligned+0x12>
 800a98c:	f000 fbaa 	bl	800b0e4 <_sbrk_r>
 800a990:	6030      	str	r0, [r6, #0]
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f000 fba5 	bl	800b0e4 <_sbrk_r>
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	d00a      	beq.n	800a9b4 <sbrk_aligned+0x34>
 800a99e:	1cc4      	adds	r4, r0, #3
 800a9a0:	f024 0403 	bic.w	r4, r4, #3
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d007      	beq.n	800a9b8 <sbrk_aligned+0x38>
 800a9a8:	1a21      	subs	r1, r4, r0
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 fb9a 	bl	800b0e4 <_sbrk_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d101      	bne.n	800a9b8 <sbrk_aligned+0x38>
 800a9b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	20001748 	.word	0x20001748

0800a9c0 <_malloc_r>:
 800a9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	1ccd      	adds	r5, r1, #3
 800a9c6:	f025 0503 	bic.w	r5, r5, #3
 800a9ca:	3508      	adds	r5, #8
 800a9cc:	2d0c      	cmp	r5, #12
 800a9ce:	bf38      	it	cc
 800a9d0:	250c      	movcc	r5, #12
 800a9d2:	2d00      	cmp	r5, #0
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	db01      	blt.n	800a9dc <_malloc_r+0x1c>
 800a9d8:	42a9      	cmp	r1, r5
 800a9da:	d905      	bls.n	800a9e8 <_malloc_r+0x28>
 800a9dc:	230c      	movs	r3, #12
 800a9de:	2600      	movs	r6, #0
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aabc <_malloc_r+0xfc>
 800a9ec:	f000 f868 	bl	800aac0 <__malloc_lock>
 800a9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9f4:	461c      	mov	r4, r3
 800a9f6:	bb5c      	cbnz	r4, 800aa50 <_malloc_r+0x90>
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	f7ff ffc0 	bl	800a980 <sbrk_aligned>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	4604      	mov	r4, r0
 800aa04:	d155      	bne.n	800aab2 <_malloc_r+0xf2>
 800aa06:	f8d8 4000 	ldr.w	r4, [r8]
 800aa0a:	4626      	mov	r6, r4
 800aa0c:	2e00      	cmp	r6, #0
 800aa0e:	d145      	bne.n	800aa9c <_malloc_r+0xdc>
 800aa10:	2c00      	cmp	r4, #0
 800aa12:	d048      	beq.n	800aaa6 <_malloc_r+0xe6>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	4631      	mov	r1, r6
 800aa18:	4638      	mov	r0, r7
 800aa1a:	eb04 0903 	add.w	r9, r4, r3
 800aa1e:	f000 fb61 	bl	800b0e4 <_sbrk_r>
 800aa22:	4581      	cmp	r9, r0
 800aa24:	d13f      	bne.n	800aaa6 <_malloc_r+0xe6>
 800aa26:	6821      	ldr	r1, [r4, #0]
 800aa28:	4638      	mov	r0, r7
 800aa2a:	1a6d      	subs	r5, r5, r1
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7ff ffa7 	bl	800a980 <sbrk_aligned>
 800aa32:	3001      	adds	r0, #1
 800aa34:	d037      	beq.n	800aaa6 <_malloc_r+0xe6>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	442b      	add	r3, r5
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d038      	beq.n	800aab6 <_malloc_r+0xf6>
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	42a2      	cmp	r2, r4
 800aa48:	d12b      	bne.n	800aaa2 <_malloc_r+0xe2>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	605a      	str	r2, [r3, #4]
 800aa4e:	e00f      	b.n	800aa70 <_malloc_r+0xb0>
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	1b52      	subs	r2, r2, r5
 800aa54:	d41f      	bmi.n	800aa96 <_malloc_r+0xd6>
 800aa56:	2a0b      	cmp	r2, #11
 800aa58:	d917      	bls.n	800aa8a <_malloc_r+0xca>
 800aa5a:	1961      	adds	r1, r4, r5
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	6025      	str	r5, [r4, #0]
 800aa60:	bf18      	it	ne
 800aa62:	6059      	strne	r1, [r3, #4]
 800aa64:	6863      	ldr	r3, [r4, #4]
 800aa66:	bf08      	it	eq
 800aa68:	f8c8 1000 	streq.w	r1, [r8]
 800aa6c:	5162      	str	r2, [r4, r5]
 800aa6e:	604b      	str	r3, [r1, #4]
 800aa70:	4638      	mov	r0, r7
 800aa72:	f104 060b 	add.w	r6, r4, #11
 800aa76:	f000 f829 	bl	800aacc <__malloc_unlock>
 800aa7a:	f026 0607 	bic.w	r6, r6, #7
 800aa7e:	1d23      	adds	r3, r4, #4
 800aa80:	1af2      	subs	r2, r6, r3
 800aa82:	d0ae      	beq.n	800a9e2 <_malloc_r+0x22>
 800aa84:	1b9b      	subs	r3, r3, r6
 800aa86:	50a3      	str	r3, [r4, r2]
 800aa88:	e7ab      	b.n	800a9e2 <_malloc_r+0x22>
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	6862      	ldr	r2, [r4, #4]
 800aa8e:	d1dd      	bne.n	800aa4c <_malloc_r+0x8c>
 800aa90:	f8c8 2000 	str.w	r2, [r8]
 800aa94:	e7ec      	b.n	800aa70 <_malloc_r+0xb0>
 800aa96:	4623      	mov	r3, r4
 800aa98:	6864      	ldr	r4, [r4, #4]
 800aa9a:	e7ac      	b.n	800a9f6 <_malloc_r+0x36>
 800aa9c:	4634      	mov	r4, r6
 800aa9e:	6876      	ldr	r6, [r6, #4]
 800aaa0:	e7b4      	b.n	800aa0c <_malloc_r+0x4c>
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	e7cc      	b.n	800aa40 <_malloc_r+0x80>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	603b      	str	r3, [r7, #0]
 800aaac:	f000 f80e 	bl	800aacc <__malloc_unlock>
 800aab0:	e797      	b.n	800a9e2 <_malloc_r+0x22>
 800aab2:	6025      	str	r5, [r4, #0]
 800aab4:	e7dc      	b.n	800aa70 <_malloc_r+0xb0>
 800aab6:	605b      	str	r3, [r3, #4]
 800aab8:	deff      	udf	#255	; 0xff
 800aaba:	bf00      	nop
 800aabc:	20001744 	.word	0x20001744

0800aac0 <__malloc_lock>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__malloc_lock+0x8>)
 800aac2:	f7ff bf0b 	b.w	800a8dc <__retarget_lock_acquire_recursive>
 800aac6:	bf00      	nop
 800aac8:	20001740 	.word	0x20001740

0800aacc <__malloc_unlock>:
 800aacc:	4801      	ldr	r0, [pc, #4]	; (800aad4 <__malloc_unlock+0x8>)
 800aace:	f7ff bf06 	b.w	800a8de <__retarget_lock_release_recursive>
 800aad2:	bf00      	nop
 800aad4:	20001740 	.word	0x20001740

0800aad8 <__ssputs_r>:
 800aad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	461f      	mov	r7, r3
 800aade:	688e      	ldr	r6, [r1, #8]
 800aae0:	4682      	mov	sl, r0
 800aae2:	42be      	cmp	r6, r7
 800aae4:	460c      	mov	r4, r1
 800aae6:	4690      	mov	r8, r2
 800aae8:	680b      	ldr	r3, [r1, #0]
 800aaea:	d82c      	bhi.n	800ab46 <__ssputs_r+0x6e>
 800aaec:	898a      	ldrh	r2, [r1, #12]
 800aaee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaf2:	d026      	beq.n	800ab42 <__ssputs_r+0x6a>
 800aaf4:	6965      	ldr	r5, [r4, #20]
 800aaf6:	6909      	ldr	r1, [r1, #16]
 800aaf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aafc:	eba3 0901 	sub.w	r9, r3, r1
 800ab00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab04:	1c7b      	adds	r3, r7, #1
 800ab06:	444b      	add	r3, r9
 800ab08:	106d      	asrs	r5, r5, #1
 800ab0a:	429d      	cmp	r5, r3
 800ab0c:	bf38      	it	cc
 800ab0e:	461d      	movcc	r5, r3
 800ab10:	0553      	lsls	r3, r2, #21
 800ab12:	d527      	bpl.n	800ab64 <__ssputs_r+0x8c>
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7ff ff53 	bl	800a9c0 <_malloc_r>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	b360      	cbz	r0, 800ab78 <__ssputs_r+0xa0>
 800ab1e:	464a      	mov	r2, r9
 800ab20:	6921      	ldr	r1, [r4, #16]
 800ab22:	f000 fafd 	bl	800b120 <memcpy>
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	6126      	str	r6, [r4, #16]
 800ab34:	444e      	add	r6, r9
 800ab36:	6026      	str	r6, [r4, #0]
 800ab38:	463e      	mov	r6, r7
 800ab3a:	6165      	str	r5, [r4, #20]
 800ab3c:	eba5 0509 	sub.w	r5, r5, r9
 800ab40:	60a5      	str	r5, [r4, #8]
 800ab42:	42be      	cmp	r6, r7
 800ab44:	d900      	bls.n	800ab48 <__ssputs_r+0x70>
 800ab46:	463e      	mov	r6, r7
 800ab48:	4632      	mov	r2, r6
 800ab4a:	4641      	mov	r1, r8
 800ab4c:	6820      	ldr	r0, [r4, #0]
 800ab4e:	f000 faaf 	bl	800b0b0 <memmove>
 800ab52:	2000      	movs	r0, #0
 800ab54:	68a3      	ldr	r3, [r4, #8]
 800ab56:	1b9b      	subs	r3, r3, r6
 800ab58:	60a3      	str	r3, [r4, #8]
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	4433      	add	r3, r6
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab64:	462a      	mov	r2, r5
 800ab66:	f000 fae9 	bl	800b13c <_realloc_r>
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d1e0      	bne.n	800ab32 <__ssputs_r+0x5a>
 800ab70:	4650      	mov	r0, sl
 800ab72:	6921      	ldr	r1, [r4, #16]
 800ab74:	f7ff febc 	bl	800a8f0 <_free_r>
 800ab78:	230c      	movs	r3, #12
 800ab7a:	f8ca 3000 	str.w	r3, [sl]
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	e7e9      	b.n	800ab60 <__ssputs_r+0x88>

0800ab8c <_svfiprintf_r>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	4698      	mov	r8, r3
 800ab92:	898b      	ldrh	r3, [r1, #12]
 800ab94:	4607      	mov	r7, r0
 800ab96:	061b      	lsls	r3, r3, #24
 800ab98:	460d      	mov	r5, r1
 800ab9a:	4614      	mov	r4, r2
 800ab9c:	b09d      	sub	sp, #116	; 0x74
 800ab9e:	d50e      	bpl.n	800abbe <_svfiprintf_r+0x32>
 800aba0:	690b      	ldr	r3, [r1, #16]
 800aba2:	b963      	cbnz	r3, 800abbe <_svfiprintf_r+0x32>
 800aba4:	2140      	movs	r1, #64	; 0x40
 800aba6:	f7ff ff0b 	bl	800a9c0 <_malloc_r>
 800abaa:	6028      	str	r0, [r5, #0]
 800abac:	6128      	str	r0, [r5, #16]
 800abae:	b920      	cbnz	r0, 800abba <_svfiprintf_r+0x2e>
 800abb0:	230c      	movs	r3, #12
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	e0d0      	b.n	800ad5c <_svfiprintf_r+0x1d0>
 800abba:	2340      	movs	r3, #64	; 0x40
 800abbc:	616b      	str	r3, [r5, #20]
 800abbe:	2300      	movs	r3, #0
 800abc0:	9309      	str	r3, [sp, #36]	; 0x24
 800abc2:	2320      	movs	r3, #32
 800abc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abc8:	2330      	movs	r3, #48	; 0x30
 800abca:	f04f 0901 	mov.w	r9, #1
 800abce:	f8cd 800c 	str.w	r8, [sp, #12]
 800abd2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ad74 <_svfiprintf_r+0x1e8>
 800abd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abda:	4623      	mov	r3, r4
 800abdc:	469a      	mov	sl, r3
 800abde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe2:	b10a      	cbz	r2, 800abe8 <_svfiprintf_r+0x5c>
 800abe4:	2a25      	cmp	r2, #37	; 0x25
 800abe6:	d1f9      	bne.n	800abdc <_svfiprintf_r+0x50>
 800abe8:	ebba 0b04 	subs.w	fp, sl, r4
 800abec:	d00b      	beq.n	800ac06 <_svfiprintf_r+0x7a>
 800abee:	465b      	mov	r3, fp
 800abf0:	4622      	mov	r2, r4
 800abf2:	4629      	mov	r1, r5
 800abf4:	4638      	mov	r0, r7
 800abf6:	f7ff ff6f 	bl	800aad8 <__ssputs_r>
 800abfa:	3001      	adds	r0, #1
 800abfc:	f000 80a9 	beq.w	800ad52 <_svfiprintf_r+0x1c6>
 800ac00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac02:	445a      	add	r2, fp
 800ac04:	9209      	str	r2, [sp, #36]	; 0x24
 800ac06:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 80a1 	beq.w	800ad52 <_svfiprintf_r+0x1c6>
 800ac10:	2300      	movs	r3, #0
 800ac12:	f04f 32ff 	mov.w	r2, #4294967295
 800ac16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac1a:	f10a 0a01 	add.w	sl, sl, #1
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac26:	931a      	str	r3, [sp, #104]	; 0x68
 800ac28:	4654      	mov	r4, sl
 800ac2a:	2205      	movs	r2, #5
 800ac2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac30:	4850      	ldr	r0, [pc, #320]	; (800ad74 <_svfiprintf_r+0x1e8>)
 800ac32:	f000 fa67 	bl	800b104 <memchr>
 800ac36:	9a04      	ldr	r2, [sp, #16]
 800ac38:	b9d8      	cbnz	r0, 800ac72 <_svfiprintf_r+0xe6>
 800ac3a:	06d0      	lsls	r0, r2, #27
 800ac3c:	bf44      	itt	mi
 800ac3e:	2320      	movmi	r3, #32
 800ac40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac44:	0711      	lsls	r1, r2, #28
 800ac46:	bf44      	itt	mi
 800ac48:	232b      	movmi	r3, #43	; 0x2b
 800ac4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac52:	2b2a      	cmp	r3, #42	; 0x2a
 800ac54:	d015      	beq.n	800ac82 <_svfiprintf_r+0xf6>
 800ac56:	4654      	mov	r4, sl
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f04f 0c0a 	mov.w	ip, #10
 800ac5e:	9a07      	ldr	r2, [sp, #28]
 800ac60:	4621      	mov	r1, r4
 800ac62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac66:	3b30      	subs	r3, #48	; 0x30
 800ac68:	2b09      	cmp	r3, #9
 800ac6a:	d94d      	bls.n	800ad08 <_svfiprintf_r+0x17c>
 800ac6c:	b1b0      	cbz	r0, 800ac9c <_svfiprintf_r+0x110>
 800ac6e:	9207      	str	r2, [sp, #28]
 800ac70:	e014      	b.n	800ac9c <_svfiprintf_r+0x110>
 800ac72:	eba0 0308 	sub.w	r3, r0, r8
 800ac76:	fa09 f303 	lsl.w	r3, r9, r3
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	46a2      	mov	sl, r4
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	e7d2      	b.n	800ac28 <_svfiprintf_r+0x9c>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	1d19      	adds	r1, r3, #4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	9103      	str	r1, [sp, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	bfbb      	ittet	lt
 800ac8e:	425b      	neglt	r3, r3
 800ac90:	f042 0202 	orrlt.w	r2, r2, #2
 800ac94:	9307      	strge	r3, [sp, #28]
 800ac96:	9307      	strlt	r3, [sp, #28]
 800ac98:	bfb8      	it	lt
 800ac9a:	9204      	strlt	r2, [sp, #16]
 800ac9c:	7823      	ldrb	r3, [r4, #0]
 800ac9e:	2b2e      	cmp	r3, #46	; 0x2e
 800aca0:	d10c      	bne.n	800acbc <_svfiprintf_r+0x130>
 800aca2:	7863      	ldrb	r3, [r4, #1]
 800aca4:	2b2a      	cmp	r3, #42	; 0x2a
 800aca6:	d134      	bne.n	800ad12 <_svfiprintf_r+0x186>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	3402      	adds	r4, #2
 800acac:	1d1a      	adds	r2, r3, #4
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	9203      	str	r2, [sp, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bfb8      	it	lt
 800acb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ad78 <_svfiprintf_r+0x1ec>
 800acc0:	2203      	movs	r2, #3
 800acc2:	4650      	mov	r0, sl
 800acc4:	7821      	ldrb	r1, [r4, #0]
 800acc6:	f000 fa1d 	bl	800b104 <memchr>
 800acca:	b138      	cbz	r0, 800acdc <_svfiprintf_r+0x150>
 800accc:	2240      	movs	r2, #64	; 0x40
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	eba0 000a 	sub.w	r0, r0, sl
 800acd4:	4082      	lsls	r2, r0
 800acd6:	4313      	orrs	r3, r2
 800acd8:	3401      	adds	r4, #1
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace0:	2206      	movs	r2, #6
 800ace2:	4826      	ldr	r0, [pc, #152]	; (800ad7c <_svfiprintf_r+0x1f0>)
 800ace4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ace8:	f000 fa0c 	bl	800b104 <memchr>
 800acec:	2800      	cmp	r0, #0
 800acee:	d038      	beq.n	800ad62 <_svfiprintf_r+0x1d6>
 800acf0:	4b23      	ldr	r3, [pc, #140]	; (800ad80 <_svfiprintf_r+0x1f4>)
 800acf2:	bb1b      	cbnz	r3, 800ad3c <_svfiprintf_r+0x1b0>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	3307      	adds	r3, #7
 800acf8:	f023 0307 	bic.w	r3, r3, #7
 800acfc:	3308      	adds	r3, #8
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad02:	4433      	add	r3, r6
 800ad04:	9309      	str	r3, [sp, #36]	; 0x24
 800ad06:	e768      	b.n	800abda <_svfiprintf_r+0x4e>
 800ad08:	460c      	mov	r4, r1
 800ad0a:	2001      	movs	r0, #1
 800ad0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad10:	e7a6      	b.n	800ac60 <_svfiprintf_r+0xd4>
 800ad12:	2300      	movs	r3, #0
 800ad14:	f04f 0c0a 	mov.w	ip, #10
 800ad18:	4619      	mov	r1, r3
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad24:	3a30      	subs	r2, #48	; 0x30
 800ad26:	2a09      	cmp	r2, #9
 800ad28:	d903      	bls.n	800ad32 <_svfiprintf_r+0x1a6>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0c6      	beq.n	800acbc <_svfiprintf_r+0x130>
 800ad2e:	9105      	str	r1, [sp, #20]
 800ad30:	e7c4      	b.n	800acbc <_svfiprintf_r+0x130>
 800ad32:	4604      	mov	r4, r0
 800ad34:	2301      	movs	r3, #1
 800ad36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad3a:	e7f0      	b.n	800ad1e <_svfiprintf_r+0x192>
 800ad3c:	ab03      	add	r3, sp, #12
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	462a      	mov	r2, r5
 800ad42:	4638      	mov	r0, r7
 800ad44:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <_svfiprintf_r+0x1f8>)
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	f3af 8000 	nop.w
 800ad4c:	1c42      	adds	r2, r0, #1
 800ad4e:	4606      	mov	r6, r0
 800ad50:	d1d6      	bne.n	800ad00 <_svfiprintf_r+0x174>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	065b      	lsls	r3, r3, #25
 800ad56:	f53f af2d 	bmi.w	800abb4 <_svfiprintf_r+0x28>
 800ad5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad5c:	b01d      	add	sp, #116	; 0x74
 800ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad62:	ab03      	add	r3, sp, #12
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	462a      	mov	r2, r5
 800ad68:	4638      	mov	r0, r7
 800ad6a:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <_svfiprintf_r+0x1f8>)
 800ad6c:	a904      	add	r1, sp, #16
 800ad6e:	f000 f87d 	bl	800ae6c <_printf_i>
 800ad72:	e7eb      	b.n	800ad4c <_svfiprintf_r+0x1c0>
 800ad74:	0800b677 	.word	0x0800b677
 800ad78:	0800b67d 	.word	0x0800b67d
 800ad7c:	0800b681 	.word	0x0800b681
 800ad80:	00000000 	.word	0x00000000
 800ad84:	0800aad9 	.word	0x0800aad9

0800ad88 <_printf_common>:
 800ad88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	4699      	mov	r9, r3
 800ad90:	688a      	ldr	r2, [r1, #8]
 800ad92:	690b      	ldr	r3, [r1, #16]
 800ad94:	4607      	mov	r7, r0
 800ad96:	4293      	cmp	r3, r2
 800ad98:	bfb8      	it	lt
 800ad9a:	4613      	movlt	r3, r2
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ada2:	460c      	mov	r4, r1
 800ada4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ada8:	b10a      	cbz	r2, 800adae <_printf_common+0x26>
 800adaa:	3301      	adds	r3, #1
 800adac:	6033      	str	r3, [r6, #0]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	0699      	lsls	r1, r3, #26
 800adb2:	bf42      	ittt	mi
 800adb4:	6833      	ldrmi	r3, [r6, #0]
 800adb6:	3302      	addmi	r3, #2
 800adb8:	6033      	strmi	r3, [r6, #0]
 800adba:	6825      	ldr	r5, [r4, #0]
 800adbc:	f015 0506 	ands.w	r5, r5, #6
 800adc0:	d106      	bne.n	800add0 <_printf_common+0x48>
 800adc2:	f104 0a19 	add.w	sl, r4, #25
 800adc6:	68e3      	ldr	r3, [r4, #12]
 800adc8:	6832      	ldr	r2, [r6, #0]
 800adca:	1a9b      	subs	r3, r3, r2
 800adcc:	42ab      	cmp	r3, r5
 800adce:	dc2b      	bgt.n	800ae28 <_printf_common+0xa0>
 800add0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800add4:	1e13      	subs	r3, r2, #0
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	bf18      	it	ne
 800adda:	2301      	movne	r3, #1
 800addc:	0692      	lsls	r2, r2, #26
 800adde:	d430      	bmi.n	800ae42 <_printf_common+0xba>
 800ade0:	4649      	mov	r1, r9
 800ade2:	4638      	mov	r0, r7
 800ade4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ade8:	47c0      	blx	r8
 800adea:	3001      	adds	r0, #1
 800adec:	d023      	beq.n	800ae36 <_printf_common+0xae>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	6922      	ldr	r2, [r4, #16]
 800adf2:	f003 0306 	and.w	r3, r3, #6
 800adf6:	2b04      	cmp	r3, #4
 800adf8:	bf14      	ite	ne
 800adfa:	2500      	movne	r5, #0
 800adfc:	6833      	ldreq	r3, [r6, #0]
 800adfe:	f04f 0600 	mov.w	r6, #0
 800ae02:	bf08      	it	eq
 800ae04:	68e5      	ldreq	r5, [r4, #12]
 800ae06:	f104 041a 	add.w	r4, r4, #26
 800ae0a:	bf08      	it	eq
 800ae0c:	1aed      	subeq	r5, r5, r3
 800ae0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ae12:	bf08      	it	eq
 800ae14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	bfc4      	itt	gt
 800ae1c:	1a9b      	subgt	r3, r3, r2
 800ae1e:	18ed      	addgt	r5, r5, r3
 800ae20:	42b5      	cmp	r5, r6
 800ae22:	d11a      	bne.n	800ae5a <_printf_common+0xd2>
 800ae24:	2000      	movs	r0, #0
 800ae26:	e008      	b.n	800ae3a <_printf_common+0xb2>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4638      	mov	r0, r7
 800ae30:	47c0      	blx	r8
 800ae32:	3001      	adds	r0, #1
 800ae34:	d103      	bne.n	800ae3e <_printf_common+0xb6>
 800ae36:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3e:	3501      	adds	r5, #1
 800ae40:	e7c1      	b.n	800adc6 <_printf_common+0x3e>
 800ae42:	2030      	movs	r0, #48	; 0x30
 800ae44:	18e1      	adds	r1, r4, r3
 800ae46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae50:	4422      	add	r2, r4
 800ae52:	3302      	adds	r3, #2
 800ae54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae58:	e7c2      	b.n	800ade0 <_printf_common+0x58>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4649      	mov	r1, r9
 800ae60:	4638      	mov	r0, r7
 800ae62:	47c0      	blx	r8
 800ae64:	3001      	adds	r0, #1
 800ae66:	d0e6      	beq.n	800ae36 <_printf_common+0xae>
 800ae68:	3601      	adds	r6, #1
 800ae6a:	e7d9      	b.n	800ae20 <_printf_common+0x98>

0800ae6c <_printf_i>:
 800ae6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	7e0f      	ldrb	r7, [r1, #24]
 800ae72:	4691      	mov	r9, r2
 800ae74:	2f78      	cmp	r7, #120	; 0x78
 800ae76:	4680      	mov	r8, r0
 800ae78:	460c      	mov	r4, r1
 800ae7a:	469a      	mov	sl, r3
 800ae7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae82:	d807      	bhi.n	800ae94 <_printf_i+0x28>
 800ae84:	2f62      	cmp	r7, #98	; 0x62
 800ae86:	d80a      	bhi.n	800ae9e <_printf_i+0x32>
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	f000 80d5 	beq.w	800b038 <_printf_i+0x1cc>
 800ae8e:	2f58      	cmp	r7, #88	; 0x58
 800ae90:	f000 80c1 	beq.w	800b016 <_printf_i+0x1aa>
 800ae94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae9c:	e03a      	b.n	800af14 <_printf_i+0xa8>
 800ae9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aea2:	2b15      	cmp	r3, #21
 800aea4:	d8f6      	bhi.n	800ae94 <_printf_i+0x28>
 800aea6:	a101      	add	r1, pc, #4	; (adr r1, 800aeac <_printf_i+0x40>)
 800aea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aeac:	0800af05 	.word	0x0800af05
 800aeb0:	0800af19 	.word	0x0800af19
 800aeb4:	0800ae95 	.word	0x0800ae95
 800aeb8:	0800ae95 	.word	0x0800ae95
 800aebc:	0800ae95 	.word	0x0800ae95
 800aec0:	0800ae95 	.word	0x0800ae95
 800aec4:	0800af19 	.word	0x0800af19
 800aec8:	0800ae95 	.word	0x0800ae95
 800aecc:	0800ae95 	.word	0x0800ae95
 800aed0:	0800ae95 	.word	0x0800ae95
 800aed4:	0800ae95 	.word	0x0800ae95
 800aed8:	0800b01f 	.word	0x0800b01f
 800aedc:	0800af45 	.word	0x0800af45
 800aee0:	0800afd9 	.word	0x0800afd9
 800aee4:	0800ae95 	.word	0x0800ae95
 800aee8:	0800ae95 	.word	0x0800ae95
 800aeec:	0800b041 	.word	0x0800b041
 800aef0:	0800ae95 	.word	0x0800ae95
 800aef4:	0800af45 	.word	0x0800af45
 800aef8:	0800ae95 	.word	0x0800ae95
 800aefc:	0800ae95 	.word	0x0800ae95
 800af00:	0800afe1 	.word	0x0800afe1
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	1d1a      	adds	r2, r3, #4
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	602a      	str	r2, [r5, #0]
 800af0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af14:	2301      	movs	r3, #1
 800af16:	e0a0      	b.n	800b05a <_printf_i+0x1ee>
 800af18:	6820      	ldr	r0, [r4, #0]
 800af1a:	682b      	ldr	r3, [r5, #0]
 800af1c:	0607      	lsls	r7, r0, #24
 800af1e:	f103 0104 	add.w	r1, r3, #4
 800af22:	6029      	str	r1, [r5, #0]
 800af24:	d501      	bpl.n	800af2a <_printf_i+0xbe>
 800af26:	681e      	ldr	r6, [r3, #0]
 800af28:	e003      	b.n	800af32 <_printf_i+0xc6>
 800af2a:	0646      	lsls	r6, r0, #25
 800af2c:	d5fb      	bpl.n	800af26 <_printf_i+0xba>
 800af2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af32:	2e00      	cmp	r6, #0
 800af34:	da03      	bge.n	800af3e <_printf_i+0xd2>
 800af36:	232d      	movs	r3, #45	; 0x2d
 800af38:	4276      	negs	r6, r6
 800af3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af3e:	230a      	movs	r3, #10
 800af40:	4859      	ldr	r0, [pc, #356]	; (800b0a8 <_printf_i+0x23c>)
 800af42:	e012      	b.n	800af6a <_printf_i+0xfe>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	6820      	ldr	r0, [r4, #0]
 800af48:	1d19      	adds	r1, r3, #4
 800af4a:	6029      	str	r1, [r5, #0]
 800af4c:	0605      	lsls	r5, r0, #24
 800af4e:	d501      	bpl.n	800af54 <_printf_i+0xe8>
 800af50:	681e      	ldr	r6, [r3, #0]
 800af52:	e002      	b.n	800af5a <_printf_i+0xee>
 800af54:	0641      	lsls	r1, r0, #25
 800af56:	d5fb      	bpl.n	800af50 <_printf_i+0xe4>
 800af58:	881e      	ldrh	r6, [r3, #0]
 800af5a:	2f6f      	cmp	r7, #111	; 0x6f
 800af5c:	bf0c      	ite	eq
 800af5e:	2308      	moveq	r3, #8
 800af60:	230a      	movne	r3, #10
 800af62:	4851      	ldr	r0, [pc, #324]	; (800b0a8 <_printf_i+0x23c>)
 800af64:	2100      	movs	r1, #0
 800af66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af6a:	6865      	ldr	r5, [r4, #4]
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	bfa8      	it	ge
 800af70:	6821      	ldrge	r1, [r4, #0]
 800af72:	60a5      	str	r5, [r4, #8]
 800af74:	bfa4      	itt	ge
 800af76:	f021 0104 	bicge.w	r1, r1, #4
 800af7a:	6021      	strge	r1, [r4, #0]
 800af7c:	b90e      	cbnz	r6, 800af82 <_printf_i+0x116>
 800af7e:	2d00      	cmp	r5, #0
 800af80:	d04b      	beq.n	800b01a <_printf_i+0x1ae>
 800af82:	4615      	mov	r5, r2
 800af84:	fbb6 f1f3 	udiv	r1, r6, r3
 800af88:	fb03 6711 	mls	r7, r3, r1, r6
 800af8c:	5dc7      	ldrb	r7, [r0, r7]
 800af8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af92:	4637      	mov	r7, r6
 800af94:	42bb      	cmp	r3, r7
 800af96:	460e      	mov	r6, r1
 800af98:	d9f4      	bls.n	800af84 <_printf_i+0x118>
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d10b      	bne.n	800afb6 <_printf_i+0x14a>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	07de      	lsls	r6, r3, #31
 800afa2:	d508      	bpl.n	800afb6 <_printf_i+0x14a>
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	6861      	ldr	r1, [r4, #4]
 800afa8:	4299      	cmp	r1, r3
 800afaa:	bfde      	ittt	le
 800afac:	2330      	movle	r3, #48	; 0x30
 800afae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afb6:	1b52      	subs	r2, r2, r5
 800afb8:	6122      	str	r2, [r4, #16]
 800afba:	464b      	mov	r3, r9
 800afbc:	4621      	mov	r1, r4
 800afbe:	4640      	mov	r0, r8
 800afc0:	f8cd a000 	str.w	sl, [sp]
 800afc4:	aa03      	add	r2, sp, #12
 800afc6:	f7ff fedf 	bl	800ad88 <_printf_common>
 800afca:	3001      	adds	r0, #1
 800afcc:	d14a      	bne.n	800b064 <_printf_i+0x1f8>
 800afce:	f04f 30ff 	mov.w	r0, #4294967295
 800afd2:	b004      	add	sp, #16
 800afd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	f043 0320 	orr.w	r3, r3, #32
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	2778      	movs	r7, #120	; 0x78
 800afe2:	4832      	ldr	r0, [pc, #200]	; (800b0ac <_printf_i+0x240>)
 800afe4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	6829      	ldr	r1, [r5, #0]
 800afec:	061f      	lsls	r7, r3, #24
 800afee:	f851 6b04 	ldr.w	r6, [r1], #4
 800aff2:	d402      	bmi.n	800affa <_printf_i+0x18e>
 800aff4:	065f      	lsls	r7, r3, #25
 800aff6:	bf48      	it	mi
 800aff8:	b2b6      	uxthmi	r6, r6
 800affa:	07df      	lsls	r7, r3, #31
 800affc:	bf48      	it	mi
 800affe:	f043 0320 	orrmi.w	r3, r3, #32
 800b002:	6029      	str	r1, [r5, #0]
 800b004:	bf48      	it	mi
 800b006:	6023      	strmi	r3, [r4, #0]
 800b008:	b91e      	cbnz	r6, 800b012 <_printf_i+0x1a6>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	f023 0320 	bic.w	r3, r3, #32
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	2310      	movs	r3, #16
 800b014:	e7a6      	b.n	800af64 <_printf_i+0xf8>
 800b016:	4824      	ldr	r0, [pc, #144]	; (800b0a8 <_printf_i+0x23c>)
 800b018:	e7e4      	b.n	800afe4 <_printf_i+0x178>
 800b01a:	4615      	mov	r5, r2
 800b01c:	e7bd      	b.n	800af9a <_printf_i+0x12e>
 800b01e:	682b      	ldr	r3, [r5, #0]
 800b020:	6826      	ldr	r6, [r4, #0]
 800b022:	1d18      	adds	r0, r3, #4
 800b024:	6961      	ldr	r1, [r4, #20]
 800b026:	6028      	str	r0, [r5, #0]
 800b028:	0635      	lsls	r5, r6, #24
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	d501      	bpl.n	800b032 <_printf_i+0x1c6>
 800b02e:	6019      	str	r1, [r3, #0]
 800b030:	e002      	b.n	800b038 <_printf_i+0x1cc>
 800b032:	0670      	lsls	r0, r6, #25
 800b034:	d5fb      	bpl.n	800b02e <_printf_i+0x1c2>
 800b036:	8019      	strh	r1, [r3, #0]
 800b038:	2300      	movs	r3, #0
 800b03a:	4615      	mov	r5, r2
 800b03c:	6123      	str	r3, [r4, #16]
 800b03e:	e7bc      	b.n	800afba <_printf_i+0x14e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	2100      	movs	r1, #0
 800b044:	1d1a      	adds	r2, r3, #4
 800b046:	602a      	str	r2, [r5, #0]
 800b048:	681d      	ldr	r5, [r3, #0]
 800b04a:	6862      	ldr	r2, [r4, #4]
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 f859 	bl	800b104 <memchr>
 800b052:	b108      	cbz	r0, 800b058 <_printf_i+0x1ec>
 800b054:	1b40      	subs	r0, r0, r5
 800b056:	6060      	str	r0, [r4, #4]
 800b058:	6863      	ldr	r3, [r4, #4]
 800b05a:	6123      	str	r3, [r4, #16]
 800b05c:	2300      	movs	r3, #0
 800b05e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b062:	e7aa      	b.n	800afba <_printf_i+0x14e>
 800b064:	462a      	mov	r2, r5
 800b066:	4649      	mov	r1, r9
 800b068:	4640      	mov	r0, r8
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	47d0      	blx	sl
 800b06e:	3001      	adds	r0, #1
 800b070:	d0ad      	beq.n	800afce <_printf_i+0x162>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	079b      	lsls	r3, r3, #30
 800b076:	d413      	bmi.n	800b0a0 <_printf_i+0x234>
 800b078:	68e0      	ldr	r0, [r4, #12]
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	4298      	cmp	r0, r3
 800b07e:	bfb8      	it	lt
 800b080:	4618      	movlt	r0, r3
 800b082:	e7a6      	b.n	800afd2 <_printf_i+0x166>
 800b084:	2301      	movs	r3, #1
 800b086:	4632      	mov	r2, r6
 800b088:	4649      	mov	r1, r9
 800b08a:	4640      	mov	r0, r8
 800b08c:	47d0      	blx	sl
 800b08e:	3001      	adds	r0, #1
 800b090:	d09d      	beq.n	800afce <_printf_i+0x162>
 800b092:	3501      	adds	r5, #1
 800b094:	68e3      	ldr	r3, [r4, #12]
 800b096:	9903      	ldr	r1, [sp, #12]
 800b098:	1a5b      	subs	r3, r3, r1
 800b09a:	42ab      	cmp	r3, r5
 800b09c:	dcf2      	bgt.n	800b084 <_printf_i+0x218>
 800b09e:	e7eb      	b.n	800b078 <_printf_i+0x20c>
 800b0a0:	2500      	movs	r5, #0
 800b0a2:	f104 0619 	add.w	r6, r4, #25
 800b0a6:	e7f5      	b.n	800b094 <_printf_i+0x228>
 800b0a8:	0800b688 	.word	0x0800b688
 800b0ac:	0800b699 	.word	0x0800b699

0800b0b0 <memmove>:
 800b0b0:	4288      	cmp	r0, r1
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	eb01 0402 	add.w	r4, r1, r2
 800b0b8:	d902      	bls.n	800b0c0 <memmove+0x10>
 800b0ba:	4284      	cmp	r4, r0
 800b0bc:	4623      	mov	r3, r4
 800b0be:	d807      	bhi.n	800b0d0 <memmove+0x20>
 800b0c0:	1e43      	subs	r3, r0, #1
 800b0c2:	42a1      	cmp	r1, r4
 800b0c4:	d008      	beq.n	800b0d8 <memmove+0x28>
 800b0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ce:	e7f8      	b.n	800b0c2 <memmove+0x12>
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4402      	add	r2, r0
 800b0d4:	428a      	cmp	r2, r1
 800b0d6:	d100      	bne.n	800b0da <memmove+0x2a>
 800b0d8:	bd10      	pop	{r4, pc}
 800b0da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0e2:	e7f7      	b.n	800b0d4 <memmove+0x24>

0800b0e4 <_sbrk_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4d05      	ldr	r5, [pc, #20]	; (800b100 <_sbrk_r+0x1c>)
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	f7f6 fbb0 	bl	8001854 <_sbrk>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d102      	bne.n	800b0fe <_sbrk_r+0x1a>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b103      	cbz	r3, 800b0fe <_sbrk_r+0x1a>
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	2000173c 	.word	0x2000173c

0800b104 <memchr>:
 800b104:	4603      	mov	r3, r0
 800b106:	b510      	push	{r4, lr}
 800b108:	b2c9      	uxtb	r1, r1
 800b10a:	4402      	add	r2, r0
 800b10c:	4293      	cmp	r3, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	d101      	bne.n	800b116 <memchr+0x12>
 800b112:	2000      	movs	r0, #0
 800b114:	e003      	b.n	800b11e <memchr+0x1a>
 800b116:	7804      	ldrb	r4, [r0, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	428c      	cmp	r4, r1
 800b11c:	d1f6      	bne.n	800b10c <memchr+0x8>
 800b11e:	bd10      	pop	{r4, pc}

0800b120 <memcpy>:
 800b120:	440a      	add	r2, r1
 800b122:	4291      	cmp	r1, r2
 800b124:	f100 33ff 	add.w	r3, r0, #4294967295
 800b128:	d100      	bne.n	800b12c <memcpy+0xc>
 800b12a:	4770      	bx	lr
 800b12c:	b510      	push	{r4, lr}
 800b12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b132:	4291      	cmp	r1, r2
 800b134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b138:	d1f9      	bne.n	800b12e <memcpy+0xe>
 800b13a:	bd10      	pop	{r4, pc}

0800b13c <_realloc_r>:
 800b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b140:	4680      	mov	r8, r0
 800b142:	4614      	mov	r4, r2
 800b144:	460e      	mov	r6, r1
 800b146:	b921      	cbnz	r1, 800b152 <_realloc_r+0x16>
 800b148:	4611      	mov	r1, r2
 800b14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	f7ff bc37 	b.w	800a9c0 <_malloc_r>
 800b152:	b92a      	cbnz	r2, 800b160 <_realloc_r+0x24>
 800b154:	f7ff fbcc 	bl	800a8f0 <_free_r>
 800b158:	4625      	mov	r5, r4
 800b15a:	4628      	mov	r0, r5
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b160:	f000 f81b 	bl	800b19a <_malloc_usable_size_r>
 800b164:	4284      	cmp	r4, r0
 800b166:	4607      	mov	r7, r0
 800b168:	d802      	bhi.n	800b170 <_realloc_r+0x34>
 800b16a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b16e:	d812      	bhi.n	800b196 <_realloc_r+0x5a>
 800b170:	4621      	mov	r1, r4
 800b172:	4640      	mov	r0, r8
 800b174:	f7ff fc24 	bl	800a9c0 <_malloc_r>
 800b178:	4605      	mov	r5, r0
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0ed      	beq.n	800b15a <_realloc_r+0x1e>
 800b17e:	42bc      	cmp	r4, r7
 800b180:	4622      	mov	r2, r4
 800b182:	4631      	mov	r1, r6
 800b184:	bf28      	it	cs
 800b186:	463a      	movcs	r2, r7
 800b188:	f7ff ffca 	bl	800b120 <memcpy>
 800b18c:	4631      	mov	r1, r6
 800b18e:	4640      	mov	r0, r8
 800b190:	f7ff fbae 	bl	800a8f0 <_free_r>
 800b194:	e7e1      	b.n	800b15a <_realloc_r+0x1e>
 800b196:	4635      	mov	r5, r6
 800b198:	e7df      	b.n	800b15a <_realloc_r+0x1e>

0800b19a <_malloc_usable_size_r>:
 800b19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19e:	1f18      	subs	r0, r3, #4
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	bfbc      	itt	lt
 800b1a4:	580b      	ldrlt	r3, [r1, r0]
 800b1a6:	18c0      	addlt	r0, r0, r3
 800b1a8:	4770      	bx	lr
	...

0800b1ac <_init>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	bf00      	nop
 800b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b2:	bc08      	pop	{r3}
 800b1b4:	469e      	mov	lr, r3
 800b1b6:	4770      	bx	lr

0800b1b8 <_fini>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr
